class SetUtilTest extends SysTestCase
{

    public void testAddIntToNull()
    {
        Set set = SetUtil::add(null, 1);

        this.assertNotNull(set);
        this.assertEquals(1, set.elements());
        this.assertEquals(Types::Integer, set.typeId());
    }

    public void testAddListEnumeratorToNull()
    {
        List list = ListUtil::newFrom(['test', 'ttt']);
        Set set = SetUtil::add(null, 'test');

        this.assertNotNull(set);
        this.assertEquals(1, set.elements());
        this.assertEquals(Types::String, set.typeId());
    }

    public void testAddOneValueEnumeratorToNull()
    {
        Enumerator e = EnumeratorUtil::getEnumerator('test');
        Set set = SetUtil::addAll(null, e);

        this.assertNotNull(set);
        this.assertEquals(1, set.elements());
        this.assertEquals(Types::String, set.typeId());
    }

    public void testAddStrToNull()
    {
        Set set = SetUtil::add(null, 'test');

        this.assertNotNull(set);
        this.assertEquals(1, set.elements());
        this.assertEquals(Types::String, set.typeId());
    }

    void testElements()
    {
        Set set;

        this.info('null');

        set = null;
        this.assertEquals(0, SetUtil::elements(set));

        this.info('int');

        set = new Set(Types::Integer);
        set.add(1);
        set.add(2);
        set.add(3);

        this.assertEquals(3, SetUtil::elements(set));

        this.info('str');

        set = new Set(Types::String);
        set.add('a');
        set.add('b');
        set.add('c');
        set.add('d');

        this.assertEquals(4, SetUtil::elements(set));

        this.info('class');

        set = new Set(Types::Class);
        set.add(Any::construct(1));
        set.add(Any::construct(2));
        set.add(Any::construct(3));

        this.assertEquals(3, SetUtil::elements(set));
    }

    void testItem()
    {
        Set set = SetUtil::newFromContainer(['a','b','c','d','e','f','g','i','j']);
        anytype undefined;

        this.info('correct idx');

        this.assertEquals('b', SetUtil::item(set, 2));
        this.assertEquals('c', SetUtil::item(set, 3));
        this.assertEquals('j', SetUtil::item(set, 9));

        this.info('out of bounds');

        this.assertEquals(undefined, SetUtil::item(set, 0));
        this.assertEquals(0,         SetUtil::item(set, 10));
        this.assertEquals(undefined, SetUtil::item(set, 22));
        this.assertEquals(undefined, SetUtil::item(set, -1));
        this.assertEquals(undefined, SetUtil::item(set, -4));
    }

    void testNewFromArray()
    {
        Set set;
        Array fromArray;

        this.info('null');

        fromArray = null;
        set = SetUtil::newFromArray(fromArray);
        this.assertNull(set);

        this.info('int');

        fromArray = new Array(Types::Integer);
        fromArray.value(1,1);
        fromArray.value(2,2);
        fromArray.value(3,3);
        fromArray.value(4,2);

        set = SetUtil::newFromArray(fromArray);
        this.assertNotNull(set);
        this.assertEquals(Types::Integer, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('{1, 2, 3}', set.toString());

        this.info('str');

        fromArray = new Array(Types::String);
        fromArray.value(1,'a');
        fromArray.value(2,'b');
        fromArray.value(3,'c');
        fromArray.value(4,'b');

        set = SetUtil::newFromArray(fromArray);
        this.assertNotNull(set);
        this.assertEquals(Types::String, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('{"a", "b", "c"}', set.toString());

        this.info('class');

        fromArray = new Array(Types::Class);
        fromArray.value(1,Any::construct('a'));
        fromArray.value(2,Any::construct('b'));
        fromArray.value(3,Any::construct('c'));
        fromArray.value(4,Any::construct('a'));

        set = SetUtil::newFromArray(fromArray);
        this.assertNotNull(set);
        this.assertEquals(Types::Class, set.typeId());
        this.assertEquals(4, set.elements());
    }

    void testNewFromContainer()
    {
        Set set;
        container con;

        this.info('null');

        con = connull();
        set = SetUtil::newFromContainer(con);
        this.assertNull(set);

        this.info('int');

        con = [1,2,3,2];
        set = SetUtil::newFromContainer(con);
        this.assertNotNull(set);
        this.assertEquals(types::Integer, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<1, 2, 3>', set.toString());

        this.info('str');

        con = ['a','b','c','b'];
        set = SetUtil::newFromContainer(con);
        this.assertNotNull(set);
        this.assertEquals(types::String, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<"a", "b", "c">', set.toString());

        this.info('mix');

        con = [1, 'b', 'c'];
        set = SetUtil::newFromContainer(con);
        this.assertEquals(types::Integer, set.typeId());
        this.assertEquals(1, set.elements());
        this.assertEquals('<1>', set.toString());
    }

    void testNewFromList()
    {
        Set set;
        List fromList;

        this.info('null');

        fromList = null;
        set = SetUtil::newFromList(fromList);
        this.assertNull(set);

        this.info('int');

        fromList = new List(Types::Integer);
        fromList.addEnd(1);
        fromList.addEnd(2);
        fromList.addEnd(3);

        set = SetUtil::newFromList(fromList);
        this.assertNotNull(set);
        this.assertEquals(Types::Integer, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<1, 2, 3>', set.toString());

        this.info('str');

        fromList = new List(Types::String);
        fromList.addEnd('a');
        fromList.addEnd('b');
        fromList.addEnd('c');

        set = SetUtil::newFromList(fromList);
        this.assertNotNull(set);
        this.assertEquals(Types::String, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<"a", "b", "c">', set.toString());

        this.info('class');

        fromList = new List(Types::Class);
        fromList.addEnd(Any::construct('a'));
        fromList.addEnd(Any::construct('b'));
        fromList.addEnd(Any::construct('c'));
        fromList.addEnd(Any::construct('b'));

        set = SetUtil::newFromList(fromList);
        this.assertNotNull(set);
        this.assertEquals(Types::Class, set.typeId());
        this.assertEquals(4, set.elements());
    }

    void testNewFromSet()
    {
        Set set;
        Set fromSet;

        this.info('null');

        fromSet = null;
        set = SetUtil::newFromSet(fromSet);
        this.assertNull(set);

        this.info('int');

        fromSet = new Set(Types::Integer);
        fromSet.add(1);
        fromSet.add(2);
        fromSet.add(3);

        set = SetUtil::newfromSet(fromSet);
        this.assertNotNull(set);
        this.assertEquals(Types::Integer, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<1, 2, 3>', set.toString());

        this.info('str');

        fromSet = new Set(Types::String);
        fromSet.add('a');
        fromSet.add('b');
        fromSet.add('c');

        set = SetUtil::newfromSet(fromSet);
        this.assertNotNull(set);
        this.assertEquals(Types::String, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('<"a", "b", "c">', set.toString());

        this.info('class');

        fromSet = new Set(Types::Class);
        fromSet.add(Any::construct('a'));
        fromSet.add(Any::construct('b'));
        fromSet.add(Any::construct('c'));

        set = SetUtil::newfromSet(fromSet);
        this.assertNotNull(set);
        this.assertEquals(Types::Class, set.typeId());
        this.assertEquals(3, set.elements());
    }

    void testToArray()
    {
        Set set;
        Array arr;

        this.info('null');

        set = null;
        arr = setUtil::toArray(set);
        this.assertNull(arr);

        this.info('int');

        set = new Set(Types::Integer);
        set.add(1);
        set.add(2);
        set.add(3);

        arr = SetUtil::toArray(set);
        this.assertNotNull(arr);
        this.assertEquals(types::Integer, arr.typeId());
        this.assertEquals(3, arr.lastIndex());
        this.assertEquals('(1, 2, 3)', arr.toString());

        this.info('str');

        set = new Set(Types::String);
        set.add('a');
        set.add('b');
        set.add('c');

        arr = SetUtil::toArray(set);
        this.assertNotNull(arr);
        this.assertEquals(types::String, arr.typeId());
        this.assertEquals(3, arr.lastIndex());
        this.assertEquals('("a", "b", "c")', arr.toString());

        this.info('class');

        set = new Set(Types::Class);
        set.add(Any::construct('a'));
        set.add(Any::construct('b'));
        set.add(Any::construct('c'));

        arr = SetUtil::toArray(set);
        this.assertNotNull(arr);
        this.assertEquals(types::Class, arr.typeId());
        this.assertEquals(3, arr.lastIndex());
    }

    void testToCon()
    {
        Set set;
        container con;

        this.info('null');

        set = null;
        con = SetUtil::toCon(set);
        this.assertEquals(connull(), con);

        this.info('int');

        set = new Set(Types::Integer);
        set.add(1);
        set.add(2);
        set.add(3);

        con = SetUtil::toCon(set);
        this.assertEquals([1, 2, 3], con);

        this.info('str');

        set = new Set(Types::String);
        set.add('a');
        set.add('b');
        set.add('c');

        con = SetUtil::toCon(set);
        this.assertEquals(["a", "b", "c"], con);

        this.info('class');

        set = new Set(Types::Class);
        set.add(Any::construct(1));
        set.add(Any::construct(2));
        set.add(Any::construct(3));

        con = SetUtil::toCon(set);
        this.assertEquals(connull(), con);
    }

    void testToList()
    {
        Set set;
        List list;

        this.info('null');

        set = null;
        list = SetUtil::toList(set);
        this.assertNull(list);

        this.info('int');

        list = new List(Types::Integer);
        list.addEnd(1);
        list.addEnd(2);
        list.addEnd(3);

        set = ListUtil::toSet(list);
        this.assertNotNull(set);
        this.assertEquals(types::Integer, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('{1, 2, 3}', set.toString());

        this.info('str');

        list = new List(Types::String);
        list.addEnd('a');
        list.addEnd('b');
        list.addEnd('c');

        set = ListUtil::toSet(list);
        this.assertNotNull(set);
        this.assertEquals(types::String, set.typeId());
        this.assertEquals(3, set.elements());
        this.assertEquals('{"a", "b", "c"}', set.toString());

        this.info('class');

        list = new List(Types::Class);
        list.addEnd(Any::construct('a'));
        list.addEnd(Any::construct('b'));
        list.addEnd(Any::construct('c'));

        set = ListUtil::toSet(list);
        this.assertNotNull(set);
        this.assertEquals(types::Class, set.typeId());
        this.assertEquals(3, set.elements());
    }

    void testToStr()
    {
        Set set;
        str s;

        this.info('null');

        set = null;
        s = SetUtil::toStr(set);
        this.assertEquals('', s);

        this.info('int');

        set = new Set(Types::Integer);
        set.add(1);
        set.add(2);
        set.add(3);

        s = SetUtil::toStr(set);
        this.assertEquals('1,2,3', s);

        this.info('str');

        set = new Set(Types::String);
        set.add('a');
        set.add('b');
        set.add('c');

        s = SetUtil::toStr(set);
        this.assertEquals('a,b,c', s);

        this.info('class');

        set = new Set(Types::Class);
        set.add(Any::construct('a'));
        set.add(Any::construct('b'));
        set.add(Any::construct('c'));

        s = SetUtil::toStr(set, ': ');
        this.assertEquals('a: b: c', s);
    }
}