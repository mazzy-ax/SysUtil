
    public static LabelType classIdMismatch(str _funcName, ClassId actual, ClassId expected)
    {
        SysDictClass actualDc = new SysDictClass(actual);
        SysDictClass expectedDc = new SysDictClass(expected);

        str actualStr = actualDc ? actualDc.toString() : strfmt('%1',actual);
        str expectedStr = expectedDc ? expectedDc.toString() : strfmt('%1', expected);

        LabelType ret = strfmt('Class mismatch at %1: Actual: %2, Expected %3', _funcName, actualStr, expectedStr);

        return ret;
    }

    private static FormBuildDataSource mainFormDatasource(Form form)
    {
        FormBuildDataSource    formDataSource;
        int                    i;
        SysDictTable           dictTable;
        ;

        for (i=1; i<= form.dataSourceCount(); i++)
        {
            formDataSource = form.dataSource(i);
            dictTable = new SysDictTable(formDataSource.table());

            //Find main table
            if (!formDataSource.joinSource() &&
                form.name() == SysRecordTemplate::getFormName(dictTable.id()))
            {
                return formDataSource;
            }
        }
        return form.dataSource(1);
    }

    static LabelType missingFormActiveBuffer(FormName name, str bufferType = '')
    {
        if (bufferType)
        {
            return strfmt("@SYS19096", name, bufferType);
        }

        return strfmt("@SYS22678", name);
    }

    // в качестве описания можно использовать название переменной
    public static LabelType unsupportedEmptyString(str _funcName, anytype _description = '')
    {
        LabelType ret = strfmt("unsupported empty string in %1 %2", _funcName, _description);

        return ret;
    }

    public static LabelType unsupportedEnum(str _funcName, anytype enumValue = '')
    {
        LabelType ret;
        ;

        if (typeof(enumValue) == Types::Enum)
        {
            ret = strfmt("Enum <%1:%2> не поддерживается %3. Обратитесь к разработчикам.", EnumId2Name(DictEnum::value2id(enumValue)), enumValue, _funcName);
        }
        else
        {
            ret = strfmt("Enum <%1> не поддерживается %2. Обратитесь к разработчикам.", enumValue, _funcName);
        }
        return ret;
    }

    public static LabelType unsupportedNull(str _funcName, anytype _varNameOrText = '')
    {
        LabelType ret = strfmt("unsupported Null in %1 %2", _funcName, _varNameOrText);

        return ret;
    }

    public static LabelType unsupportedType(str _funcName, anytype type = '')
    {
        LabelType ret = strfmt("unsupported Type %1 - %2", type, _funcName);

        return ret;
    }
