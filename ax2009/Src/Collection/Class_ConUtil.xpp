//
// https://github.com/mazzy-ax/SysUtil
//
// Util-класс реализует только статические методы.
// не содержит внутри никаких значений.
// не имеет смысла создавать экземпляр этого класса.
//
abstract class ConUtil
{

    public static container add(container con, anytype value)
    {
        if( AnytypeUtil::isPrimitive(value) )
        {
            con += value;
        }

        return con;
    }

    public static container addAll(container con, anytype collectionOrValue, int maxElements = 0)
    {
        int elements;
        Enumerator e = EnumeratorUtil::getEnumerator(collectionOrValue);

        while( e && e.moveNext() && (maxElements == 0 || elements <= maxElements) )
        {
            con = ConUtil::add(con, e.current());

            elements++;
        }

        return con;
    }

    // добавляет значение поля из буфера
    // если поле содержит контейнер, то контейнер добавляется как есть, целиком
    public static container addFieldValue(container con, Common buf, FieldId fieldId)
    {
        anytype value = RecordFieldUtil::getValue(buf, fieldId);
        ;

        con = ConUtil::add(con, value); // добавляем значение поля как значение. Не раскрываем контейнер из поля.

        return con;
    }

    // добавляет значения поля из буфера, который был заполнен командой Query
    //
    public static container addFromQuery(container con, Query q, TableId tableId, FieldId fieldId, int maxElements = 0)
    {
        QueryRun qr = new QueryRun(q);
        ;

        con = ConUtil::addFromQueryRun(con, qr, tableId, fieldId, maxElements);

        return con;
    }

    // добавляет значение поля из буфера, который был заполнен QueryRun
    // если поле содержит контейнер, то контейнер добавляется как есть, целиком
    //
    public static container addFromQueryRun(container con, QueryRun qr, TableId tableId, FieldId fieldId, int maxElements = 0)
    {
        int elements;
        common rec;
        ;

        while( qr && qr.next() && (maxElements == 0 || elements < maxElements) )
        {
            rec = qr.get(tableId);
            con = ConUtil::addFieldValue(con, rec, fieldId);

            elements++;
        }

        return con;
    }

    // добавляет значения поля из буфера, который был заполнен командой select
    // если поле содержит контейнер, то контейнер добавляется как есть, целиком
    //
    public static container addFromSelect(container con, Common selectedRecord, FieldId fieldId, int maxElements = 0)
    {
        int elements;

        while( selectedRecord && (maxElements == 0 || elements < maxElements) )
        {
            con = ConUtil::addFieldValue(con, selectedRecord, fieldId);

            next selectedRecord;
            elements++;
        }

        return con;
    }

    public static boolean contains(container con, anytype value)
    {
        boolean ret = (confind(con, value) != 0);

        return ret;
    }

    // второй аргумент трактуется как коллекция (возможно, из одного значения)
    // возвращает true, если контейнер содержит все значения из collection
    public static boolean containsAll(container con, anytype valueOrCollection)
    {
        Enumerator e = EnumeratorUtil::getEnumerator(valueOrCollection);
        boolean ret = true; // любой контейнер содержит пустую коллекцию

        while( ret && e && e.moveNext() )
        {
            ret = ret && (confind(con, e.current()) != 0);
        }

        return ret;
    }

    // второй аргумент трактуется как коллекция (возможно, из одного значения)
    // возвращает true, если контейнер содержит любое значение из collection
    public static boolean containsAny(container con, anytype valueOrCollection)
    {
        Enumerator e = EnumeratorUtil::getEnumerator(valueOrCollection);
        boolean ret = true; // любой контейнер содержит пустую коллекцию

        while( e && e.moveNext() )
        {
            ret = (confind(con, e.current()) != 0);

            if( ret )
            {
                break;
            }
        }

        return ret;
    }

    public static boolean containsType(container con, Types type, int potentialAncestorId = 0)
    {
        boolean ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( AnytypeUtil::is(conpeek(con,i), type, potentialAncestorId) )
            {
                ret = true;
                break;
            }
        }

        return ret;
    }


    public static FormRun conView(container con, str caption = '', boolean lookup = false)
    {
        return conView(con, caption, lookup);
    }

    public static int count(container con, anytype value)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( conpeek(con,i) == value )
            {
                ret++;
            }
        }

        return ret;
    }

    public static int countAny(container con, anytype valueOrCollection)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( CollectionUtil::in(conpeek(con,i), valueOrCollection) )
            {
                ret++;
            }
        }

        return ret;
    }

    public static int countEmpty(container con)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( !conpeek(con,i) )
            {
                ret++;
            }
        }

        return ret;
    }

    public static int countNotEmpty(container con)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( conpeek(con,i) )
            {
                ret++;
            }
        }

        return ret;
    }

    public static int countType(container con, Types type, int potentialAncestorId = 0)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( AnytypeUtil::is(conpeek(con,i), type, potentialAncestorId) )
            {
                ret++;
            }
        }

        return ret;
    }


    public static container delete(container con, int startFrom, int number = 1)
    {
        container ret = condel(con, startFrom, number);

        return ret;
    }

    // возвращает новый контейнер, в котором присутствуют только уникальные объекты (дубли удалены)
    public static container distinct(container con)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=1; i<=len; i++ )
        {
            if( !confind(ret, conpeek(con, i)) )
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static container drop(container con, int n = 1)
    {
        container ret = ConUtil::slice(con, 2);

        return ret;
    }

    public static container dropEnd(container con, int n = 1)
    {
        container ret = ConUtil::slice(con, 1, -n);

        return ret;
    }

    // Создан для "похожести" с ListUtil, SetUtil, ArrayUtil
    // @see len
    public static int elements(container con)
    {
        int ret = conlen(con);

        return ret;
    }

    public static int find(container con, anytype value, int occurrence = 1)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i = 1; occurrence > 0 && i <= len; i++ )
        {
            if( AnytypeUtil::isEqual(value, conpeek(con, i)) )
            {
                occurrence--;
                if( occurrence <= 0 )
                {
                    ret = i;
                    break;
                }
            }
        }

        return ret;
    }

    public static int findAny(container con, anytype valueOrCollection)
    {
        int ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( CollectionUtil::in(conpeek(con, i), valueOrCollection) )
            {
                ret = i;
                break;
            }
        }

        return ret;
    }

    // возвращает элемент контейнера. скорее всего, это не контейнер.
    // поэтому если вызывающий алгоритм знает, что положено в контейнер, то вызывающий алгоритм может не парится с проверками
    //
    // @see head - синоним
    // @see last
    public static anytype first(container con)
    {
        anytype ret = conpeek(con, 1);

        return ret;
    }

    // возвращает новый контейнер, в котором все элементы расположены на первом уровне, а внутри нет вложенных контейнеров
    public static container flat(container con)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=1; i<=len; i++ )
        {
            if( typeof(conpeek(con, i)) == Types::Container )
            {
                ret += ConUtil::flat(conpeek(con, i));
            }
            else
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static ConEnumerator getEnumerator(container con)
    {
        ConEnumerator ret;

        if( conlen(con) > 0 )
        {
            ret = ConEnumerator::construct(con);
        }

        return ret;
    }

    public static ConEnumerator getEnumeratorAndSkip(container con, int skipIterations)
    {
        ConEnumerator ret = ConUtil::getEnumerator(con);

        if( ret && !EnumeratorUtil::skip(ret, skipIterations) )
        {
            ret = null;
        }

        return ret;
    }

    // возвращает элемент контейнера. скорее всего, это не контейнер.
    // поэтому если вызывающий алгоритм знает, что положено в контейнер, то вызывающий алгоритм может не парится с проверками
    //
    // @see first - синоним
    public static anytype head(container con)
    {
        anytype ret = ConUtil::first(con);

        return ret;
    }

    // метод возвращает true, если value содержится в контейнере
    // по сравнению с find параметры метода идут в обратном порядке - значение, конейнер
    // такой порядок позволяет удобнее записывать выражения в условиях.
    //
    // Например:
    //
    // if( predicat1 ||
    //     ConUtil::in( predicat2, [
    //         Status::s1,
    //         Status::s4,
    //         Status::s7
    //     ])
    //
    public static boolean in(anytype value, container con)
    {
        boolean ret = (confind(con, value) != 0);

        return ret;
    }

    public static container insert(container con, anytype element, int start = 1)
    {
        container ret = conins(con, start, element);

        return ret;
    }

    public static boolean isEmpty(container con)
    {
        boolean ret = true;

        if( con )
        {
            ret = false;
        }

        return ret;
    }

    public static boolean isNotEmpty(container con)
    {
        boolean ret = false;

        if( con )
        {
            ret = true;
        }

        return ret;
    }

    // первый элемент имеет индекс 1
    // работает быстро. создан для "похожести" с ListUtil, SetUtil, ArrayUtil, CollectionUtil
    //
    // однако для conpeek имеет особенность:
    // если индекс <= 0 или >= conlen, то conpeek возвращает [int]0, а не AnytypeUtil::undefined()
    //
    // метод item не переопределяет это поведение ради производительности
    //
    public static anytype item(container con, int idx)
    {
        anytype ret = conpeek(con, idx);

        return ret;
    }

    public static anytype itemAs(container con, int idx, Types type, int potentialAncestorId = 0)
    {
        anytype value = conpeek(con, idx);
        anytype ret = AnytypeUtil::as(value, type, potentialAncestorId);

        return ret;
    }

    public static anytype itemAsValue(container con, int idx, anytype asValue)
    {
        anytype ret = AnytypeUtil::asValue(conpeek(con, idx), asValue);

        return ret;
    }

    // возвращает элемент контейнера. скорее всего, это не контейнер.
    // поэтому если вызывающий алгоритм знает, что положено в контейнер, то вызывающий алгоритм может не парится с проверками
    //
    // @see first
    // @see head
    public static anytype last(container con)
    {
        int lastPos = conlen(con);
        anytype ret = conpeek(con, lastPos);

        return ret;
    }

    // проверяет есть ли вхожение паттерна в какую-нибудь строку внутри контейнера
    // проверку выполняет рекурсивно
    public static boolean match(
        str         pattern,
        container   con)
    {
        int     len     = conlen(con);
        int     i;
        Any     value;

        for( i=1; i<=len; ++i )
        {
            value = Any::conpeek(con, i);

            switch( value.type() )
            {
                case Types::String:
                case Types::RString:
                case Types::VarString:
                    if( match(pattern, value.asString()) )
                        return true;
                    break;

                case Types::Container:
                    if( ConUtil::match(pattern, value.asContainer()) )
                        return true;
                    break;

                case Types::Record:
                    if( RecordUtil::match(pattern, value.asRecord()) )
                        return true;
                    break;

                default:
                    break;
            }
        }

        return false;
    }

    public static anytype maxAll(container con)
    {
        anytype ret = conpeek(con, 1);
        Types type = typeof(ret);
        int len = conlen(con);
        int i;

        for( i=2; i<=len; i++ )
        {
            if( typeof(conpeek(con, i)) == type )
            {
                ret = max(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static anytype maxAs(container con, Types type)
    {
        anytype ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( typeof(conpeek(con,i)) == type )
            {
                if( typeof(ret) == AnytypeUtil::undefined() )
                {
                    ret = conpeek(con, i);
                }
                else
                {
                    ret = max(ret, conpeek(con, i));
                }
            }
        }

        return ret;
    }

    // возвращает максимум элементов, тип которых совпадает с типом второго параметра
    //
    // метод удобно использовать, передавая как второй параметр переменную,
    // в которую будете разместите результат
    //
    // пример использования:
    //     container con = [1, 'test', 2, 3.01];
    //     int maxValue = ConUtil::maxAs(con, maxValue); // метод вернет 2
    //
    public static anytype maxAsValue(container con, anytype valueWithType)
    {
        Types type = typeof(valueWithType);
        anytype ret = ConUtil::maxAs(con, type);

        return ret;
    }

    public static anytype minAll(container con)
    {
        anytype ret = conpeek(con, 1);
        Types type = typeof(ret);
        int len = conlen(con);
        int i;

        for( i=2; i<=len; i++ )
        {
            if( typeof(conpeek(con, i)) == type )
            {
                ret = min(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static anytype minAs(container con, Types type)
    {
        anytype ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( typeof(conpeek(con,i)) == type )
            {
                if( typeof(ret) == Types::AnyType )
                {
                    ret = conpeek(con, i);
                }
                else
                {
                    ret = min(ret, conpeek(con, i));
                }
            }
        }

        return ret;
    }

    // возвращает минимум элементов, тип которых совпадает с типом второго параметра
    //
    // метод удобно использовать, передавая как второй параметр переменную,
    // в которую будете разместите результат
    //
    // пример использования:
    //     container con = [1, 'test', 2, 3.01];
    //     int minValue = ConUtil::minAs(con, minValue); // метод вернет 1
    //
    public static anytype minAsValue(container con, anytype valueWithType)
    {
        Types type = typeof(valueWithType);
        anytype ret = ConUtil::minAs(con, type);

        return ret;
    }

    public static container newFrom(anytype valueOrCollection, int maxElements = 0)
    {
        container ret = ConUtil::addAll(ret, valueOrCollection, maxElements);

        return ret;
    }

    public static container newFromArray(Array arr, int maxElements = 0)
    {
        container ret;
        int i;

        for( i=1; arr && i<=arr.lastIndex() && (maxElements == 0 || i <= maxElements); ++i )
        {
            ret = ConUtil::add(ret, arr.value(i));
        }

        return ret;
    }

    public static container newFromBlob(container blob)
    {
        return ContainerClass::blob2Container(blob);
    }

    public static container newFromBuf(Common buffer)
    {
        // первый элемент - для совместимости с Global:buf2con(), и Global::con2Buf()
        container ret = [buffer.TableId, buffer];
        ;

        return ret;
    }

    public static container newFromList(List list, int maxElements = 0)
    {
        container ret;
        int elements;
        ListEnumerator le = ListUtil::getEnumerator(list);

        while( le && le.moveNext() && (maxElements == 0 || elements < maxElements) )
        {
            ret = ConUtil::add(ret, le.current());

            elements++;
        }

        return ret;
    }

    public static container newFromMap(Map map, int maxElements = 0)
    {
        container ret;
        int elements;
        MapEnumerator me = MapUtil::getEnumerator(map);

        while( me && me.moveNext() && (maxElements == 0 || elements < maxElements) )
        {
            ret += [[me.currentKey(), me.currentValue()]];

            elements++;
        }

        return ret;
    }

    // создает множество значений поля из буфера, который был заполнен командой select
    public static container newFromQuery(Query q, TableId tableId, FieldId fieldId, int maxElements = 0)
    {
        container ret = ConUtil::addFromQuery(connull(), q, tableId, fieldId, maxElements);

        return ret;
    }

    // создает множество значений поля из буфера, который был заполнен командой select
    public static container newFromQueryRun(QueryRun qr, TableId tableId, FieldId fieldId, int maxElements = 0)
    {
        container ret = ConUtil::addFromQueryRun(connull(), qr, tableId, fieldId, maxElements);

        return ret;
    }

    // создает контейнер значений поля из буфера, который был заполнен командой select
    public static container newFromSelect(Common selectedRecord, FieldId fieldId, int maxElements = 0)
    {
        container ret = ConUtil::addFromSelect(connull(), selectedRecord, fieldId, maxElements);

        return ret;
    }

    public static container newFromSet(Set set, int maxElements = 0)
    {
        container ret;
        int elements;
        SetEnumerator se = SetUtil::getEnumerator(set);

        while( se && se.moveNext() && (maxElements == 0 || elements < maxElements) )
        {
            ret = ConUtil::add(ret, se.current());

            elements++;
        }

        return ret;
    }

    public static container newFromStr(str s, str sep = ',', int maxSubstrings = 0)
    {
        Enumerator e = StrSplitEnumerator::construct(s, sep, maxSubstrings);
        container ret;

        while( e && e.moveNext() )
        {
            ret = ConUtil::add(ret, e.current());
        }

        return ret;
    }

    public static container newFromXml(XmlNode node)
    {
        return Global::containerFromXMLNode(node);
    }

    // метод возвращает true, если value не содержится в контейнере
    // по сравнению с find параметры метода идут в обратном порядке - значение, конейнер
    // такой порядок позволяет удобнее записывать выражения в условиях.
    //
    // Например:
    //
    // if( predicat1 ||
    //     ConUtil::CopyOfin( predicat2, [
    //         Status::s1,
    //         Status::s4,
    //         Status::s7
    //     ])
    //
    public static boolean notIn(anytype value, container con)
    {
        boolean ret = (confind(con, value) == 0);

        return ret;
    }

    public static container poke(container con, int start, anytype value)
    {
        container ret = conpoke(con, start, value);

        return ret;
    }

    // удаляет значение из контейнера
    //
    // @param occurrence указывает какое вхождение значения нужно удалить
    //
    // @see removeAll
    public static container remove(container con, anytype value, int occurrence = 1)
    {
        int i = ConUtil::find(con, value, occurrence);

        if( i )
        {
            con = condel(con, i, 1);
        }

        return con;
    }

    // удаляет все значения из контейнера
    public static container removeAll(container con, anytype valueOrCollection)
    {
        Enumerator e = EnumeratorUtil::getEnumerator(valueOrCollection);
        int i;

        while( e && e.moveNext() )
        {
            do
            {
                i = confind(con, e.current());

                if( i )
                {
                    con = condel(con, i, 1);
                }
            }
            while( i );
        }

        return con;
    }

    // возвращает новый контейнер, в котором удалены все пустые элементы
    public static container removeEmpty(container con)
    {
        int len = conlen(con);
        int i;
        container ret;

        for( i=1; i<=len; i++ )
        {
            if( conpeek(con, i) )
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static container removeType(container con, Types type, int potentialAncestorId = 0)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( !AnytypeUtil::is(conpeek(con,i), type, potentialAncestorId) )
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    // возвращает новый контейнер, в котором остались элементы, которые содержатся в коллекции 2
    public static container retainAll(container con, anytype valueOrCollection)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( CollectionUtil::in(conpeek(con, i), valueOrCollection) )
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    // возвращает новый контейнер, в котором остались элементы указанного типа
    public static container retainType(container con, Types type, int potentialAncestorId = 0)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=1 ; i<=len ; i++ )
        {
            if( AnytypeUtil::is(conpeek(con, i), type, potentialAncestorId) )
            {
                ret = ConUtil::add(ret, conpeek(con, i));
            }
        }

        return ret;
    }

    public static container reverse(container con)
    {
        container ret;
        int len = conlen(con);
        int i;

        for( i=len ; i > 0 ; i-- )
        {
            ret = ConUtil::add(ret, conpeek(con, i));
        }

        return ret;
    }

    public static container slice(container con, int fromPos = 1, int toPos = -1, int step = 1)
    {
        container ret;

        int len     = conlen(con);

        int fromIdx = fromPos + (fromPos < 0 ? len + 1 : 0);
        int toIdx   = toPos   + (toPos < 0 ? len + 1 : 0);

        int i       = max(1, fromIdx);
        int end     = min(len, toIdx);
        ;

        if( i <= 1 && end >= len && step == 1 )
        {
            ret = con;
        }
        else if( step > 0 )
        {
            while( i <= end )
            {
                ret += conpeek(con, i);
                i += step;
            }
        }

        return ret;
    }

    public static anytype sumAll(container con)
    {
        anytype ret = conpeek(con, 1);
        int len = conlen(con);
        int i;

        for( i=2 ; i<=len ; i++ )
        {
            ret += conpeek(con, i);
        }

        return ret;
    }

    public static anytype sumAs(container con, Types type)
    {
        anytype ret;
        ConEnumerator ce = ConEnumerator::construct(con);

        while( ce && ce.moveNext() )
        {
            if( typeof(ce.current()) == type )
            {
                ret += ce.current();
            }
        }

        return ret;
    }

    public static str sumAsStr(container con)
    {
        str ret;
        ConEnumerator ce = ConEnumerator::construct(con);

        while( ce && ce.moveNext() )
        {
            if( AnytypeUtil::isString(ce.current()) )
            {
                ret += ce.current();
            }
        }

        return ret;
    }

    public static anytype sumAsValue(container con, anytype valueWithType)
    {
        Types type = typeof(valueWithType);
        anytype ret = ConUtil::sumAs(con, type);

        return ret;
    }

    public static container tail(container con)
    {
        container ret = ConUtil::slice(con, 2);

        return ret;
    }

    public static container take(container con, int n, int startFrom = 1)
    {
        container ret = ConUtil::slice(con, startFrom, startFrom + n - 1);

        return ret;
    }

    public static container takeEnd(container con, int n = 1)
    {
        container ret = ConUtil::slice(con, -n);

        return ret;
    }

    public static Array toArray(container con)
    {
        Array ret = ArrayUtil::newFromContainer(con);

        return ret;
    }

    public static container toBlob(container con)
    {
        ContainerClass containerClass = new ContainerClass(con);

        return containerClass.toBlob();
    }

    // первый элемент - для совместимости с Global:buf2con(), и Global::con2Buf()
    // возможны проблемы, если после создания container таблица изменена в AOT.
    // метод работает очень быстро.
    public static Common toBuf(container con)
    {
        TableId tableId = ConUtil::itemAs(con, 1, Types::Integer);
        Common ret;

        if( tableId )
        {
            ret = ConUtil::itemAs(con, 2, Types::Record, tableId);
        }

        return ret;
    }

    public static List toList(container con, List list = null)
    {
        List ret = ListUtil::addAll(list, con);

        return ret;
    }

    public static Set toSet(container con, Set set = null)
    {
        Set ret = SetUtil::addAll(set, con);

        return ret;
    }

    public static str toStr(container con, str sep = ',')
    {
        str ret = TextBufferUtil::appendContainer(null, con, sep).getText();

        return ret;
    }

    public static str toXmlString(container con, int indent = 0)
    {
        return Global::XMLString(con, types::Container, indent);
    }

    // возвращает
    //   Types::void - если контейнер пуст
    //   Types::AnyType - если в контейнере содержатся элементы разного типа
    //   Types::* - если все элементы одного типа
    public static Types typeofAll(container con)
    {
        Types type = Types::void;
        ConEnumerator ce = ConEnumerator::construct(con);

        if( ce && ce.moveNext() )
        {
            type = typeof(ce.current());
        }

        while( ce && ce.moveNext() )
        {
            if( type != typeof(ce.current()) )
            {
                return Types::AnyType;
            }
        }

        return type;
    }

    public static container zip(container con1, container con2, int maxElements = 0)
    {
        container   ret;
        int         minLen = min(conlen(con1), conlen(con2));
        int         idx;

        if( maxElements )
        {
            minLen = min(minLen, maxElements);
        }

        for (idx = 1; idx <= minlen; idx++)
        {
            ret += conpeek(con1, idx) + conpeek(con2, idx);
        }

        return ret;
    }
}