//
// https://github.com/mazzy-ax/SysUtil
//
// Util-класс реализует только статические методы.
// не содержит внутри никаких значений.
// не имеет смысла создавать экземпляр этого класса.
//
abstract class SessionUtil
{

    public static server SysClientSessions clientSessionTable(int _sessionId = 0)
    {
        int sessId = _sessionId ? _sessionId : sessionid();

        SysClientSessions clientSessions;
        ;

        new SkipAOSValidationPermission().assert();

        //BP deviation documented
        clientSessions.skipAosValidation(true);

        select clientSessions
        where clientSessions.SessionId == sessId;

        return clientSessions;
    }

    public static ClientType clientType(int _sessionId = 0)
    {
        return SessionUtil::session().clientKind();

    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает true если:
    // пользователь наделен правами локального администратора
    // и текущая сессия была запущена runAsAdministrator
    //
    public static boolean isInRoleAdmin()
    {
        #define.CacheOwner('SessionFlags')
        #define.CacheKey('isInRoleAdmin')

        boolean ret;
        anytype cached = classfactory.globalCache().get(#CacheOwner, #CacheKey, '');

        if( typeof(cached) == Types::Integer )
        {
            ret = cached;
        }
        else
        {
            ret = SessionUtil::isInRoleAdmin_Slow();

            classfactory.globalCache().set(#CacheOwner, #CacheKey, ret);
        }

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает true если:
    // пользователь наделен правами локального администратора
    // и текущая сессия была запущена runAsAdministrator
    //
    // используйте метод isInRoleAdmin(), в котором выполняется кэширование
    //
    public static boolean isInRoleAdmin_Slow()
    {
        anytype perm = new InteropPermission(InteropKind::ClrInterop).assert();

        System.Security.Principal.WindowsIdentity    id = System.Security.Principal.WindowsIdentity::GetCurrent();
        System.Security.Principal.WindowsPrincipal   principal = new System.Security.Principal.WindowsPrincipal(id);
        System.Security.Principal.WindowsBuiltInRole admin = System.Security.Principal.WindowsBuiltInRole::Administrator;

        boolean ret = principal.IsInRole(admin);
        ;

        return ret;
    }

    public static server SysServerSessions serverSessionTable(int _sessionId = 0)
    {
        int sessId = _sessionId ? _sessionId : sessionid();

        SysClientSessions clientSessions;
        SysServerSessions serverSessions;
        ;

        new SkipAOSValidationPermission().assert();

        //BP deviation documented
        clientSessions.skipAosValidation(true);
        //BP deviation documented
        serverSessions.skipAosValidation(true);

        select serverSessions
        exists join clientSessions
        where clientSessions.ServerId == serverSessions.ServerId
           && clientSessions.SessionId == sessId;

        return serverSessions;
    }

    public static Session session(int _sessionId = 0, boolean _checkSession = false)
    {
        int sessId = _sessionId ? _sessionId : sessionid();

        Session ret = new Session(sessId, _checkSession);

        return ret;
    }
}