
    // добавить каждое значение контейнера как отдельный range
    // полезно для большого количества значений, когда все они не помещаются в одну строку
    //
    // чтобы заменить все критерии по полю, используйте qbds.clearRange(fieldId) перед вызовом этого метода
    static QueryBuildDataSource addRangesFromCon(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        container               con,
        RangeStatus             rangeStatus         = RangeStatus::Open,
        int                     oneRangeChunkSize   = 7)
    {
        ConEnumerator   ce;
        container       chunk;
        ;

        if( qbds && fieldId && con )
        {
            ce = ConEnumerator::construct(con);
            while (ce && ce.moveNext())
            {
                if( !SysQuery::isQueryValue(ce.current()) )
                    continue;

                chunk += ce.current();
                if( conlen(chunk) < oneRangeChunkSize )
                    continue;

                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
                chunk = connull();
            }

            if( chunk )
            {
                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
            }
        }

        return qbds;
    }

    // добавить каждое значение энумератора как отдельный range
    // полезно для большого количества значений, когда все они не помещаются в одну строку
    //
    // чтобы заменить все критерии по полю, используйте qbds.clearRange(fieldId) перед вызовом этого метода

    // TODO подумать как разбить энумератор произвольного типа на чанки

    static QueryBuildDataSource addRangesFromEnumerator(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        Enumerator              e,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        ;

        if( qbds && fieldId )
        {
            while (e && e.moveNext())
            {
                SysQuery::addRangeValue(qbds, fieldId, e.current(), rangeStatus);
            }
        }

        return qbds;
    }

    // Can't be an instance method because new queryRun() until takes a query!
    static QueryBuildDataSource addRangesFromKeyData(
        QueryBuildDataSource    qbds,
        KeyData                 keyData     // Must be a unique list of values!
        )
    {
        Map                     keyDataMap;
        MapEnumerator           me;

        // A local a method is used because the a variable can change type for each while loop
        anytype a()
        {
            anytype a;
            [a] = me.currentValue();
            return a;
        }
        //Only do Map::create() when container has at least 4 parameters. version,domain type,
        //range type and size
        if (conlen(keyData) >= 4)
        {
            keyDataMap = Map::create(keyData);

            me = keyDataMap.getEnumerator();
            while (me.moveNext())
            {
                qbds.addRange(me.currentKey()).value(queryValue(a()));
            }
        }

        return qbds;
    }

    // добавить каждое значение списка как отдельный range
    // полезно для большого количества значений, когда все они не помещаются в одну строку
    //
    // чтобы заменить все критерии по полю, используйте qbds.clearRange(fieldId) перед вызовом этого метода
    static QueryBuildDataSource addRangesFromList(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        List                    list,
        RangeStatus             rangeStatus         = RangeStatus::Open,
        int                     oneRangeChunkSize   = 7)
    {
        ListEnumerator le;
        List chunk;
        ;

        if( qbds && fieldId && list )
        {
            le = list.getEnumerator();
            while (le && le.moveNext())
            {
                if( !SysQuery::isQueryValue(le.current()) )
                    continue;

                chunk = ListUtil::add(chunk, le.current());
                if( chunk.elements() < oneRangeChunkSize )
                    continue;

                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
                chunk = null;
            }

            if( chunk )
            {
                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
            }
        }

        return qbds;
    }

    // копирует критерии из датасорса.
    // не удаляет и не изменяет уже установленные критерии
    //
    // чтобы заменить существующие и добавить новые, используйте mergeRangesFromQbds
    public static QueryBuildDataSource addRangesFromQbds(QueryBuildDataSource dest, QueryBuildDataSource source)
    {
        return SysQuery::mergeRangeValuesFromQbds_Impl(dest, source, true);
    }

    // добавить каждое значение множества как отдельный range
    // полезно для большого количества значений, когда все они не помещаются в одну строку
    //
    // чтобы заменить все критерии по полю, используйте qbds.clearRange(fieldId) перед вызовом этого метода
    static QueryBuildDataSource addRangesFromSet(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        Set                     set,
        RangeStatus             rangeStatus         = RangeStatus::Open,
        int                     oneRangeChunkSize   = 7)
    {
        SetEnumerator   se;
        List chunk;
        ;

        if( qbds && fieldId && set )
        {
            se = set.getEnumerator();
            while (se && se.moveNext())
            {
                if( !SysQuery::isQueryValue(se.current()) )
                    continue;

                chunk = ListUtil::add(chunk, se.current());
                if( chunk.elements() < oneRangeChunkSize )
                    continue;

                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
                chunk = null;
            }

            if( chunk )
            {
                SysQuery::addRangeValue(qbds, fieldId, chunk, rangeStatus);
            }
        }

        return qbds;
    }

    // добавляет критерий с value (включая коллекции), выполняет экранирование
    static QueryBuildRange addRangeValue(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        anytype                 value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        str                 valueStr;
        ;

        if( qbds && fieldId && SysQuery::isQueryValue(value) )
        {
            qbr = qbds.addRange(fieldId);
            if( qbr )
            {
                valueStr = SysQuery::value(value);
                qbr.value(valueStr);
                qbr.status(rangeStatus);
            }
        }

        return qbr;
    }

    // добавляет критерий с valueNot (включая коллекции), выполняет экранирование
    static QueryBuildRange addRangeValueNot(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        anytype                 value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        str                 valueStr;
        ;

        if( qbds && fieldId && SysQuery::isQueryValue(value) )
        {
            qbr = qbds.addRange(fieldId);
            if( qbr )
            {
                valueStr = SysQuery::valueNot(value);
                qbr.value(valueStr);
                qbr.status(rangeStatus);
            }
        }

        return qbr;
    }

    // добавляет критерий с value (включая коллекции), НЕ выполняет экранирование
    static QueryBuildRange addRangeValueRaw(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        str                     value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        ;

        if( qbds && fieldId && SysQuery::isQueryValue(value) )
        {
            qbr = qbds.addRange(fieldId);
            if( qbr )
            {
                qbr.value(value);
                qbr.status(rangeStatus);
            }
        }

        return qbr;
    }

    // удаляет все range по одному полю или все в qbds
    public static void clearAllRanges(QueryBuildDataSource qbds, FieldId fieldId = 0)
    {
        QueryBuildRange    qbr;

        if( qbds )
        {
            if( fieldId )
            {
                do
                {
                    qbds.clearRange(fieldId);
                }
                while(qbds.findRange(fieldId));
            }
            else
            {
                qbds.clearRanges();
            }
        }
    }

    //mazzy 05.02.2020
    public static QueryGroupByField findGroupByField(
        Query                   _query,
        QueryBuildDataSource    _qbds,
        fieldId                 _fieldId)
    {
        int                 groupFields;
        int                 i;
        QueryGroupByField   queryGroupByField;
    ;

        if (_query && _qbds)
        {
            groupFields = _query.groupByFieldCount();
            for (i=1; i <= groupFields; ++i)
            {
                queryGroupByField = _query.groupByField(i);

                if (queryGroupByField
                    && queryGroupByField.fieldID() == _fieldId
                    && queryGroupByField.dataSource().table() == _qbds.table())
                {
                    break;
                }
            }
        }

        return queryGroupByField;
    }

    //mazzy 05.02.2020
    public static QueryGroupByField findOrCreateGroupByField(Query _query, QueryBuildDataSource _queryBuildDataSource, fieldId _fieldId)
    {
        QueryGroupByField    queryGroupByField;

        if (_query && _queryBuildDataSource)
        {
            queryGroupByField = SysQuery::findGroupByField(_query, _queryBuildDataSource, _fieldId);

            if (!queryGroupByField)
            {
                queryGroupByField = _queryBuildDataSource.addGroupByField(_fieldId);
            }
        }

        return queryGroupByField;
    }

    public static QueryBuildRange findOrCreateRange(QueryBuildDataSource _queryBuildDataSource, fieldId _fieldId)
    {
        QueryBuildRange queryBuildRange;

        if (_queryBuildDataSource)
        {
            queryBuildRange = _queryBuildDataSource.findRange(_fieldId);

            if (!queryBuildRange && _fieldId)
            {
                queryBuildRange = _queryBuildDataSource.addRange(_fieldId);
            }
        }
        return queryBuildRange;
    }

    // mazzy 03.12.2019
    // сразу устанавливает value (включая контейнер), выполняет экранирование
    // пустое значение не изменяет критерий! чтобы очистить, используйте .findOrCreateRange(...).Value(SysQuery::valueUnlimited())
    public static QueryBuildRange findOrCreateRangeValue(
        QueryBuildDataSource    _queryBuildDataSource,
        fieldId                 _fieldId,
        Anytype                 _value)
    {
        QueryBuildRange     queryBuildRange     = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);
        str                 strValue;
        ;

        if (queryBuildRange && SysQuery::isQueryValue(_value))
        {
            strValue = SysQuery::value(_value);

            // 08.08.2021 попробуем посмотреть как много фильтров превышает диапазон.
            // сообщите smazurkin@mercury.ru, если у вас появилось это сообщение
            ExtendedTypeUtil::isLengthEnoughOrWarning(extendedTypeNum(Range), strlen(strValue));

            queryBuildRange.value(strValue);
        }

        return queryBuildRange;
    }

    // mazzy 03.12.2019
    // сразу устанавливает value (включая контейнер), выполняет экранирование
    // пустое значение не изменяет критерий! чтобы очистить, используйте .findOrCreateRange(...).Value(SysQuery::valueUnlimited())
    public static QueryBuildRange findOrCreateRangeValueNot(
        QueryBuildDataSource    _queryBuildDataSource,
        fieldId                 _fieldId,
        Anytype                 _value)
    {
        QueryBuildRange     queryBuildRange     = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);
        str                 strValue;
        ;

        if (queryBuildRange && SysQuery::isQueryValue(_value))
        {
            strValue = SysQuery::valueNot(_value);

            // 08.08.2021 попробуем посмотреть как много фильтров превышает диапазон.
            // сообщите smazurkin@mercury.ru, если у вас появилось это сообщение
            ExtendedTypeUtil::isLengthEnoughOrWarning(extendedTypeNum(Range), strlen(strValue));

            queryBuildRange.value(strValue);
        }

        return queryBuildRange;
    }

    // mazzy 03.12.2019
    // сразу устанавливает value (включая контейнер), НЕ выполняет экранирование
    // любое значение изменяет критерий!
    public static QueryBuildRange findOrCreateRangeValueRaw(
        QueryBuildDataSource    _queryBuildDataSource,
        fieldId                 _fieldId,
        str                     _strValue)
    {
        QueryBuildRange     queryBuildRange     = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);
        ;

        if (queryBuildRange)
        {
            // 08.08.2021 попробуем посмотреть как много фильтров превышает диапазон.
            // сообщите smazurkin@mercury.ru, если у вас появилось это сообщение
            ExtendedTypeUtil::isLengthEnoughOrWarning(extendedTypeNum(Range), strlen(_strValue));

            queryBuildRange.value(_strValue);
        }

        return queryBuildRange;
    }

    public static void firstOnlyN(QueryRun qr, int n, int startFrom = 1)
    {
        if( qr && n )
        {
            qr.enablePositionPaging(true);
            qr.addPageRange(startFrom, n);
        }
    }

    // возвращает true, если значение (кроме пустой строки) будет преобразовано в непустое queryValue
    // возвращает false, если значение является null или содержит другие значения, которые не будут обработаны методом SysQuery::value()
    public static boolean isQueryValue(anytype value)
    {
        boolean ret = false;
        Types type = typeof(value);

        switch (type)
        {
            case Types::String:
            case Types::RString:
            case Types::VarString:
            case Types::Enum:
            case Types::Integer:
            case Types::Int64:
            case Types::Real:
            case Types::Date:
            case Types::UtcDateTime:
            case Types::Time:
            case Types::Guid:
                ret = true;
                break;

            case Types::Container:
                if( value )
                {
                    ret = true;
                }
                break;

            case Types::Class:
                ret = ObjectUtil::isEnumerable(value);
                break;
        }

        return ret;
    }

    // реализация: заменяет и добавляет значения критериев из датасорса.
    // не копирует link и dynalink

    // используйте addRangesFromQbds или mergeRangesFromQbds
    public static QueryBuildDataSource mergeRangeValuesFromQbds(
        QueryBuildDataSource    dest,
        QueryBuildDataSource    source)
    {
        return SysQuery::mergeRangeValuesFromQbds_Impl(dest, source, false);
    }

    // реализация: заменяет и добавляет значения критериев из датасорса.
    // не копирует link и dynalink

    // используйте addRangesFromQbds или mergeRangesFromQbds
    protected static QueryBuildDataSource mergeRangeValuesFromQbds_Impl(
        QueryBuildDataSource    dest,
        QueryBuildDataSource    source,
        boolean                 addSameFieldRange   = false)
    {
        QueryBuildRange     sourceRange;
        QueryBuildRange     destRange;
        int                 i;
        ;

        if (source && dest && source.table() == dest.table())
        {
            for (i = 1; i <= source.rangeCount(); i++)
            {
                sourceRange = source.range(i);
                if (sourceRange && sourceRange.value())
                {
                    if (!addSameFieldRange)
                    {
                        dest.clearRange(sourceRange.field());
                    }
                    destRange = dest.addRange(sourceRange.field());
                    if (destRange)
                    {
                        destRange.value(sourceRange.value());
                        destRange.enabled(sourceRange.enabled());
                        destRange.status(sourceRange.status());
                    }
                }
            }
        }

        return dest;
    }

    public static Query query(
        TableId     _tableId,
        FieldId     _fieldId    = 0,
        Anytype     _value      = null)
    {
        Query                   q       = new Query();
        QueryBuildDataSource    qbds    = q.addDataSource(_tableId);
        ;

        if (_fieldId && qbds && !prmisdefault(_value))
        {
            SysQuery::findOrCreateRangeValue(qbds, _fieldId, _value);
        }

        return q;
    }

    public static QueryRun queryRun(
        TableId     _tableId,
        FieldId     _fieldId    = 0,
        Anytype     _value      = null)
    {
        Query       q   = SysQuery::query(_tableId, _fieldId, _value);
        QueryRun    qr  = new QueryRun(q);

        return qr;
    }

    // заменяет критерий с value (включая коллекции), выполняет экранирование
    //
    // в отличие от findOrCreate сперва удаляет все критерии перед установкой нового значения.
    // если в качестве value передать null, то просто удалит критерии, не создавая новых
    static QueryBuildRange setRangeValue(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        anytype                 value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        ;

        if( qbds && fieldId )
        {
            SysQuery::clearAllRanges(qbds, fieldId);

            qbr = SysQuery::addRangeValue(qbds, fieldId, value, rangeStatus);
        }

        return qbr;
    }

    // заменяет критерий с valueNot (включая коллекции), выполняет экранирование
    //
    // в отличие от findOrCreate сперва удаляет все критерии перед установкой нового значения.
    // если в качестве value передать null, то просто удалит критерии, не создавая новых
    static QueryBuildRange setRangeValueNot(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        anytype                 value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        ;

        if( qbds && fieldId )
        {
            SysQuery::clearAllRanges(qbds, fieldId);

            qbr = SysQuery::addRangeValueNot(qbds, fieldId, value, rangeStatus);
        }

        return qbr;
    }

    // заменяет критерий с value (включая коллекции), НЕ выполняет экранирование
    //
    // в отличие от findOrCreate сперва удаляет все критерии перед установкой нового значения.
    // если в качестве value передать null, то просто удалит критерии, не создавая новых
    static QueryBuildRange setRangeValueRaw(
        QueryBuildDataSource    qbds,
        FieldId                 fieldId,
        str                     value,
        RangeStatus             rangeStatus     = RangeStatus::Open)
    {
        QueryBuildRange     qbr;
        ;

        if( qbds && fieldId )
        {
            SysQuery::clearAllRanges(qbds, fieldId);

            qbr = SysQuery::addRangeValueRaw(qbds, fieldId, value, rangeStatus);
        }

        return qbr;
    }

    public static str value(anytype a)
    {
        str quotableStr = ' *",.()\\';
        str s;
        int t;

        TextBuffer text;
        Enumerator e;

        str doEscape(str s1)
        {
            int i = 1;
            int pos;
            int len = strlen(s1);
            str result;
            pos = strfind(s1, quotableStr, i, len - i + 1);
            while (pos)
            {
                result += substr(s1, i, pos - i) + '\\' + substr(s1, pos, 1);
                i = pos + 1;
                if (i<=len)
                    pos = strfind(s1, quotableStr, i, len - i + 1);
                else
                    pos = 0;
            }

            if (i == 1)
                return s1;

            if (i<=len)
                result += substr(s1, i, len - i + 1);

            return result;
        }

        t = typeof(a);
        switch (t)
        {
            case Types::Enum:
                return enum2Value(a);
            case Types::Real:
                return num2str(a,0,16,1,0);
            case Types::Date:
            case Types::UtcDateTime:
                return strfmt('\"%1\"',a);  // must be double quotes
            case
                Types::String,
                Types::RString,
                Types::VarString:
            {
                s = a;
                if (!s)
                    return SysQuery::valueEmptyString();
                return strfmt('%1',doEscape(s));  // must be double quotes
            }

            //mazzy 03.12.2019 -->
            case Types::Container:
            case Types::Class:
                e = CollectionUtil::getEnumerator(a);

                while( e && e.moveNext() )
                {
                    text = TextBufferUtil::appendCollectionItem(text, SysQuery::value(e.current()), ',');
                }

                s = TextBufferUtil::getText(text);

                return s;
           //mazzy 03.12.2019 <--
        }
        // <GEEU>

        // to avoid stack trace on unsupported value 'null'
        if (! new DictEnum(enumnum(Types)).value2Symbol(t))
            return SysQuery::valueUnlimited();

        // </GEEU>
        return strfmt('%1',a);
    }

    public static str valueNot(anytype a)
    {
        str         ret;
        Enumerator  e       = EnumeratorUtil::getEnumerator(a);
        TextBuffer  text;
        ;

        while( e && e.moveNext() )
        {
            text = TextBufferUtil::appendIfNotEmpty(text, ',');
            text = TextBufferUtil::appendStr(text, '!');
            text = TextBufferUtil::appendStr(text, SysQuery::value(e.current()));
        }

        ret = TextBufferUtil::getText(text);

        return ret;
    }
