//
// https://github.com/mazzy-ax/SysUtil
//
// Класс обслуживает объекты типа Args
//
// Util-класс реализует только статические методы.
// не содержит внутри никаких значений.
// не имеет смысла создавать экземпляр этого класса.
//
abstract class ArgsUtil
{

    public static void assertCallerFormName(Args args, FormName formName, str _funcname = '')
    {
        if( ArgsUtil::callerFormName(args) == formName)
        {
            return;
        }

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    public static void assertCallerType(Args args, classId potentialAncestorClassId, str _funcname = '')
    {
        if( ArgsUtil::checkCallerType(args, potentialAncestorClassId) )
        {
            return;
        }

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    public static void assertEnum(Args args, Anytype enum, str _funcname = '')
    {
        if ( ArgsUtil::checkEnum(args, enum) )
        {
            return;
        }

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    public static void assertEnumType(Args args, EnumId enumId, str _funcname = '')
    {
        if( ArgsUtil::checkEnumType(args, enumId) )
        {
            return;
        }

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    public static void assertFormDatasource(Args args, str _funcname = '')
    {
        if (args && args.dataset() && args.record().isFormDataSource())
        {
            return;
        }

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    public static void assertParm(Args args, str matchPattern = '.', str _funcname = '')
    {
        if ( ArgsUtil::checkParm(args, matchPattern) )
        {
            return;
        }

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    public static void assertRecord(Args args, TableId tableId = 0, str _funcname = '')
    {
        if ( ArgsUtil::checkRecord(args, tableId) )
        {
            return;
        }

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    public static void assertRecordExists(Args args, TableId tableId = 0, str _funcname = '')
    {
        if ( ArgsUtil::checkRecordExists(args, tableId) )
        {
            return;
        }

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    public static void assertRecordTableIds(Args args, container tableIds, str _funcname = '')
    {
        if ( ArgsUtil::checkRecordTableIds(args, tableIds) )
        {
            return;
        }

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    public static Object caller(Args args, classId potentialAncestorClassId)
    {
        Object ret;

        if( args )
        {
            ret = SysDictClass::as(args.caller(), potentialAncestorClassId);
        }

        return ret;
    }

    public static str callerFormName(Args args)
    {
        FormRun formRun = ArgsUtil::caller(args, classnum(FormRun));
        str formName;

        if( formRun )
        {
            formName = formRun.form().name();
        }

        return formName;
    }

    public static boolean checkCallerType(Args args, classId potentialAncestorClassId)
    {
        boolean checkOk = args && SysDictClass::is(args.caller(), potentialAncestorClassId);

        return checkOk;
    }

    public static boolean checkEnum(Args args, Anytype enum)
    {
        boolean checkOk;

        if( args && typeof(enum) == types::Enum )
        {
            checkOk = (enum == args.parmEnum());
        }

        return checkOk;
    }


    public static boolean checkEnumType(Args args, EnumId enumId)
    {
        boolean checkOk = (args && args.parmEnumType() == enumId);

        return checkOk;
    }

    // параметр parm содержит паттерн.
    // возвращает true, если parm-строка соответствует regexp-выражению в matchPattern (метод использует функцию match для проверки)
    // если не указать matchPattern, то возвращает true, если parm не пустой (содержит хотя бы один символ)
    // возвращает true, если matchPattern является пустой строкой
    public static boolean checkParm(Args args, str matchPattern = '.')
    {
        boolean checkOk = (args && match(matchPattern, args.parm()));

        return checkOk;
    }


    // запись из указанной таблицы (или любой таблицы для tableId = 0)
    public static boolean checkRecord(Args args, TableId tableId = 0)
    {
        boolean ret = false;
        int dataset;

        if( args )
        {
            dataset = args.dataset();

            if( dataset )
            {
                ret = (dataset == tableId || TableIdUtil::isNotSpecified(tableId));
            }
        }

        return ret;
    }

    // запись существует (recId != 0) и запись из указанной таблицы (или любой таблицы для tableId = 0)
    public static boolean checkRecordExists(Args args, TableId tableId = 0)
    {
        boolean checkOk = (ArgsUtil::checkRecord(args, tableId) && args.record() && args.record().RecId != 0);

        return checkOk;
    }

    // возвращает true, если:
    // * коллекция содержит tableId, совпадающий с tableId таблицы
    // * коллекция содержит 0 или CommonTableId
    // * коллекция пустая и записи в args не переданы
    // возвращает false в остальных случаях

    // коллекция - это одно значение, container, Set, List, Array
    public static boolean checkRecordTableIds(Args args, anytype tableIdCollection)
    {
        TableId dataset = ArgsUtil::dataset(args);
        Enumerator e;

        if( dataset == 0 && CollectionUtil::empty(tableIdCollection) )
        {
            return true;
        }

        e = AnytypeUtil::getEnumerator(tableIdCollection);

        while( dataset && e && e.moveNext() )
        {
            if( confind([dataset, 0], e.current()) )
            {
                return true;
            }
        }

        return false;
    }

    public static Args copyArgs(Args fromArgs, Args toArgs = null)
    {
        if (fromArgs)
        {
            if (!toArgs)
            {
                toArgs = new Args();
            }

            SysArgs::copyArgs(fromArgs, toArgs);
        }

        return toArgs;
    }


    public static TableId dataset(Args args)
    {
        TableId dataset = 0;

        if( args )
        {
            dataset = args.dataset();
        }

        return dataset;
    }

    // убедиться что в аргументах enum указанного типа и
    // вернуть значение этого enum из аргументов
    // бросает исключение, если enum не указанного типа
    public static int enum(Args args, EnumId enumId, str _funcname = '')
    {;
        ArgsUtil::assertEnumType(args, enumId, _funcname);

        return args.parmEnum();
    }

    // тоже самое, что и ArgsUtil::getEnum()
    // но если в аргументах не нужный enum не выдает ошибку, а возвращает дефолтное значение.
    public static int enumOrDefault(Args args, anytype defaultEnumValue)
    {
        if( typeof(defaultEnumValue) == Types::Enum )
        {
            if( ArgsUtil::checkEnumType(args, AnytypeUtil::enumId(defaultEnumValue)) )
            {
                return args.parmEnum();
            }

            return defaultEnumValue;
        }

        throw error::wrongUseOfFunction(funcname());
    }

    public static container markedList(Args args, TableId tableId = 0, str _funcname = '')
    {
        List            ret = new List(Types::Int64);
        FormDataSource  fds;
        common          record;

        if( ArgsUtil::checkRecord(args, tableId) )
        {
            fds = args.record().dataSource();
            if( fds && fds.anyMarked() )
            {
                // marked records
                for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
                {
                    ret.addEnd(record.RecId);
                }
            }

            if( ret.elements() == 0 )
            {
                // or a record itself
                record = ArgsUtil::record(args, tableId, _funcname);
                ret.addEnd(record.RecId);
            }
        }

        return ret.pack();
    }

    public static container markedRecIds(Args args, TableId tableId = 0, str _funcname = '')
    {
        container       ret;
        FormDataSource  fds;
        common          record;

        if( ArgsUtil::checkRecord(args, tableId) )
        {
            fds = args.record().dataSource();
            if( fds && fds.anyMarked() )
            {
                // marked records
                for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
                {
                    ret += record.RecId;
                }
            }

            if( !ret )
            {
                // or a record itself
                record = ArgsUtil::record(args, tableId, _funcname);
                ret = [record.RecId];
            }
        }

        return ret;
    }

    // возвращает set со значениями в указанном поле в промаркированных на форме записях
    // если args не содержит записей или содержит записи "не того" типа, то null
    // если на форме нет промарктированных записей, то вернет set из одной записи (из args.record)
    // если опустить параметр _field, то возвратит значения recId
    public static Set markedSet(Args args, DictField _field = null)
    {
        Set             ret;
        DictField       field  = DictFieldUtil::nonNull(_field);
        Common          record = ArgsUtil::recordAs(args, field.tableid());
        FormDataSource  fds;
        Common          marked;

        if( RecordUtil::isNotCommon(record) )
        {
            fds = record.dataSource();
            if( fds && fds.anyMarked() )
            {
                // marked records
                for( marked = fds.getFirst(true) ; marked ; marked = fds.getNext() )
                {
                    ret = SetUtil::addFieldValue(ret, marked, field.id());
                }
            }

            if( !ret )
            {
                // or a record itself
                ret = SetUtil::addFieldValue(ret, record, field.id());
            }
        }

        return ret;
    }

    // возвращает map(key=fieldId, value=set), содержащий set со значениями в указанном поле в промаркированных на форме записях
    // если args не содержит записей или содержит записи "не того" типа, то вернет пустой map
    // если опустить параметр _field, то возвратит значения одного поля - recId
    // если на форме нет промарктированных записей, то вернет набор из одной записи (из args.record)
    public static Map markedSets(Args args, TableId tableId, anytype fieldIdContainer)
    {
        Map         ret = new Map(Types::Integer, Types::Class); // {FieldId, Set(FieldValue)}
        Enumerator  e;
        DictField   field;
        Set         set;

        if( ArgsUtil::checkRecord(args, tableid) )
        {
            // можно переделать, чтобы вместо вложенных циклов был один цикл
            e = AnytypeUtil::getEnumerator(fieldIdContainer);
            while( tableId && e && e.moveNext() )
            {
                field = FieldIdUtil::dictField_NonNull(tableId, e.current());
                set = ArgsUtil::markedSet(args, field);
                ret.insert(field.id(), set);
            }
        }

        return ret;
    }

    public static Common record(Args args, TableId tableId = 0, str _funcname = '')
    {;
        ArgsUtil::assertRecord(args, tableId, _funcname);

        return args.record();
    }

    public static Common recordAs(Args args, TableId tableId = 0)
    {
        Common ret;

        if( ArgsUtil::checkRecord(args, tableId) )
        {
            ret = args.record();
        }

        return ret;
    }
}