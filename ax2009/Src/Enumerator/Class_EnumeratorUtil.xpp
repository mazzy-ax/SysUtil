//
// https://github.com/mazzy-ax/SysUtil
//
// Util-класс реализует только статические методы.
// не содержит внутри никаких значений.
// не имеет смысла создавать экземпляр этого класса.
//
abstract class EnumeratorUtil
{

    void current() // TODO !!!
    {
    }

    void currentAs() // TODO !!!
    {
    }

    void currentAsValue() // TODO !!!
    {
    }

    public Enumerator head() // TODO
    {
    }

    public Enumerator tail()
    {
    }

    public static anytype asEnumerable(anytype value)
    {
        if( EnumeratorUtil::isEnumerable(value) )
        {
            return value;
        }

        return null;
    }

    public static anytype asEnumerator(anytype value)
    {
        if( EnumeratorUtil::isEnumerator(value) )
        {
            return value;
        }

        return null;
    }

    // возвращает @nonNull объект, у которого можно вызвать метод moveNext или Null
    // если в качестве аргумента передана не коллекция, то возвращает энумератор по коллекции из одного элемента
    // поэтому результат этого метода всегда можно энумерировать
    //
    // используйте CollectionUtil::getEnumerator()
    // если хотите получить энумератор только для коллекции, но не по элементу
    public static Enumerator getEnumerator(anytype collectionOrValue)
    {
        Enumerator e = EnumeratorUtil::newFromCollection(collectionOrValue);

        if( !e )
        {
            e = OneValueEnumerator::construct(collectionOrValue);
        }

        return e;
    }

    // возвращает @nonNull объект, у которого можно вызвать метод moveNext или Null
    // если в качестве аргумента передана не коллекция, то возвращает энумератор по коллекции из одного элемента
    // поэтому результат этого метода всегда можно энумерировать
    //
    // используйте CollectionUtil::getEnumerator()
    // если хотите получить энумератор только для коллекции, но не по элементу
    public static Enumerator getEnumeratorAndSkip(anytype collectionOrValue, int skipIterations)
    {
        Enumerator e = EnumeratorUtil::newFromCollection(collectionOrValue);

        if( !e )
        {
            e = OneValueEnumerator::construct(collectionOrValue);
        }

        if( !EnumeratorUtil::skip(e, skipIterations) )
        {
            e = null;
        }

        return e;
    }

    // возвращает true для значения, для которого можно получить enumerator
    public static boolean isEnumerable(anytype value)
    {
        Types type = typeof(value);

        switch( type )
        {
            case Types::Container:
            case Types::Record:
                return true;

            case Types::Class:
                return ObjectUtil::isEnumerable(value);
        }

        return false;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает true для значения, для которого можно получить enumerator
    public static boolean isEnumerator(anytype value)
    {
        return ObjectUtil::isEnumerator(value);
    }

    // возвращает объект, у которого можно вызвать метод moveNext или Null
    // возвращает null, если параметр не является ни коллекцией, ни энумератором
    //
    // используйте EnumeratorUtil::getEnumerator() чтобы получить энумератор для любого объекта
    public static Enumerator newFromCollection(anytype collection)
    {
        switch( typeof(collection) )
        {
            case Types::Container:
                return ConEnumerator::construct(collection);

            case Types::Record:
                return RecordEnumerator::construct(collection);

            case Types::Class:
                return ObjectUtil::getEnumerator(collection);
        }

        return null;
    }

    // пропускает заданное количество итераций
    // возвращает true, если после пропуска мы все еще находимся внутри коллекции
    public static boolean skip(Enumerator e, int skipIterations = 1)
    {
        boolean ret = true;

        while( ret && e && skipIterations > 0 )
        {
            ret = e.moveNext();
            skipIterations--;
        }

        ret = (ret && e && skipIterations <= 0);

        return ret;
    }
}