// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysDictTable extends DictTable implements SysDictXmlReflectionProvider, SysDictXmlDocumentationProvider
{
    #AOT
    #XmlDocumentation

    // Column methods
    int         colCnt;
    fieldId     col2Id[];


    boolean allowSecuritySetup()
    {
        if (this.isTmp()  ||
            this.isMap()  ||
            !this.securityKeyId() ||                          //If not, the table rights cannot be calculated if the user is a member of >1 group
            (this.configurationKeyId() && !isConfigurationkeyEnabled(this.configurationKeyId())))
            return false;
        return true;
    }

    /*
        returns the defined value of the table's AnalysisSelection property
    */
    str analysisSelection()
    {
        #Properties
        return findProperty(this.treeNode().AOTgetProperties(), #PropertyAnalysisSelection);
    }


    /*
      returns the defined value of the table's AnalysisVisibility property
    */
    str analysisVisibility()
    {
        #Properties
        return findProperty(this.treeNode().AOTgetProperties(),#PropertyAnalysisVisibility);
    }


    /*
    Returns the extended fieldid, of the provided column.
    Column could be an index used with the ResultSet class.
    */
    fieldId column2id(int colno)
    {
        if (! colCnt)
            this.columnArrBuild();

        return col2Id[colno];
    }

    /*
    Builds the array used in column2Id()
    */
    private void columnArrBuild()
    {
        Counter     fieldcnt,a;
        DictField   df;

        fieldcnt    = 1;

        while (fieldcnt <= this.fieldCnt())
        {
            df = this.fieldObject(this.fieldCnt2Id(fieldcnt));

            if (df.isSql())
                if (df.arraySize() > 1)
                {
                    for (a=1;a<=df.arraySize();a++)
                    {
                        colCnt++;
                        col2Id[colCnt] = fieldId2Ext(df.id(),a);
                    }
                }
                else
                {
                    colCnt++;
                    col2Id[colCnt] = df.id();
                }

            fieldcnt++;
        }
    }

    int columnCnt()
    {
        if (! colCnt)
            this.columnArrBuild();

        return colCnt;
    }

    int fieldCntWithoutSys()
    {
        Counter i, noOfFields;

        for (i=1;i<=this.fieldCnt();i++)
            if (! isSysId(this.fieldCnt2Id(i)))
                noOfFields++;

        return noOfFields;
    }

    public Set fieldGroups()
    {
        int cnt;
        int i;
        tableId tableId = this.id();
        SysDictFieldGroup sysDictFieldGroup;
        Set set = new Set(Types::Class);

        //
        // Include field groups
        //
        cnt = this.fieldGroupCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictFieldGroup = new SysDictFieldGroup(tableId, this.fieldGroup(i));
            set.add(sysDictFieldGroup);
        }
        return set;
    }

    SysDictField fieldObject(fieldId _fieldId)
    {
        return new SysDictField(this.id(), _fieldId);
    }

    public Set fields()
    {
        int cnt;
        int i;
        int j;
        tableId tableId = this.id();
        SysDictField sysDictField;
        SysDictField sysDictFieldArray;
        Set set = new Set(Types::Class);

        //
        // Include fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));

            //
            // Skip fields not stored in the database
            // This is typical system fields, like ModifiedBy, CreatedBy, etc.
            //
            if (sysDictField.saveContents())
            {

                //
                // Include each array field separately
                //
                for (j=1; j<=sysDictField.arraySize(); j++)
                {
                    sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
                    set.add(sysDictFieldArray);
                }
            }
        }
        return set;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public Set fieldsWithEDT(ExtendedTypeId edt)
    {
        int cnt;
        int i;
        int j;
        tableId tableId = this.id();
        SysDictField sysDictField;
        SysDictField sysDictFieldArray;
        Set set = new Set(Types::Class);

        if (!edt)
        {
            return set;
        }

        //
        // Include fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));

            //
            // Skip fields not stored in the database
            // This is typical system fields, like ModifiedBy, CreatedBy, etc.
            //
            if (sysDictField && sysDictField.saveContents() && SysDictType::isEqualOrExtending(sysDictField.extendedTypeId(), edt))
            {
                for (j=1; j<=sysDictField.arraySize(); j++)
                {
                    sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
                    set.add(sysDictFieldArray);
                }
            }
        }
        return set;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public Set fieldsWithEnum(EnumId enumId)
    {
        int cnt;
        int i;
        int j;
        tableId tableId = this.id();
        SysDictField sysDictField;
        SysDictField sysDictFieldArray;
        Set set = new Set(Types::Class);

        if (!enumId)
        {
            return set;
        }

        //
        // Include fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));

            //
            // Skip fields not stored in the database
            // This is typical system fields, like ModifiedBy, CreatedBy, etc.
            //
            if (sysDictField && sysDictField.saveContents() && sysDictField.enumId() == enumId)
            {
                for (j=1; j<=sysDictField.arraySize(); j++)
                {
                    sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
                    set.add(sysDictFieldArray);
                }
            }
        }
        return set;
    }

    // Searches this tables relations (both explicit relationships and external data type relationships) to find at least one
    // relationship that provides a unique link to an external table.
    public indexId findAUniqueRelation(tableId externId)
    {
        DictRelation    dictRelation;
        DictType        dictType;
        indexId         indexId;
        fieldId         fieldId;
        int             i;
        ;
        // Search the explicit relations
        for (i = 1; i <= this.relationCnt(); ++i)
        {
            dictRelation = new SysDictRelation(this.id());
            dictRelation.loadNameRelation(this.relation(i));

            // If it is a 'relation' then you use externTable(), but for extended data types you use table() (see next block).
            if (SysDictRelation::externId(dictRelation) == externId)
            {
                indexId = SysDictRelation::findAUniqueIndex(dictRelation);
                if (indexId != 0)
                    return indexId;
            }
        }

        // Search any for any extended data type relations next
        for (fieldId = this.fieldNext(0);  fieldId;  fieldId = this.fieldNext(fieldId))
        {
            dictType = new DictType(this.fieldObject(fieldId).typeId());
            if (dictType)
            {
                dictRelation = dictType.relationObject();
                if (dictRelation)
                {
                    // Unlike a normal relation, with an extended data type relation you must use the table() field.
                    if (SysDictRelation::externId(dictRelation) == externId)
                    {
                        indexId = SysDictRelation::findAUniqueIndex(dictRelation);
                        if (indexId)
                            return indexId;
                    }
                }
            }
        }

        return 0;
    }


    DictIndex findUniqueIndex()
    {
        DictIndex       uniqueIndex;
        indexId         indexId;
        ;

        indexId = this.primaryIndex();
        if (indexId)
        {
            uniqueIndex = this.indexObject(indexId);
        }
        else
        {
            uniqueIndex = this.firstUniqueIndex();
        }

        return uniqueIndex;
    }

    DictIndex firstUniqueIndex(indexId _fromIndexId = 0)
    {
        DictIndex       firstUniqueIndex;
        indexId         indexId = this.indexNext(_fromIndexId);

        while (indexId)
        {
            firstUniqueIndex = this.indexObject(indexId);
            if (firstUniqueIndex.allowDuplicates() == false)        // found one
                break;
            else
                firstUniqueIndex = null;
            indexId = this.indexNext(indexId);
        }

        return firstUniqueIndex;
    }

    List getIndexIdsOfUniqueOneFieldIndexes()
    {
        List            indexList = new List(Types::Integer);
        DictIndex       dictIndex;
        indexId         indexId;
    ;
        // handle grouping candidate
        if (!this.isView())
        {
            indexId = 99;
            // loop over all indexes to find the ones with only one field
            while (indexId)
            {
                indexId = this.indexNext(indexId);
                dictIndex = this.indexObject(indexId);
                if (dictIndex)
                {
                    if (!dictIndex.allowDuplicates())
                    {
                        if (dictIndex.numberOfFields() == 1)
                        {
                            indexList.addEnd(indexId);
                        }
                    }
                }
            }
        }
        return indexList;
    }

    public LabelType getLabelOrName()
    {
        LabelType labelType;

        if (this.label())
        {
            labelType = this.label();
        }
        else
        {
            labelType = this.name();
        }
        return labelType;
    }

    List getListOfDisplayMethods(Set _typesSet = null)
    {
        List        methodList = new List(Types::String);
        boolean     include;
        DictMethod  dictMethod;
        Types       returnType;
        DictType    dictType;
        int         i;

        for (i=1;i<=this.objectMethodCnt();i++)
        {
            dictMethod = this.objectMethodObject(i);

            if (dictMethod.displayType())
            {
                include = true;
                returnType = dictMethod.returnType();
                if (returnType == Types::UserType)
                {
                    dictType = new DictType(dictMethod.returnId());
                    returnType = dictType.baseType();
                }
                if (_typesSet)
                    if (!_typesSet.in(returnType))
                        include = false;
                if (include)
                    methodList.addEnd(dictMethod.name());
            }
        }

        return methodList;
    }

    public str getSerie()
    {
        DictSecurityKey    dictSecurityKey = new DictSecurityKey(this.securityKeyId());
    ;
        while (dictSecurityKey && dictSecurityKey.parentSecurityKeyId())
            dictSecurityKey = new DictSecurityKey(dictSecurityKey.parentSecurityKeyId());

        if (dictSecurityKey)
        {
            return dictSecurityKey.label();
        }
        if (this.isSystemTable() || isSysId(this.id()))
            return "@SYS4278";

        return "@SYS71620";
    }

    public Source getSourceExist()
    {
        #macrolib.dictfield
        DictIndex       firstUniqueIndex;
        SysDictField    dictField;
        int             fieldNumber,
                        mandatoryFields;
        Source          source;
        int             indentLevel;

        SourceLine indent()
        {
            SourceLine sourceLine;
            ;
            sourceLine = strrep(' ',indentLevel*4);
            return sourceLine;
        }

        void setSelectSource()
        {
            SourceLine sourceLine;
            int p1;
            ;
            source += strfmt('select %1',this.name());
            source += '\n';
            indentLevel++;
            source += indent() + strfmt('index hint %1',firstUniqueIndex.name());
            source += '\n';
            sourceLine = indent() + strfmt('where '); p1 = strlen(sourceLine);
            source += sourceLine;

            for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
            {
                dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
                if (fieldNumber > 1)
                    source += ' &&\n'+ strrep(' ',p1);
                source += strfmt('%1.%2 == _%2',this.name(),dictField.name());
            }
            indentLevel--;

            return;
        }

        if (this.isMap())
            return '';

        firstUniqueIndex = this.firstUniqueIndex();

        if (!firstUniqueIndex)
            return '';

        source =  'static ';
        source += 'boolean';
        source += ' Exist(';

        // Build formal parameter list
        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        {
            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));

            if (fieldNumber > 1)
                source += ', ';

            source += strfmt('%1 _%2', dictField.getSourceType(), dictField.name());
        }

        source += ')';
        source += '\n';
        source += '{';
        indentLevel++;

        source += '\n';
        source += indent() + 'return ';

        mandatoryFields = 0;

        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        {
            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
            if (bitTest(dictField.flags(),#DBF_MANDATORY))
            {
                mandatoryFields++;

                if (mandatoryFields > 1)
                    source += ' && ';
                source += strfmt('_%1',dictField.name());
            }
        }

        indentLevel++;
        if (mandatoryFields)
            source += ' && \n' + indent();

        source += '(';
        setSelectSource();
        source += '\n';
        source += indent() + ').RecId != 0;';
        indentLevel--;

        source += '\n';
        indentLevel--;
        source += indent() + '}';

        return source;
    }

    Source getSourceFind()
    {
        #macrolib.dictfield
        DictIndex       firstUniqueIndex;
        SysDictField    dictField;
        int             fieldNumber;
        boolean         allFieldsMandatory;
        Source          source;
        int             indentLevel;

        SourceLine indent()
        {
            return strrep(' ',indentLevel*4);
        }

        void setSelectSource()
        {
            SourceLine sourceLine;
            int p1;
            ;
            source += '\n';
            source += indent() + strfmt('%1.SelectForUpdate(_ForUpdate);',this.name());
            source += '\n';
            source += '\n';
            source += indent() + strfmt('select firstonly %1',this.name());
            source += '\n';
            indentLevel++;
            source += indent() + strfmt('index hint %1',firstUniqueIndex.name());
            source += '\n';
            sourceLine = indent() + strfmt('where '); p1 = strlen(sourceLine);
            source += sourceLine;

            for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
            {
                dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
                if (fieldNumber > 1)
                    source += ' &&\n'+ strrep(' ',p1);
                source += strfmt('%1.%2 == _%2',this.name(),dictField.name());
            }
            source += ';';
            indentLevel--;

            return;
        }

        if (this.isMap())
            return '';

        firstUniqueIndex = this.firstUniqueIndex();

        if (!firstUniqueIndex)
            return '';

        source =  'static ';
        source += this.name();
        source += ' Find(';

        allFieldsMandatory = true;
        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        {
            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
            allFieldsMandatory = allFieldsMandatory && bitTest(dictField.flags(),#DBF_MANDATORY);

            if (fieldNumber > 1)
                source += ', ';

            source += strfmt('%1 _%2', dictField.getSourceType(), dictField.name());
        }

        source += ', boolean _ForUpdate = false)';
        source += '\n';
        source += '{';
        indentLevel++;

        source += '\n';
        source += indent() + this.name()+' '+this.name()+';';
        source += '\n';

        if (allFieldsMandatory)
        {
            source += '\n';
            source += indent() + 'if (';

            for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
            {
                dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
                if (fieldNumber > 1)
                    source += ' && ';
                source += strfmt('_%1',dictField.name());
            }
            source += ')';

            source += '\n';
            source += indent() + '{';
            indentLevel++;
            setSelectSource();
            source += '\n';
            indentLevel--;
            source += indent() + '}';

        }
        else
        {
            source += indent() + ';';
            source += '\n';
            setSelectSource();
        }

        source += '\n';
        source += '\n';
        source += indent() + strfmt('return %1;',this.name());

        source += '\n';
        indentLevel--;
        source += indent() + '}';

        return source;
    }

    public Set indexes()
    {
        int cnt;
        int i;
        tableId tableId = this.id();
        SysDictIndex sysDictIndex;
        Set set = new Set(Types::Class);

        //
        // Include indexes
        //
        cnt = this.indexCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictIndex = new SysDictIndex(tableId, this.indexCnt2Id(i));
            set.add(sysDictIndex);
        }
        return set;
    }

    private boolean indexExists( Indexname indexname )
    {
        ;

        return SysDictTable::indexExistsServer(
                        this.name(DbBackend::Sql) ,
                        DatabaseId::MS_Sql_Server == SqlSystem::databaseBackendId() ? this.recIdIndexname() : indexname );

    }

    boolean isMethodActual(identifiername _methodName)
    {
        int i;
        for (i=1; i<=this.objectMethodCnt(); i++)
        {
            if (this.objectMethod(i) == _methodName)
                return true;
        }
        return false;
    }

    boolean isRecordTemplateEnabled()
    {
        return this.tableGroup() == TableGroup::Main ||
               this.tableGroup() == TableGroup::Group;
    }

    public boolean isSQLTable()
    {
        int     tableId;
        ;

        tableId = this.id();
        return  tableId == 802 || tableId == 1061 || tableId ==65506 || tableId == 65513 || tableId == 65515 || tableId == 65517  || tableId == 65518 || tableId == 65527;
    }

    boolean isTableInRelationships(str tableName)
    {
        DictTable    dictTable,dictTableRel;
        DictRelation dictRel;
        DictType     dictType;
        SysDictField sysDictField;
        int i;
        str relationshipName;
        str tableNameReference;
        str userType;
        boolean retval = false;
    ;

        // A table has always a relationship with itself
        if(tableName == this.name())
            return true;

        // Getting table and its relationships
        dictTable = new DictTable(this.id());
        dictRel = new DictRelation(this.id());

        // Getting each relationship
        for(i=1 ; !retval && i<=dictTable.relationCnt() ; i++)
        {
            relationshipName   = dictTable.relation(i);

            dictRel.loadNameRelation(relationshipName);

            dictTableRel       = new DictTable(dictRel.externTable());
            tableNameReference = dictTableRel.name();

            if(tableNameReference == tableName)
                retval = true;
        }

        // Getting relationships from Extended Data Types
        for( i=1 ; !retval && i < dictTable.fieldCnt() ; i++)
        {
            sysDictField = new SysDictField(dictTable.id(),dictTable.fieldCnt2Id(i));
            dictType = new DictType(sysDictField.typeId());

            if(dictType!=null)
            {
                userType = dictType.name();
                dictRel = dictType.relationObject();

                if(dictRel!=null)
                {
                    dictTableRel = new DictTable(dictRel.table());
                    tableNameReference = dictTableRel.name();

                    if(tableNameReference == tableName)
                        retval = true;
                }
            }
        }

        return retval;
    }

    /*
        returns true if the title field is equal to TitleField1 or TitleField2 properties
    */
    boolean isTitleField(str titleField)
    {
        fieldId fid = this.fieldName2Id(titleField);
        ;
        return this.titleField1() == fid || this.titleField2() == fid;
    }


    public boolean isVisible()
    {
        boolean         ret = true;
        SysDictMenu     sysDictMenu;

        if (this.configurationKeyId() &&
            !isConfigurationkeyEnabled(this.configurationKeyId()))
        {
            ret = false;
        }
        else
        {
            if (this.formRef())
            {
                sysDictMenu = SysDictMenu::newMenuItem(this.formRef(), MenuItemType::Display);
                if (sysDictMenu &&
                    !sysDictMenu.isVisible())
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

    /*
        returns the defined labelId of the table's label
    */
    LabelId labelLabelId()
    {
        #Properties
        return findProperty(this.treeNode().AOTgetProperties(),#PropertyLabel);
    }


    public Set members()
    {
        Set members = new Set(Types::Class);
    ;
        members = Set::union(members, this.fields());
        members = Set::union(members, this.methods());
        members = Set::union(members, this.indexes());
        members = Set::union(members, this.relations());
        members = Set::union(members, this.fieldGroups());
        return members;
    }

    public Set methods(
        boolean _includeInstanceMethods = true,
        boolean _includeStaticMethods = true,
        boolean _includeInheritedMethods = true)
    {
        #SysBpCheck
        int cnt;
        int i;
        tableId tableId = this.id();
        SysDictMethod dictMethod;
        Set set = new Set(Types::Class);
        SysDictClass xRecordClass;
        SysDictClass objectClass;
        Set methodNameSet = new Set(Types::String);

        //
        // Include instance methods
        //
        if (_includeInstanceMethods)
        {
            cnt = this.objectMethodCnt();
            for (i=1; i<=cnt; i++)
            {
                dictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, tableId, this.objectMethod(i));
                set.add(dictMethod);
                methodNameSet.add(dictMethod.name());
            }
        }

        //
        // Include static methods
        //
        if (_includeStaticMethods)
        {
            cnt = this.staticMethodCnt();
            for (i=1; i<=cnt; i++)
            {
                dictMethod = new SysDictMethod(UtilElementType::TableStaticMethod, tableId, this.staticMethod(i));
                set.add(dictMethod);
            }
        }

        if (_includeInheritedMethods)
        {
            //
            // Include xRecord methods
            //
            xRecordClass = new SysDictClass(classnum(xRecord));

            cnt = xRecordClass.objectMethodCnt();
            for (i=1; i<=cnt; i++)
            {
                if (xRecordClass.objectMethod(i) != #MethodNameClassDeclaration)
                {
                    dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classnum(xRecord), xRecordClass.objectMethod(i));
                    //
                    // Skip if method is overridden
                    //
                    if (!methodNameSet.in(dictMethod.name()))
                    {
                        set.add(dictMethod);
                        methodNameSet.add(dictMethod.name());
                    }
                }
            }

            //
            // Include object methods
            //
            objectClass = new SysDictClass(classnum(Object));

            cnt = objectClass.objectMethodCnt();
            for (i=1; i<=cnt; i++)
            {
                if (objectClass.objectMethod(i) != #MethodNameClassDeclaration)
                {
                    dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classnum(Object), objectClass.objectMethod(i));
                    //
                    // Skip if method is overridden
                    //
                    if (!methodNameSet.in(dictMethod.name()))
                    {
                        set.add(dictMethod);
                        methodNameSet.add(dictMethod.name());
                    }
                }
            }
        }

        return set;
    }

    TreeNodePath path()
    {
        #AOT
        TreeNodePath treeNodePath;

        switch (true)
        {
            case isSysId(this.id()):
                treeNodePath = #SystemTablesPath;
                break;
            case this.isMap():
                treeNodePath = #TableMapsPath;
                break;
            case this.isView():
                treeNodePath = #ViewsPath;
                break;
            default:
                treeNodePath = #TablesPath;
                break;
        }

        return treeNodePath + #AOTDelimiter + this.name();
    }

    public TreeNodePath pathForDeveloperDocumentation()
    {
        #AOT
        TreeNodePath treeNodePath;

        if (isSysId(this.id()))
        {
            treeNodePath = #SystemTablesPath+#AOTDelimiter+this.name();
        }
        else
        {
            treeNodePath = #ApplicationDeveloperDocTablesPath+#AOTDelimiter+this.name();
        }

        return treeNodePath;
    }

    boolean recIdCreateUniqueIndex()
    {
        TableName       tableName = this.name(DbBackend::Sql);

        if (this.indexExists(this.recIdIndexname()))
            return true;

        return SysDictTable::recIdCreateUniqueIndexServer(
                    tableName,
                    this.recIdIndexname(),
                    this.fieldName(fieldnum(Common,DataAreaId),DbBackend::Sql,0,FieldNameGenerationMode::WhereClause),
                    this.fieldName(fieldnum(Common,RecId),DbBackend::Sql,0,FieldNameGenerationMode::WhereClause),
                    this.dataPrCompany() );
    }

    boolean recIdDropIndex()
    {
        str             sql;
        int             error;
        TableName       tableName = this.name(DbBackend::Sql);

        if (! this.indexExists(this.recIdIndexname()))
            return true;

        sql += 'DROP INDEX ';

        switch (SqlSystem::databaseBackendId())
        {
            case DatabaseId::MS_Sql_Server:
                sql += tableName+'.';
            case DatabaseId::Oracle:
                // Do none
                break;
        }

        sql     += this.recIdIndexname();
        error   = SysDictTable::statementExeUpdate(sql);
        if (error)
            warning(int2str(error));

        return error == 0;
    }

    Indexname recIdIndexname()
    {
        return strfmt('I_%1RECID',this.id());
    }

    Integer recordCount(boolean includeTablesInVirtualCompanies = true)
    {
        Common common = this.makeRecord();

        if (this.isMap())
            return 0;
        if (this.isTmp())
            return 0;
        if (this.isView())
            return 0;

        if (!includeTablesInVirtualCompanies && common.DataAreaId != curext())
            return 0;

        common.disableCache(true);

        select firstonly count(RecId) from common;

        return any2int(common.RecId);
    }

    real recordSize()
    {
        real size;
        int i;
        SysDictField sysDictField;

        for (i=this.fieldCnt(); i; i--)
        {
            sysDictField = new SysDictField(this.id(), this.fieldCnt2Id(i));
            size += sysDictField.fieldSize();
        }
        return size;
    }

    public Set relations()
    {
        int cnt;
        int i;
        tableId tableId = this.id();
        SysDictRelation sysDictRelation;
        Map map = new Map(Types::String, Types::Class);

        str hash(SysDictRelation relation)
        {
            int line;
            str hash = relation.externTableName();

            for (line = 1; line<=relation.lines(); line++)
                hash += relation.lineDescription(line);

            return hash;
        }

    ;
        //
        // Include relations from fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictRelation = new SysDictRelation(tableId);
            if (sysDictRelation.loadFieldRelation(this.fieldCnt2Id(i)))
            {
                map.insert(hash(sysDictRelation), sysDictRelation);
            }
        }

        //
        // Include relations defined on table
        //
        cnt = this.relationCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictRelation = new SysDictRelation(tableId);
            if (sysDictRelation.loadNameRelation(this.relation(i)))
            {
                map.insert(hash(sysDictRelation), sysDictRelation);
            }
        }

        return map.rangeSet();
    }

    /*
        returns the defined value of the table's SingularLabel property
    */
    LabelId singularLabel()
    {
        #Properties
        return findProperty(this.treeNode().AOTgetProperties(),#PropertySingularLabel);
    }


    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public SysDictFieldGroup sysDictFieldGroup(str _fieldGroupName)
    {
        int i;
        ;

        for(i = 1; i <= this.fieldGroupCnt(); i++)
            if( this.fieldGroup(i) == _fieldGroupName )
                return new SysDictFieldGroup(this.id(), _fieldGroupName);

        return null;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public str toString()
    {
        return strFmt('%1 [%2]', this.name(), this.id());
    }

        TreeNode treeNode()
    {
        TreeNode treeNode = TreeNode::findNode(this.path());
        if (!treeNode)
        {
            throw error(strfmt("@SYS28152",this.path()));
        }
        return treeNode;
    }

    /*
        returns the defined value of the table's TypicalRowCount property
    */
    str typicalRowCount()
    {
        #Properties
        return findProperty(this.treeNode().AOTgetProperties(),#PropertyTypicalRowCount);
    }



    public SysUtilElementType utilElementType()
    {
        SysUtilElementType sysUtilElementType;

        switch (true)
        {
            case this.isMap() :
                sysUtilElementType = UtilElementType::TableMap;
                break;

            case this.isView() :
                sysUtilElementType = UtilElementType::ViewQuery;
                break;

            default :
                sysUtilElementType = UtilElementType::Table;
                break;
        }

        return sysUtilElementType;

    }


    public XML xmlDocumentation()
    {
        //
        // Read from file if available
        //
        XML xml = this.xmlDocumentationFromFile();


        if (!xml)
        {
            //
            // If file is not available, extract from the source code
            //
            xml = this.xmlDocumentationFromMethods();
        }
        return xml;
    }

    //
    // This method can only be used on the client tier.
    //
    protected XML xmlDocumentationFromFile()
    {
        int infologLine;
        InfologData errorData;
        SysInfologEnumerator enum;
        str errorMessage;
        SysTreeNode sysTreeNode = SysTreeNode::newTreeNodePath(this.path());
        XML xml;
        SysVersionControlSystem versionControlSystem;
        Filename filename;
        str filePath;
        str fileExtension;
        XmlReader xmlReader;
        #file

        if (this.objectOnServer())
            throw error(strfmt("@SYS19306", funcname()));

        if (versioncontrol && versioncontrol.parmSysVersionControlSystem())
        {
            versionControlSystem = versioncontrol.parmSysVersionControlSystem();
            [filePath, filename, fileExtension] = fileNameSplit(versionControlSystem.fileName(sysTreeNode));

            filename = filePath + filename + #xml;
            if (WinAPI::fileExists(filename))
            {
                //
                // Read the contents of the <members> tag
                //
                infologLine = infolog.line();
                try
                {
                    //BP Deviation documented
                    xmlReader = XmlReader::newFile(filename);
                    while (xmlReader.read())
                    {
                        if (xmlReader.nodeType() == XmlNodeType::Element &&
                            xmlReader.name() == #XmlMembers)
                        {
                            xml = xmlReader.readInnerXml();
                        }
                    }
                }
                catch (Exception::Error)
                {
                    errorData = infolog.cut(infologLine+1);
                    enum = SysInfologEnumerator::newData(errorData);
                    while (enum.moveNext())
                    {
                        errorMessage += (errorMessage?',':'')+strrem(enum.currentMessage(), '\n\t');
                    }
                    xml = strfmt('<member name="!:%1 (%2)"/>', this.name(), errorMessage);
                }
            }
        }
        return xml;

    }

    protected XML xmlDocumentationFromMethods()
    {
        TextBuffer textBuffer = new TextBuffer();
        SetEnumerator enum = this.methods(true, true, false).getEnumerator();
        SysDictMethod dictMethod;

        while (enum.moveNext())
        {
            dictMethod = enum.current();
            textBuffer.appendText(dictMethod.xmlDocumentation(true));
        }
        return textBuffer.getText();
    }

    public XML xmlQualifiedName()
    {
        return strfmt('T:%1', this.name());
    }

    public void xmlReflection(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlApi);
        _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedName());

        this.xmlReflectionApiData(_xmlWriter);
        this.xmlReflectionTypeData(_xmlWriter);
        this.xmlReflectionFamily(_xmlWriter);
        this.xmlReflectionElements(_xmlWriter);
        this.xmlReflectionContainers(_xmlWriter);
        this.xmlReflectionFile(_xmlWriter);
        this.xmlReflectionLabel(_xmlWriter);
        this.xmlReflectionDeveloperDocumentation(_xmlWriter);
        this.xmlReflectionEntityRelationshipType(_xmlWriter);

        _xmlWriter.writeEndElement();

        this.xmlReflectionMembers(_xmlWriter);
    }

    protected void xmlReflectionApiData(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#Xmlapidata);
        _xmlWriter.writeAttributeString(#XmlName, this.name());
        _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupType);
        _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubGroupTable);
        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionContainers(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlContainers);
        _xmlWriter.writeStartElement(#XmlType);
        _xmlWriter.writeAttributeString(#XmlApi, #XmlRootProject);
        _xmlWriter.writeEndElement();
        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionDeveloperDocumentation(XmlWriter _xmlWriter)
    {
        LabelString label = this.developerDocumentation();
    ;
        if (label)
        {
            _xmlWriter.writeElementString(#XmlDeveloperDocumentation, label);
        }
    }

    protected void xmlReflectionElements(XmlWriter _xmlWriter)
    {
        #SysBPCheck
        SysDictXmlReflectionProvider xmlReflectionProvider;
        SetEnumerator enum = this.members().getEnumerator();

        _xmlWriter.writeStartElement(#XmlElements);

        while (enum.moveNext())
        {
            xmlReflectionProvider = SysDictClass::as(enum.current(), classnum(SysDictXmlReflectionProvider));
            if (xmlReflectionProvider)
            {
                _xmlWriter.writeStartElement(#XmlElement);
                _xmlWriter.writeAttributeString(#XmlApi, xmlReflectionProvider.xmlQualifiedName());
                _xmlWriter.writeEndElement();
            }
        }

        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionEntityRelationshipType(XmlWriter _xmlWriter)
    {
        EntityRelationshipType entityRelationshipType = this.entityRelationshipType();

        _xmlWriter.writeElementString(#XmlEntityRelationshipType, strfmt('%1', entityRelationshipType));
    }

    protected void xmlReflectionFamily(XmlWriter _xmlWriter)
    {
        _xmlWriter.writeStartElement(#XmlFamily);
        _xmlWriter.writeStartElement(#XmlAncestors);

        _xmlWriter.writeStartElement(#XmlType);
        _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', tablestr(Common)));
        _xmlWriter.writeEndElement();

        _xmlWriter.writeStartElement(#XmlType);
        _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', classstr(xRecord)));
        _xmlWriter.writeEndElement();

        _xmlWriter.writeEndElement();
        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionFile(XmlWriter _xmlWriter)
    {
        TreeNodePath treeNodePath = this.pathForDeveloperDocumentation();
        DocNode docNode;

        if (treeNodePath)
        {
            docNode = TreeNode::findNode(treeNodePath);

            if (docNode &&
                docNode.hTMLHelpEnabled() &&
                docNode.hTMLHelpTopic())
            {
                _xmlWriter.writeElementString(#XmlFile, docNode.hTMLHelpTopic());
            }
        }
    }

    protected void xmlReflectionLabel(XmlWriter _xmlWriter)
    {
        LabelString label = this.label();
    ;
        if (label)
        {
            _xmlWriter.writeElementString(#XmlLabel, label);
        }
    }

    protected void xmlReflectionMembers(XmlWriter _xmlWriter)
    {
        SysDictXmlReflectionProvider xmlReflectionProvider;
        Set members = new Set(Types::Class);
        SetEnumerator enum;
    ;
        members = Set::union(members, this.fields());
        members = Set::union(members, this.methods(true, true, false));
        members = Set::union(members, this.indexes());
        members = Set::union(members, this.relations());
        members = Set::union(members, this.fieldGroups());

        enum = members.getEnumerator();

        while (enum.moveNext())
        {
            xmlReflectionProvider = SysDictClass::as(enum.current(), classnum(SysDictXmlReflectionProvider));
            if (xmlReflectionProvider)
            {
                xmlReflectionProvider.xmlReflection(_xmlWriter);
            }
        }
    }

    protected void xmlReflectionTypeData(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlTypeData);
        _xmlWriter.writeAttributeString(#XmlId, int2str(this.id()));
        _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.configurationKeyId()));
        _xmlWriter.writeAttributeString(#XmlSecurityKey, securitykeyId2Name(this.securityKeyId()));
        _xmlWriter.writeAttributeString(#XmlTemporary, this.isTmp() ? 'true' : 'false');
        _xmlWriter.writeAttributeString(#XmlMap, this.isMap() ? 'true' : 'false');
        _xmlWriter.writeAttributeString(#XmlView, this.isView() ? 'true' : 'false');
        _xmlWriter.writeEndElement();
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static Common as(Common rec, TableId tableOrMapId)
    {
        if( SysDictTable::is(rec, tableOrMapId) )
            return rec;

        return RecordUtil::commonRecord();
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static SysDictTable construct(tableId _tableId)
    {
        SysDictTable sysDictTable = new SysDictTable(_tableId);

        return sysDictTable;
    }


    static FieldName dataareaIdNameSQL(FieldNameGenerationMode fieldNameGeneration)
    {
        DictField   dictField = new DictField(tablenum(CompanyInfo),fieldnum(CompanyInfo,DataAreaId));
        return dictField.name(DbBackend::Sql,0,fieldNameGeneration);
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static SetEnumerator fieldEnumerator(tableId tableId)
    {
        SysDictTable    dt      = new SysDictTable(tableId);
        SetEnumerator   fe      = dt ? dt.fields().getEnumerator() : null;

        return fe;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // находит id n-ого поля с указанным типом
    // порядок полей может не совпадать с объявленным в AOT
    public static FieldId fieldIdWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
    {
        SysDictField df = SysDictTable::fieldWithEDT(tableId, edt, occurrence);

        if( df )
        {
            return df.id();
        }

        return 0;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // находит id n-ого поля с указанным enum
    // порядок полей может не совпадать с объявленным в AOT
    public static FieldId fieldIdWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
    {
        SysDictField df = SysDictTable::fieldWithEnum(tableId, enumId, occurrence);

        if( df )
        {
            return df.id();
        }

        return 0;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // Внимание! наименования полей могут совпадать, поэтому set названий полей может быть меньше, чем полей в таблице
    // используйте с осторожностью
    public static Set fieldNames(tableId tableId, boolean includeSystem = false)
    {
        Set             set     = new Set(Types::String);
        SetEnumerator   fe      = SysDictTable::fieldEnumerator(tableId);
        SysDictField    df;
        ;

        while( fe && fe.moveNext() )
        {
            df = fe.current();

            if( df && (includeSystem || !df.isSystem()) )
            {
                set.add(df.name());
            }
        }

        return set;
    }

    static FieldName fieldnameSQL(tableId tableId, fieldId fieldId, FieldNameGenerationMode fieldNameGeneration)
    {
        return SysDictTable::newTableId(tableId).fieldName(fieldId,DbBackend::Sql,0,fieldNameGeneration);
    }

    static FieldName fieldnameSQLComplete(tableId tableId, fieldId fieldId, FieldNameGenerationMode fieldNameGeneration)
    {
        SysDictTable sysDictTable = SysDictTable::newTableId(tableId);

        return sysDictTable.name(DbBackend::Sql)+'.'+sysDictTable.fieldName(fieldId,DbBackend::Sql,0,fieldNameGeneration);
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // находит n-ое поле с указанным типом
    // порядок полей может не совпадать с объявленным в AOT
    // используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
    public static SysDictField fieldWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
    {
        SysDictTable    dt       = new SysDictTable(tableId);
        Set             fields   = dt ? dt.fieldsWithEDT(edt) : null;
        SetEnumerator   se       = fields ? fields.getEnumerator() : null;
        SysDictField    df;

        while( se && se.moveNext() && occurrence > 0 )
        {
            df = se.current();
            occurrence--;
        }

        return df;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // находит n-ое поле с указанным enum
    // порядок полей может не совпадать с объявленным в AOT
    // используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
    public static SysDictField fieldWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
    {
        SysDictTable    dt       = tableId  ? new SysDictTable(tableId) : null;
        Set             fields   = dt       ? dt.fieldsWithEnum(enumId) : null;
        SetEnumerator   se       = fields   ? fields.getEnumerator() : null;
        SysDictField    df;

        while( se && se.moveNext() && occurrence > 0 )
        {
            df = se.current();
            occurrence--;
        }

        return df;
    }

    static Common findFromKeyData(
        tableId         tableId,
        KeyData         keyData     // Should be a unique list!
        )
    {
        Query       q = SysQuery::queryFromKeyData(tableId,keyData);
        QueryRun    qr;

        if (! q)
            return null;

        qr = new QueryRun(q);
        if (! qr.next())
            return null;

        return qr.get(tableId);
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static MenuItemName formRefName(TableId tableId)
    {
        DictTable dt = new DictTable(tableId);

        if( dt )
        {
            return dt.formRef();
        }

        return '';
    }

    public static Map getKeyData(Common _common)
    {
        return SysDictTable::mapFieldIds2Values(SysDictTable::getUniqueIndexFields(_common.TableId), _common);
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    static client server List getMandatoryFields(tableId _tableId)
    {
        List            fieldIdList     = new List(Types::Integer);
        SysDictTable    sysDictTable    = new SysDictTable(_tableId);
        SysDictField    sysDictField;
        int             i;

        for (i=1;i<=sysDictTable.fieldCnt();i++)
        {
            sysDictField = new SysDictField(_tableId, sysDictTable.fieldCnt2Id(i));
            if( sysDictField && sysDictField.saveContents() && sysDictField.mandatory() )
            {
                fieldIdList.addEnd(sysDictField.id());
            }
        }

        return fieldIdList;
    }

    static client server List getUniqueIndexFields(tableId _tableId)
    {
        List                    fieldIdList  = new List(Types::Integer);
        SysDictTable            sysDictTable = new SysDictTable(_tableId);
        DictIndex               dictIndex;
        int                     i;
        boolean                 uniqueFound;
        ;
        if (!_tableId || !sysDictTable)
            return null;

        dictIndex = sysDictTable.findUniqueIndex();

        if (!dictIndex)
            dictIndex = sysDictTable.indexObject(sysDictTable.indexNext(0));
        else
            uniqueFound = true;

        if (dictIndex)
            for (i=1;i<=dictIndex.numberOfFields();i++)
                fieldIdList.addEnd(dictIndex.field(i));

        if (!uniqueFound)
            fieldIdList.addEnd(fieldnum(Common,RecId));

        return fieldIdList;
    }

    client server static boolean hasMethod(
        DictTable       dt,
        identifiername  methodName
        )
    {
        //validate arguments before using them
        if (dt == null)
            return false;
        return TreeNode::findNode('\\data dictionary\\tables\\'+dt.name()+'\\methods\\'+methodName) ? true : false;
    }

    private static server boolean indexExistsServer( str tableName, Indexname indexname )
    {
        str             sql;
        Statement       stmt;
        Connection      con = new Connection();
        ResultSet       set;

        InteropPermission                       interopPermission;
        SqlStatementExecutePermission           sqlPermission;
        System.Text.RegularExpressions.Regex    re;
        str                                     namePattern = '[\\w\\.]';
        boolean                                 tableNameValid = false;
        boolean                                 indexNameValid = false;
        boolean                                 retVal         = false;
        ;

        interopPermission = new InteropPermission(InteropKind::ClrInterop);
        interopPermission.assert();

        // BP deviation documented
        re = new System.Text.RegularExpressions.Regex( namePattern );

        // validate tableName and indexName to prevent SQL injection

        // BP deviation documented
        tableNameValid = re.IsMatch( tableName );

        // BP deviation documented
        indexNameValid = re.IsMatch( indexname );

        if( tableNameValid && indexNameValid )
        {

            switch (SqlSystem::databaseBackendId())
            {
                case DatabaseId::MS_Sql_Server:
                    sql += 'SELECT NAME FROM SYSINDEXES WHERE indid>0 AND indid<255 AND id=object_id(\''+tableName+'\') AND NAME = \''+indexname+'\' and INDEXPROPERTY(id, name, \'IsStatistics\') = 0';
                    break;
                case DatabaseId::Oracle:
                    sql += 'select index_name from user_indexes where table_name = \''+tableName+'\' and index_name = \''+indexname+'\'';
                    break;
            }

            CodeAccessPermission::revertAssert();
            sqlPermission = new SqlStatementExecutePermission( sql );
            sqlPermission.assert();

            try
            {
                stmt    = con.createStatement();

                // BP deviation documented
                set     = stmt.executeQuery(sql);

                if (set.next())
                {
                    retVal = true;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }

        return retVal;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static boolean is(Common rec, TableId tableOrMapId)
    {
        if( rec.TableId == tableOrMapId )
            return true;

        if( tableOrMapId && SysDictTable::isTableMapped(tableOrMapId, rec.TableId) )
            return true;

        return false;
    }

    static boolean isTableMapped(tableId _mapTableId, tableId _tableIdToTest)
    {
        #AOT
        TreeNode treeNode = TreeNode::findNode(#TableMapsPath+'\\'+tableid2name(_mapTableId)+'\\mappings');
        return treeNode.AOTfindChild(tableid2name(_tableIdToTest)) != null;
    }

    /// <summary>
    ///    Maps field IDs to values in a buffer.
    /// </summary>
    /// <param name="_keyFields">
    ///    A list of field IDs in the buffer.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer to which the field IDs are mapped.
    /// </param>
    /// <returns>
    ///    A map of field IDs to buffer values.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_keyFields" /> must be a list of field IDs that are stored in a list constructed with <c>new list(type::integer)</c>.
    /// </remarks>
    static client server Map mapFieldIds2Values(
        List   _keyFields,
        Common _buffer
        )
    {
        Map             keyMap = new Map(Types::Integer,Types::Container);
        ListEnumerator  le;

        anytype a()
        {
            anytype a = _buffer.(le.current());
            return a;
        }

        ;
        if (!_keyFields)
            return null;

        le  = _keyFields.getEnumerator();

        while (le.moveNext())
        {
            keyMap.insert(le.current(),[a()]);
        }
        return keyMap;
    }

    static client server SysDictTable newTableId(tableId id)
    {
        SysDictTable sysDictTable = new SysDictTable(id);

        if (sysDictTable == null ||
            sysDictTable.name() == 'UNKNOWN' ||
            sysDictTable.name() == '')
        {
            return null;
        }

        return sysDictTable;
    }

    static SysDictTable newTreeNode(TreeNode _treeNode)
    {
        return new SysDictTable(_treeNode.applObjectId());
    }

    private static server boolean recIdCreateUniqueIndexServer(
                            str tableName,
                            str recIdIndexName,
                            str dataAreaIdField,
                            str recIdIdField,
                            boolean dataPrCompany )
    {
        str             sql;
        int             error;

        InteropPermission                       interopPermission;
        SqlStatementExecutePermission           sqlPermission;
        System.Text.RegularExpressions.Regex    re;
        str                                     namePattern = '[\\w\\.]';
        boolean                                 inputIsValid = false;
        ;

        sql += 'CREATE UNIQUE INDEX '+recIdIndexName+' ON '+tableName+'(';

        if ( dataPrCompany )
        {
            sql += dataAreaIdField +',';
        }

        sql     += recIdIdField + ')';


        interopPermission = new InteropPermission(InteropKind::ClrInterop);
        interopPermission.assert();

        // BP deviation documented
        re = new System.Text.RegularExpressions.Regex( namePattern );

        // validate input to prevent SQL injection
        // BP deviation documented
        if( re.IsMatch(tableName) && re.IsMatch(recIdIndexName) && re.IsMatch(dataAreaIdField) && re.IsMatch(recIdIdField) )
        {
            CodeAccessPermission::revertAssert();
            sqlPermission = new SqlStatementExecutePermission(sql);
            sqlPermission.assert();
        }


        error   =  SysDictTable::statementExeUpdate(sql);

        if (error)
        {
            warning(int2str(error));
        }

        return error == 0;
    }

    static FieldName recIdNameSQL()
    {
        return SysDictTable::fieldnameSQL(tablenum(LedgerTable),fieldnum(LedgerTable,RecId),FieldNameGenerationMode::FieldList);
    }

    private static int statementExeUpdate(
        str         sql,
        Connection  con = new Connection()
        )
    {
        Statement       stmt;
        int             error;
        ;

        try
        {
            stmt    = con.createStatement();

            // BP deviation documented
            error   = stmt.executeUpdate(sql);
        }
        catch (Exception::Error)
        {
            return -1;
        }

        return error;
    }
}