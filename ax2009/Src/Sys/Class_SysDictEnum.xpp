// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysDictEnum extends DictEnum implements SysDictXmlReflectionProvider
{
    #Properties
    #XmlDocumentation

    /*
        returns the effective DisplayLength (in chars) of the enum
        defined or
        effective based on enumerators
    */
    int displayLength()
    {
        throw error(strfmt("@SYS75628",funcname(),this.name()));
    }


    /*
        Returns the combined typeId used in the dialog system
    */
    extendedTypeId extendedTypeId()
    {
        return this.id() << 16 | Types::Enum;
    }

    int firstValue()
    {
        ;
        return this.index2Value(0);
    }

    /*
        returns the labelId of the enum's Help
    */
    LabelId helpLabelId()
    {
        setprefix(this.name());

        if (isSysId(this.id()))
        {
            return '';
        }
        if (this.help()) // a Help is defined here
        {
            return findProperty(this.treeNode().AOTgetProperties(),#PropertyHelp);
        }
        return '';
    }

    /*
        returns the labelId of the enum's Label
    */
    LabelId labelLabel()
    {
        setprefix(this.name());

        if (isSysId(this.id()))
        {
            return '';
        }
        if (this.label()) // a label is defined here
        {
            return findProperty(this.treeNode().AOTgetProperties(),#PropertyLabel);
        }
        return '';
    }

    int lastValue()
    {
        return this.index2Value(this.values() - 1);
    }

    int nextValue(int value)
    {
        Counter     idx = this.value2Index(value);
        Counter     newIdx = idx + 1;
        ;
        if (idx == this.values() - 1)
            newIdx = 0;
        return this.index2Value(newIdx);
    }

    xRefPath path()
    {
        return xRefNames::calcPath(xRefKind::Enum,this.name(),'',this.id());
    }

    public TreeNodePath pathForDeveloperDocumentation()
    {
        #AOT
        TreeNodePath treeNodePath;

        if (isSysId(this.id()))
        {
            treeNodePath = #SystemEnumsPath+#AOTDelimiter+this.name();
        }
        else
        {
            //
            // Enums not listed under Application Developer Documentation
            //
            treeNodePath = '';
        }

        return treeNodePath;
    }

    TreeNode treeNode()
    {
        TreeNode treeNode = TreeNode::findNode(this.path());
        if (!treeNode)
        {
            throw error(strfmt("@SYS28152",this.path()));
        }
        return treeNode;
    }

    int value2Index(int value)
    {
        Counter     enumChoices = this.values();
        Counter     idx;

        for (idx = 0; idx < enumChoices; idx++)
        {
            if (this.index2Symbol(idx) == this.value2Symbol(value))
                return idx;
        }
        throw error(strfmt("@SYS54195", funcname()));
    }

    public XML xmlQualifiedName()
    {
        return strfmt('T:%1', this.name());
    }

    protected str xmlQualifiedNameForEntry(int _entry)
    {
        return strfmt('F:%1::%2', this.name(), this.index2Symbol(_entry));
    }

    public void xmlReflection(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlApi);
        _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedName());

        this.xmlReflectionApiData(_xmlWriter);
        this.xmlReflectionTypeData(_xmlWriter);

        this.xmlReflectionContainers(_xmlWriter);
        this.xmlReflectionElements(_xmlWriter);
        this.xmlReflectionLabel(_xmlWriter);
        this.xmlReflectionHelpText(_xmlWriter);

        _xmlWriter.writeEndElement();

        this.xmlReflectionMembers(_xmlWriter);

    }

    protected void xmlReflectionApiData(XmlWriter _xmlWriter)
    {
        _xmlWriter.writeStartElement(#Xmlapidata);
        _xmlWriter.writeAttributeString(#XmlName, this.name());
        _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupType);
        _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubgroupEnum);
        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionContainers(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlContainers);
        _xmlWriter.writeStartElement(#XmlType);
        _xmlWriter.writeAttributeString(#XmlApi, #XmlRootProject);
        _xmlWriter.writeEndElement();
        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionElements(XmlWriter _xmlWriter)
    {
        int cnt;
        int i;

        _xmlWriter.writeStartElement(#XmlElements);

        cnt = this.values();
        for (i=0; i<cnt; i++)
        {
            _xmlWriter.writeStartElement(#XmlElement);
            _xmlWriter.writeAttributeString(#XmlApi, this.xmlQualifiedNameForEntry(i));
            _xmlWriter.writeEndElement();
        }

        _xmlWriter.writeEndElement();
    }

    protected void xmlReflectionHelpText(XmlWriter _xmlWriter)
    {
        LabelString helplabel = this.help();
    ;
        if (helplabel)
        {
            _xmlWriter.writeElementString(#XmlHelpText, helplabel);
        }
    }

    protected void xmlReflectionLabel(XmlWriter _xmlWriter)
    {
        LabelString label = this.label();
    ;
        if (label)
        {
            _xmlWriter.writeElementString(#XmlLabel, label);
        }
    }

    protected void xmlReflectionMembers(XmlWriter _xmlWriter)
    {
        int cnt;
        int i;

        cnt = this.values();
        for (i=0; i<cnt; i++)
        {
            _xmlWriter.writeStartElement(#XmlApi);
            _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedNameForEntry(i));

            _xmlWriter.writeStartElement(#XmlApiData);
            _xmlWriter.writeAttributeString(#XmlName, this.index2Symbol(i));
            _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupMember);
            _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubgroupEnumEntry);
            _xmlWriter.writeEndElement();

            _xmlWriter.writeStartElement(#XmlTypeData);
            _xmlWriter.writeAttributeString(#XmlValue, int2str(this.index2Value(i)) );
            _xmlWriter.writeAttributeString(#XmlLabel, this.index2Label(i) );
            _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.index2ConfigurationKey(i)));
            _xmlWriter.writeEndElement();

            _xmlWriter.writeEndElement();
        }
    }

    protected void xmlReflectionTypeData(XmlWriter _xmlWriter)
    {
    ;
        _xmlWriter.writeStartElement(#XmlTypeData);
        _xmlWriter.writeAttributeString(#XmlId, int2str(this.id()));
        _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.configurationKeyId()));
        _xmlWriter.writeAttributeString(#XmlEnumStyle, strfmt("%1", this.showAsRadio() ? FormControlType::RadioButton : FormControlType::ComboBox));
        _xmlWriter.writeEndElement();
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static SysDictEnum newFromEnum(anytype enum)
    {
        enumId          enumId          = DictEnum::value2id(enum);
        SysDictEnum     sysDictEnum     = new SysDictEnum(enumId);

        return sysDictEnum;
    }
}