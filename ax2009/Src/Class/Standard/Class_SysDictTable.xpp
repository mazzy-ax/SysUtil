
    // 04.02.2021, mazzy, основано на методе this.fields()
    public Set fieldsWithEDT(ExtendedTypeId edt)
    {
        int cnt;
        int i;
        int j;
        tableId tableId = this.id();
        SysDictField sysDictField;
        SysDictField sysDictFieldArray;
        Set set = new Set(Types::Class);

        if (!edt)
        {
            return set;
        }

        //
        // Include fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));

            //
            // Skip fields not stored in the database
            // This is typical system fields, like ModifiedBy, CreatedBy, etc.
            //
            if (sysDictField && sysDictField.saveContents() && SysDictType::isEqualOrExtending(sysDictField.extendedTypeId(), edt))
            {
                for (j=1; j<=sysDictField.arraySize(); j++)
                {
                    sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
                    set.add(sysDictFieldArray);
                }
            }
        }
        return set;
    }

    // 04.02.2021, mazzy, основано на методе this.fields()
    public Set fieldsWithEnum(EnumId enumId)
    {
        int cnt;
        int i;
        int j;
        tableId tableId = this.id();
        SysDictField sysDictField;
        SysDictField sysDictFieldArray;
        Set set = new Set(Types::Class);

        if (!enumId)
        {
            return set;
        }

        //
        // Include fields
        //
        cnt = this.fieldCnt();
        for (i=1; i<=cnt; i++)
        {
            sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));

            //
            // Skip fields not stored in the database
            // This is typical system fields, like ModifiedBy, CreatedBy, etc.
            //
            if (sysDictField && sysDictField.saveContents() && sysDictField.enumId() == enumId)
            {
                for (j=1; j<=sysDictField.arraySize(); j++)
                {
                    sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
                    set.add(sysDictFieldArray);
                }
            }
        }
        return set;
    }

    // ava 31/08/2015 TSM02096
    SysDictFieldGroup sysDictFieldGroup(str _fieldGroupName)
    {
        int i;
        ;

        for(i = 1; i <= this.fieldGroupCnt(); i++)
            if( this.fieldGroup(i) == _fieldGroupName )
                return new SysDictFieldGroup(this.id(), _fieldGroupName);

        return null;
    }

    public str toString()
    {
        return strFmt('%1 [%2]', this.name(), this.id());
    }

    public static Common as(Common rec, TableId tableOrMapId)
    {
        if( SysDictTable::is(rec, tableOrMapId) )
            return rec;

        return RecordUtil::commonRecord();
    }

    //TSUM001815 DYask 26.02.2018
    public static SysDictTable construct(tableId _tableId)
    {
        SysDictTable sysDictTable = new SysDictTable(_tableId);

        return sysDictTable;
    }


    //mazzy 30.01.2020
    public static SetEnumerator fieldEnumerator(tableId tableId)
    {
        SysDictTable    dt      = new SysDictTable(tableId);
        SetEnumerator   fe      = dt ? dt.fields().getEnumerator() : null;

        return fe;
    }

    // находит id n-ого поля с указанным типом
    // порядок полей может не совпадать с объявленным в AOT
    public static FieldId fieldIdWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
    {
        SysDictField df = SysDictTable::fieldWithEDT(tableId, edt, occurrence);

        if( df )
        {
            return df.id();
        }

        return 0;
    }

    // находит id n-ого поля с указанным enum
    // порядок полей может не совпадать с объявленным в AOT
    public static FieldId fieldIdWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
    {
        SysDictField df = SysDictTable::fieldWithEnum(tableId, enumId, occurrence);

        if( df )
        {
            return df.id();
        }

        return 0;
    }

    // mazzy 30.01.2020
    // Внимание! наименования полей могут совпадать, поэтому set названий полей может быть меньше, чем полей в таблице
    // используйте с осторожностью
    public static Set fieldNames(tableId tableId, boolean includeSystem = false)
    {
        Set             set     = new Set(Types::String);
        SetEnumerator   fe      = SysDictTable::fieldEnumerator(tableId);
        SysDictField    df;
    ;
        while( fe && fe.moveNext() )
        {
            df = fe.current();

            if( df && (includeSystem || !df.isSystem()) )
            {
                set.add(df.name());
            }
        }

        return set;
    }

    // находит n-ое поле с указанным типом
    // порядок полей может не совпадать с объявленным в AOT
    // используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
    public static SysDictField fieldWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
    {
        SysDictTable    dt       = new SysDictTable(tableId);
        Set             fields   = dt ? dt.fieldsWithEDT(edt) : null;
        SetEnumerator   se       = fields ? fields.getEnumerator() : null;
        SysDictField    df;

        while( se && se.moveNext() && occurrence > 0 )
        {
            df = se.current();
            occurrence--;
        }

        return df;
    }

    // находит n-ое поле с указанным enum
    // порядок полей может не совпадать с объявленным в AOT
    // используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
    public static SysDictField fieldWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
    {
        SysDictTable    dt       = tableId  ? new SysDictTable(tableId) : null;
        Set             fields   = dt       ? dt.fieldsWithEnum(enumId) : null;
        SetEnumerator   se       = fields   ? fields.getEnumerator() : null;
        SysDictField    df;

        while( se && se.moveNext() && occurrence > 0 )
        {
            df = se.current();
            occurrence--;
        }

        return df;
    }

    // mazzy 10.03.2021
    public static MenuItemName formRefName(TableId tableId)
    {
        DictTable dt = new DictTable(tableId);

        if( dt )
        {
            return dt.formRef();
        }

        return '';
    }

    // mazzy, 07.04.2020
    static client server List getMandatoryFields(tableId _tableId)
    {
        List                    fieldIdList  = new List(Types::Integer);
        SysDictTable            sysDictTable = new SysDictTable(_tableId);
        SysDictField            sysDictField;
        int                     i;
        ;

        for (i=1;i<=sysDictTable.fieldCnt();i++)
        {
            sysDictField = new SysDictField(_tableId, sysDictTable.fieldCnt2Id(i));
            if( sysDictField && sysDictField.saveContents() && sysDictField.mandatory() )
            {
                fieldIdList.addEnd(sysDictField.id());
            }
        }

        return fieldIdList;
    }

    public static boolean is(Common rec, TableId tableOrMapId)
    {
        if( rec.TableId == tableOrMapId )
            return true;

        if( tableOrMapId && SysDictTable::isTableMapped(tableOrMapId, rec.TableId) )
            return true;

        return false;
    }

    static boolean isTableMapped(tableId _mapTableId, tableId _tableIdToTest)
    {
        #AOT
        TreeNode treeNode = TreeNode::findNode(#TableMapsPath+'\\'+tableid2name(_mapTableId)+'\\mappings');

        if( treeNode )
            return treeNode.AOTfindChild(tableid2name(_tableIdToTest)) != null;

        return false;
    }
