//
// https://github.com/mazzy-ax/SysUtil
//
// класс оперирует с текстом - многострочной строкой (multiline string)
// если текст содержит только одну строку, то класс работает также как и строковые функции
class TextUtil
{

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // это Util-класс, содержащий только статические методы
    // нет смысла создавать объекты этого класса
    private void new()
    {
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находится после первого вхожения подстроки
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::after('ABC-DEF-GH\nIJK-LMN-OP','-') == 'DEF-GH\nLMN-OP'
    //      TextUtil::after('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str after(str text, str search)
    {
        str pattern;

        if( text == '' )
            return text;

        if( search == '' )
            return text;

        pattern = strfmt(@'(?m)^.*?%1', search);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после первого вхожения любого из указанных символов characters
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::afterChar('ABC-DEF-GH\nIJK-LMN-OP','-') == 'DEF-GH\nLMN-OP'
    //      TextUtil::afterChar('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str afterChar(str text, str characters)
    {
        str pattern;

        if( text == '' )
            return text;

        if( characters == '' )
            return text;

        pattern = strfmt(@'(?m)^.*?[%1]', characters);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после последнего вхожения подстроки
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::afterLast('ABC-DEF-GH\nIJK-LMN-OP','-') == 'GH\nOP'
    //      TextUtil::afterLast('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str afterLast(str text, str search)
    {
        str pattern;

        if( text == '' )
            return text;

        if( search == '' )
            return text;

        pattern = strfmt(@'(?m)^.*%1', search);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после последнего вхожения любого из указанных символов characters
    // возвращает исходную строку, если ни одного вхождения не найдено
    //
    // пример:
    //      TextUtil::afterLastChar('ABC-DEF-GH\nIJK-LMN-OP','-=') == 'GH\nOP'
    //      TextUtil::afterLastChar('ABC-DEF-GH\nIJK-LMN-OP',',')  == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str afterLastChar(str s, str characters)
    {
        str pattern;

        if( s == '' )
            return s;

        if( characters == '' )
            return s;

        pattern = strfmt(@'(?m)^.*[%1]', characters);

        new InteropPermission(InteropKind::ClrInterop).assert();

        s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');

        CodeAccessPermission::revertAssert();

        return s;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // добавляет строку в конец каждой подстроки текста
    //
    // пример:
    //      TextUtil::appendEnd('ABC-DEF-GH\nIJK-LMN-OP',';') == 'ABC-DEF-GH;\nIJK-LMN-OP;'
    //      TextUtil::appendEnd('ABC-DEF-GH',            ';') == 'ABC-DEF-GH;'
    //      TextUtil::appendEnd('',                      ';') == ';'
    //
    public static str appendEnd(str text, str start)
    {
        if( text == '' )
            return start;

        if( start == '' )
            return text;

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, @'(?m)$', start);

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // добавляет строку в начало каждой подстроки текста
    //
    // пример:
    //      TextUtil::appendStart('ABC-DEF-GH\nIJK-LMN-OP','* ') == '* ABC-DEF-GH\n* IJK-LMN-OP'
    //      TextUtil::appendStart('ABC-DEF-GH',            '* ') == '* ABC-DEF-GH'
    //      TextUtil::appendStart('',                      '* ') == '* '
    //
    public static str appendStart(str text, str end)
    {
        if( text == '' )
            return end;

        if( end == '' )
            return text;

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, @'(?m)^', end);

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после первого вхожения подстроки
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::before('ABC-DEF-GH\nIJK-LMN-OP','-') == 'ABC\nIJK'
    //      TextUtil::before('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str before(str text, str search)
    {
        str pattern;

        if( text == '' )
            return text;

        if( search == '' )
            return text;

        pattern = strfmt(@'(?m)%1.*?$', search);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после первого вхожения любого из указанных символов characters
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::beforeChar('ABC-DEF-GH\nIJK-LMN-OP','=-') == 'ABC\nIJK'
    //      TextUtil::beforeChar('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str beforeChar(str text, str characters)
    {
        str pattern;

        if( text == '' )
            return text;

        if( characters == '' )
            return text;

        pattern = strfmt(@'(?m)[%1].*?$', characters);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после последнего вхожения подстроки
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::beforeLast('ABC-DEF-GH\nIJK-LMN-OP','-') == 'ABC-DEF\nIJK-LMN'
    //      TextUtil::beforeLast('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str beforeLast(str text, str search)
    {
        str pattern;

        if( text == '' )
            return text;

        if( search == '' )
            return text;

        pattern = strfmt(@'(?m)%1(?!.*%1).*$', search);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст с подстроками, которые находятся после последнего вхожения любого из указанных символов characters
    // возвращает исходный текст, если вхождения не найдено
    //
    // пример:
    //      TextUtil::beforeLastChar('ABC-DEF-GH\nIJK-LMN-OP','=-') == 'ABC-DEF\nIJK-LMN'
    //      TextUtil::beforeLastChar('ABC-DEF-GH\nIJK-LMN-OP',',')  == 'ABC-DEF-GH\nIJK-LMN-OP'
    //
    static str beforeLastChar(str text, str characters)
    {
        str pattern;

        if( text == '' )
            return text;

        if( characters == '' )
            return text;

        pattern = strfmt(@'(?m)[%1](?!.*[%1]).*$', characters);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // рассчитывает отступ, который применим для каждой строки в многострочном тексте
    // табуляцию рассматривает как один непробельный значащий символ
    public static int calcIndent(str text)
    {
        int indent = maxint();
        int i;

        System.Text.RegularExpressions.Match            rMatch;
        System.Text.RegularExpressions.GroupCollection  rGroupCollection;
        System.Text.RegularExpressions.Group            rGroup;

        if( text == '' )
            return 0;

        new InteropPermission(InteropKind::ClrInterop).assert();

        rMatch = System.Text.RegularExpressions.Regex::Match(text, @'^(\r?\n)*(?<indent> *).*((\r?\n)+( *|\k<indent>.*))*$');
        if( rMatch && rMatch.get_Success() )
        {
            rGroupCollection = rMatch.get_Groups();
            rGroup = rGroupCollection.get_Item('indent');
            i = rGroup.get_Length();
            indent = min(indent, i);
        }

        CodeAccessPermission::revertAssert();

        if( indent == maxint() )
            return 0;

        return indent;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // отображаем как в отладчике
    public static str callStack(int skip = 2, container callStack = xSession::xppCallStack())
    {
        str ret = TextBufferUtil::appendCallStack(null, skip, callStack).getText();

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // добавляет или удаляет отступ слева у каждой строки в многострочном тексте
    // пробелы справа каждой строки оставляет как есть
    // табуляцию рассматривает как непробельный значащий символ
    //
    // text - исходный текст, в котором метод изменяет отступы
    // identOffset - положительное значение увеличивает отступ, отрицательное значение уменьшает отступ, нулевое значение не меняет текст
    //
    public static str changeIndent(str text, int indentOffset)
    {
        str pattern;
        str replacement;

        if( text == '' )
            return text;

        if( indentOffset == 0 )
            return text;

        if( indentOffset < 0 )
        {
            pattern = strfmt('(?m)^ {1,%1}', -indentOffset);
            replacement = '';
        }
        else
        {
            pattern = '(?m)^';
            replacement = strrep(' ', indentOffset);
        }

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, replacement);

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // в каждой строке многострочного текста:
    // = удаляет первые n символов, если n > 0
    // = удаляет последние n символов, если n < 0
    // возвращает исходный текст, если n == 0
    public static str drop(str text, int n)
    {
        if( n > 0 )
            return TextUtil::dropStart(text, n);

        return TextUtil::dropEnd(text, -n);
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // в каждой строке многострочного текста:
    // = удаляет последние n символов, если n < 0
    // возвращает исходный текст, если n => 0
    public static str dropEnd(str text, int n)
    {
        str pattern;

        if( text == '' )
            return text;

        if( n >= 0 )
            return text;

        pattern = strfmt('(?m).{1,%1}$', -n);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // в каждой строке многострочного текста:
    // удаляет первые n символов, если n > 0
    // возвращает исходный текст, если n <= 0
    public static str dropStart(str text, int n)
    {
        str pattern;

        if( text == '' )
            return text;

        if( n <= 0 )
            return text;

        pattern = strfmt('(?m)^.{1,%1}', n);

        new InteropPermission(InteropKind::ClrInterop).assert();

        text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');

        CodeAccessPermission::revertAssert();

        return text;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static str infolog(InfologData info = infolog.export(), str newLine = '\n')
    {
        str ret = TextBufferUtil::appendInfolog(null, info, newLine).getText();

        return ret;
    }


    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает n-ую строку из многострочного текста
    public static str line(str s, int n)
    {
        str ret = strline(s, n);

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static System.String[] lines(str text)
    {
        System.String[] ret;

        new InteropPermission(InteropKind::ClrInterop).assert();

        ret = System.Text.RegularExpressions.Regex::Split(text, '\n');

        CodeAccessPermission::revertAssert();

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // добавляет указанный символ слева до нужной длины
    // если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
    public static str padLeft(str text, int length, char char = ' ')
    {
        TextBuffer                              ret = new TextBuffer();
        str                                     s;
        int                                     n;
        System.Char                             c;
        System.String                           ss;
        System.Text.RegularExpressions.Match    rMatch;

        if( text == '' )
            return text;

        if( char == '' )
            return text;

        if( length <= 0 )
            return text;

        new InteropPermission(InteropKind::ClrInterop).assert();

        c = System.Char::Parse(char);

        rMatch = System.Text.RegularExpressions.Regex::Match(text, @'(?m)^.*$');
        while( rMatch && rMatch.get_Success() )
        {
            ss = rMatch.get_Value();
            s = ss.PadLeft(length, c);

            if( n )
                ret.appendText('\n');

            ret.appendText(s);

            rMatch = rMatch.NextMatch();
            ++n;
        }

        CodeAccessPermission::revertAssert();

        return ret.getText();
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // добавляет указанный символ справа до нужной длины
    // если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
    static str padRight(str text, int length, char char = ' ')
    {
        TextBuffer  ret = new TextBuffer();
        str         s;

        System.Char                     c;
        System.String                   ss;
        System.String[]                 ssa;
        System.Collections.IEnumerator  se;

        if( text == '' )
            return text;

        if( char == '' )
            return text;

        if( length <= 0 )
            return text;

        new InteropPermission(InteropKind::ClrInterop).assert();

        ssa = TextUtil::lines(text);
        se  = ssa.GetEnumerator();
        while( se.MoveNext() )
        {
            if( ret.size() )
            {
                ret.appendText('\n');
            }
            else
            {
                c = System.Char::Parse(char);
            }

            ss = se.get_Current();
            s  = ss.PadRight(length, c);

            ret.appendText(s);
        }

        CodeAccessPermission::revertAssert();

        return ret.getText();
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст, в котором каждая строка содержит не более заданной длины справа
    static str strLeft(str s, int len)
    {
        str pattern;

        if( s == '' )
            return s;

        if( len > 0 )
            pattern = strfmt(@'(?m)(?<=.{%1}).+', len);
        else
            pattern = strfmt(@'(?m).+', len);

        new InteropPermission(InteropKind::ClrInterop).assert();

        s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');

        CodeAccessPermission::revertAssert();

        return s;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // возвращает текст, в котором каждая строка содержит не более заданной длины слева
    static str strRight(str s, int len)
    {
        str pattern;

        if( s == '' )
            return s;

        if( len > 0 )
            pattern = strfmt(@'(?m).+(?=.{%1})', len);
        else
            pattern = strfmt(@'(?m).+', len);

        new InteropPermission(InteropKind::ClrInterop).assert();

        s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');

        CodeAccessPermission::revertAssert();

        return s;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // TODO
    public static container toArray(str s)
    {
        container ret = StrUtil::splitChar(s, '\n');

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    public static container toCon(str s)
    {
        container ret = StrUtil::splitChar(s, '\n');

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // TODO
    public static container toList(str s)
    {
        container ret = StrUtil::splitChar(s, '\n');

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // TODO
    public static container toMap(str s, int startLineNum = 1)
    {
        container ret = StrUtil::splitChar(s, '\n');

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // TODO
    public static container toSet(str s)
    {
        container ret = StrUtil::splitChar(s, '\n');

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // убирает указанные символы в начале и в конце всех строк в многострочном тексте
    // по умолчанию, убирает пробелы, табуляцию и переводы строк
    static str trim(str s, str ws = ' \t')
    {
        str ret;
        int len = strlen(s);
        int fromPos = strnfind(s, ws, 1, len);
        int toPos = strnfind(s, ws, len, -len);

        if( fromPos && fromPos <= toPos )
        {
            ret = substr(s, fromPos, toPos - fromPos + 1);
        }

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    static str trimBlankLines(str s, str ws = ' \t\r\n')
    {
        str ret;
        //TODO
        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    //TODO
    public static str trimEnd(str s, str ws = ' \t')
    {
        str ret;

        return ret;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    // удаляет отступ, который применим для каждой строки в многострочном тексте
    // табуляцию рассматривает как непробельный значащий символ
    // работает как trimIndent в Kotlin, https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-indent.html
    // см. также https://openjdk.java.net/jeps/355
    public static str trimIndent(str s)
    {
        int indent;

        if( s == '' )
            return s;

        new InteropPermission(InteropKind::ClrInterop).assert();

        // удаляем первую и последнюю пустые или пробельные строки
        s = System.Text.RegularExpressions.Regex::Replace(s, '^ *\n|\n *$', '');

        CodeAccessPermission::revertAssert();

        indent = TextUtil::calcIndent(s);

        s = TextUtil::changeIndent(s, -indent);

        return s;
    }

    //
    // https://github.com/mazzy-ax/SysUtil
    //
    //TODO
    public static str trimStart(str s, str ws = ' \t')
    {
        str ret;

        return ret;
    }
}