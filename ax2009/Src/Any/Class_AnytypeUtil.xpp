//
// https://github.com/mazzy-ax/SysUtil
//
// Класс AnytypeUtil обслуживает значения типа anytype
//
// Util-класс реализует только статические методы.
// не содержит внутри никаких значений.
// не имеет смысла создавать экземпляр этого класса.
//
class AnytypeUtil
{

    public static anytype as(anytype value, Types type, int potentialAncestorId = 0)
    {
        if( AnytypeUtil::is(value, type, potentialAncestorId) )
        {
            return value;
        }

        return nullValueBaseType(type);
    }

    public static Array asArray(anytype value)
    {
        if( AnytypeUtil::isArray(value) )
        {
            return value;
        }

        return null;
    }

    public static Array asArrayWithType(anytype value, Types elementType)
    {
        if( AnytypeUtil::isArrayWithType(value, elementType) )
        {
            return value;
        }

        return null;
    }

    public static Object asClass(anytype value, ClassId potentialAncestorId = 0)
    {
        Object ret;

        if( typeof(value) == Types::Class )
        {
            if( potentialAncestorId )
            {
                ret = ObjectUtil::as(value, potentialAncestorId);
            }
            else
            {
                ret = value;
            }
        }

        return ret;
    }

    public static anytype asCollection(anytype value)
    {
        return EnumeratorUtil::asEnumerable(value);
    }

    public static container asContainer(anytype value)
    {
        container ret;

        if( typeof(value) == Types::Container )
        {
            ret = value;
        }

        return ret;
    }

    public static Date asDate(anytype value)
    {
        Date ret;

        if( typeof(value) == Types::Date )
        {
            ret = value;
        }

        return ret;
    }

    public static UtcDateTime asDateTime(anytype value)
    {
        utcdatetime ret;

        if( typeof(value) == Types::UtcDateTime )
        {
            ret = value;
        }

        return ret;
    }

    public static anytype asEnum(anytype value, enumId enumId = 0)
    {
        return AnytypeUtil::as(value, Types::Enum, enumId);
    }

    public static anytype asEnumDefault(anytype value, anytype defaultEnumValue)
    {
        int enumId = AnytypeUtil::enumId(defaultEnumValue);

        if( enumId && AnytypeUtil::is(value, Types::Enum, enumId) )
        {
            return value;
        }

        return defaultEnumValue;
    }



    public static anytype asEnumerable(anytype value)
    {
        anytype ret = EnumeratorUtil::asEnumerable(value);

        return ret;
    }

    public static anytype asEnumerator(anytype value)
    {
        anytype ret = EnumeratorUtil::asEnumerator(value);

        return ret;
    }

    public static anytype asEnumOrDefault(anytype value, anytype defaultEnumValue)
    {
        int enumId = AnytypeUtil::enumId(defaultEnumValue);

        if( enumId && AnytypeUtil::is(value, Types::Enum, enumId) )
        {
            return value;
        }

        return defaultEnumValue;
    }



    public static GUID asGUID(anytype value)
    {
        if( typeof(value) == Types::Guid )
        {
            return value;
        }

        return nullValueBaseType(Types::Guid);
    }

    public static int asInt(anytype value)
    {
        int ret;

        if( typeof(value) == Types::Integer )
        {
            ret = value;
        }

        return ret;
    }

    public static int64 asInt64(anytype value)
    {
        int64 ret;

        if( typeof(value) == Types::Int64 )
        {
            ret = value;
        }

        return ret;
    }

    public static List asList(anytype value)
    {
        List ret;

        if( AnytypeUtil::isList(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static List asListWithType(anytype value, Types elementType)
    {
        List ret;

        if( AnytypeUtil::isListWithType(value, elementType) )
        {
            ret = value;
        }

        return ret;
    }

    public static Map asMap(anytype value)
    {
        Map ret;

        if( AnytypeUtil::isMap(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static Map asMapWithType(anytype value, Types keyType, Types valueType)
    {
        Map ret;

        if( AnytypeUtil::isMapWithType(value, keyType, valueType) )
        {
            ret = value;
        }

        return ret;
    }

    public static Object asObject(anytype value)
    {
        return AnytypeUtil::asClass(value);
    }

    public static Real asReal(anytype value)
    {
        real ret;

        if( typeof(value) == Types::Real )
        {
            ret = value;
        }

        return ret;
    }

    public static RecId asRecId(anytype value)
    {
        RecId ret;

        if( typeof(value) == Types::Int64 )
        {
            ret = value;
        }

        return ret;
    }

    public static Common asRecord(anytype value, TableId tableId = 0)
    {
        Common ret = AnytypeUtil::as(value, Types::Record, tableId);

        return ret;
    }

    public static RecVersion asRecVersion(anytype value)
    {
        RecVersion ret;

        if( typeof(value) == Types::Integer )
        {
            ret = value;
        }

        return ret;
    }

    public static anytype assertEmpty(anytype value)
    {
        if (value)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return value;
    }

    public static anytype assertNotEmpty(anytype value)
    {
        if (value)
        {
            return value;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

    public static anytype assertType(anytype value, Types type, int potentialAncestorId = 0)
    {
        if (AnytypeUtil::is(value, type, potentialAncestorId))
        {
            return value;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

    public static Set asSet(anytype value)
    {
        Set ret;

        if( AnytypeUtil::isSet(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static Set asSetWithType(anytype value, Types elementType)
    {
        Set ret;

        if( AnytypeUtil::isSetWithType(value, elementType) )
        {
            ret = value;
        }

        return ret;
    }

    public static Stack asStack(anytype value)
    {
        Stack ret;

        if( AnytypeUtil::isStack(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static str asString(anytype value)
    {
        str ret;

        if( AnytypeUtil::isString(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static Struct asStruct(anytype value)
    {
        Struct ret;

        if( AnytypeUtil::isStruct(value) )
        {
            ret = value;
        }

        return ret;
    }

    public static timeOfDay asTime(anytype value)
    {
        timeOfDay ret;

        if( typeof(value) == Types::Integer )
        {
            ret = value;
        }

        return ret;
    }

    public static anytype asValue(anytype value, anytype asValue)
    {
        Types   asType = typeof(asValue);
        Int     asId   = AnytypeUtil::id(asValue);
        anytype ret    = AnytypeUtil::as(value, asType, asId);

        return ret;
    }

    public static int classId(anytype value)
    {
        int id = 0;

        if( typeof(value) == Types::Class )
        {
            id = classidget(value);
        }

        return id;
    }

    public static int enumId(anytype enumIdOrNameOrValue)
    {
        Types type = typeof(enumIdOrNameOrValue);
        int enumId = 0;

        switch( type )
        {
            case Types::Enum:
                enumId = DictEnum::value2id(enumIdOrNameOrValue);
                break;

            case Types::Integer:
                enumId = enumIdOrNameOrValue;
                break;

            case Types::Int64:
                enumId = int642int(enumIdOrNameOrValue, true);
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:
                enumId = enumName2Id(enumIdOrNameOrValue);
                break;
        }

        return enumId;
    }

    // возвращает объект, у которого можно вызвать метод moveNext
    public static Enumerator getEnumerator(anytype collectionOrValue)
    {
        Enumerator e = EnumeratorUtil::getEnumerator(collectionOrValue);

        return e;
    }

    public static int id(anytype value)
    {
        int     id = 0;
        Types   type = typeof(value);

        switch( type )
        {
            case Types::Enum:
                id = DictEnum::value2id(value);
                break;

            case Types::Record:
                id = AnytypeUtil::asRecord(value).TableId;
                break;

            case Types::Class:
                id = classidget(value);
                break;
        }

        return id;
    }

    public static boolean is(anytype value, Types type, int potentialAncestorId = 0)
    {
        Types t = typeof(value);

        if( potentialAncestorId )
        {
            switch( t )
            {
                case Types::Class:
                    return (type == t) && ObjectUtil::is(value, potentialAncestorId);

                case Types::Record:
                    return (type == t) && SysDictTable::is(value, potentialAncestorId);

                case Types::Integer:
                    switch( type )
                    {
                        case Types::Class:
                            return ClassUtil::is(value, potentialAncestorId);

                        case Types::Record:
                            return TableUtil::is(value, potentialAncestorId);

                        case Types::UserType:
                            return DictTypeUtil::is(value, potentialAncestorId);

                        case Types::Enum:
                            return (potentialAncestorId == value && new DictEnum(value));
                    }
                    break;

                case Types::Enum:
                    return (type == t) && potentialAncestorId == DictEnum::value2id(value);
            }
        }

        if( type == t )
        {
            return true;
        }
        // не строгое совпадение строковых типов поскольку все строки можно присвоить друг другу
        else if( TypeUtil::isString(type) && TypeUtil::isString(type) )
        {
            return true;
        }

        return false;
    }

    public static boolean isArray(anytype value)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isArray(value);
        }

        return ret;
    }

    public static boolean isArrayWithType(anytype value, Types elementType)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isArrayWithType(value, elementType);
        }

        return ret;
    }

    public static boolean isClass(anytype value, int potentialAncestorId = 0)
    {
        boolean ret = AnytypeUtil::is(Types::Class, potentialAncestorId);

        return ret;
    }

    // возвращает true для значения, для которого можно получить enumerator
    public static boolean isCollection(anytype value)
    {
        return EnumeratorUtil::isEnumerable(value);
    }

    public static boolean isContainer(anytype value)
    {
        boolean ret = typeof(value) == Types::Container;

        return ret;
    }

    // нормально работает с контейнерами, классами, CLR и прочими сложными объектами.
    public static boolean isEmpty(anytype value)
    {
        boolean ret = true;

        if (value)
        {
            ret = false;
        }

        return ret;
    }

    public static boolean isEnum(anytype value, enumId enumId = 0)
    {
        boolean ret = AnytypeUtil::is(value, Types::Enum, enumId);

        return ret;
    }

    // возвращает true для значения, для которого можно получить enumerator
    public static boolean isEnumerable(anytype value)
    {
        return EnumeratorUtil::isEnumerable(value);
    }

    // возвращает true для значения, для которого можно получить enumerator
    public static boolean isEnumerator(anytype value)
    {
        return EnumeratorUtil::isEnumerator(value);
    }

    // не создаем новых переменных в стеке
    public static boolean isEqual(anytype value1, anytype value2)
    {
        //Are their types different ?
        if (typeof(value1) != typeof(value2))
        {
            return false;
        }

        //Are both null ot empty?
        if (!value1 && !value2)
        {
            return true;
        }

        //Is one of them null ot empty?
        if (!value1 || !value2)
        {
            return false;
        }

        //They are the same type. Is this type void ?
        if (typeof(value1) == Types::void)
        {
            return true;
        }

        if (typeof(value1) == Types::Class)
        {
            return ObjectUtil::isEqual(value1, value2);
        }

        //Are their values different ?
        if (value1 != value2)
        {
            return false;
        }

        return true;
    }

    public static boolean isImplement(anytype value, int interfaceId = 0)
    {
        boolean ret;

        if( interfaceId && typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isImplement(value, interfaceId);
        }

        return ret;
    }

    public static boolean isInt(anytype value)
    {
        boolean ret = typeof(value) == Types::Integer;

        return ret;
    }

    public static boolean isInt64(anytype value)
    {
        boolean ret = typeof(value) == Types::Int64;

        return ret;
    }

    public static boolean isList(anytype value)
    {
        boolean ret = AnytypeUtil::isClass(value, classnum(List));

        return ret;
    }

    public static boolean isListWithType(anytype value, Types elementType)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isListWithType(value, elementType);
        }

        return ret;
    }

    public static boolean isMap(anytype value)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ClassUtil::isMap(value);
        }

        return ret;
    }

    public static boolean isMapWithType(anytype value, Types keyType, Types valueType)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isMapWithType(value, keyType, valueType);
        }

        return ret;
    }

    // нормально работает с контейнерами, классами, CLR и прочими сложными объектами.
    public static boolean isNotEmpty(anytype value)
    {
        boolean ret;

        if (value)
        {
            ret = true;
        }

        return ret;
    }

    // не создаем новых переменных в стеке
    public static boolean isNotEqual(anytype value1, anytype value2)
    {
        boolean ret = !AnytypeUtil::isEqual(value1, value2);

        return true;
    }

    public static boolean isNotNull(anytype value)
    {
        boolean ret = true;
        Types type = typeof(value);

        switch( type )
        {
            case Types::Class:
                ret = value != null;
                break;

            case typeof(null):
                ret = false;
        }

        return ret;
    }

    public static boolean isNull(anytype value)
    {
        boolean ret;
        Types type = typeof(value);

        switch( type )
        {
            case Types::Class:
                ret = !value;
                break;

            case typeof(null):
                ret = true;
        }

        return ret;
    }

    public static boolean isNullOrEmptyStr(anytype value)
    {
        boolean ret;
        Types type = typeof(value);

        switch( type )
        {
            case Types::String:
            case Types::RString:
            case Types::VarString:
            case Types::Class:
                ret = !value;
                break;

            case typeof(null):
                ret = true;
        }

        return ret;
    }

    public static boolean isNumeric(anytype value)
    {
        Types type = typeof(value);
        boolean ret = TypeUtil::isNumeric(type);

        return ret;
    }

    public static boolean isPrimitive(anytype value)
    {
        Types type = typeof(value);
        boolean ret = TypeUtil::isPrimitive(type);

        return ret;
    }

    // возвращает true, если значение (кроме пустой строки) будет преобразовано в непустое queryValue
    // возвращает false, если значение является пустой строкой или не будет обработано методом SysQuery::value()
    public static boolean isQueryValue(anytype value)
    {
        return SysQuery::isQueryValue(value);
    }

    public static boolean isRecId(anytype value)
    {
        boolean ret = typeof(value) == Types::Int64;

        return ret;
    }

    public static boolean isRecord(anytype value, int potentialAncestorId = 0)
    {
        boolean ret = AnytypeUtil::is(value, Types::Record, potentialAncestorId);

        return ret;
    }

    public static boolean isRecVersion(anytype value)
    {
        boolean ret = typeof(value) == Types::Integer;

        return ret;
    }

    public static boolean isSet(anytype value)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ClassUtil::isset(value);
        }

        return ret;
    }

    public static boolean isSetWithType(anytype value, Types elementType)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ObjectUtil::isSetWithType(value, elementType);
        }

        return ret;
    }

    public static boolean isStack(anytype value)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ClassUtil::isStack(value);
        }

        return ret;
    }

    public static boolean isString(anytype value)
    {
        Types type = typeof(value);
        boolean ret = TypeUtil::isString(type);

        return ret;
    }

    public static boolean isStruct(anytype value)
    {
        boolean ret;

        if( typeof(value) == Types::Class )
        {
            ret = ClassUtil::isStruct(value);
        }

        return ret;
    }

    public static boolean isUndefined(anytype value)
    {
        boolean ret = TypeUtil::isUndefined(typeof(value));

        return ret;
    }

    public static boolean isValue(anytype value, anytype isValue)
    {
        Types   isType = typeof(isValue);
        Int     isId   = AnytypeUtil::id(isValue);
        boolean ret    = AnytypeUtil::is(value, isType, isId);

        return ret;
    }

    public static anytype nullValue(anytype value)
    {
        Types type = typeof(value);

        return nullValueBaseType(type);
    }

    public static int tableId(anytype value)
    {
        int id = 0;

        if( typeof(value) == Types::Record )
        {
            id = AnytypeUtil::asRecord(value).TableId;
        }

        return id;
    }

    // преобразовать value в соответствующий буфер, насколько это возможно
    public static Common toBuf(anytype value)
    {
        Common buf;

        switch(typeof(value))
        {
            case Types::Record:
                buf = value;
                break;

            case Types::Integer:
                buf = RecordUtil::makeRecord(value);
                break;

            case Types::Int64:
                buf = RecordUtil::makeRecord(int642int(value, true));
                break;

            case Types::String:
            case Types::RString:
            case Types::VarString:
                if( value )
                {
                    buf = RecordUtil::makeRecord(tablename2id(value));
                }
                break;
        }

        return buf;
    }

    public static anytype toNullValue(anytype value)
    {
        return nullValueBaseType(value);
    }

    public static str toString(anytype value, str sep = ',')
    {
        // поскольку этот метод может вызваться в отладчике еще до инициализации,
        // то в этом методе нельзя использовать методы класса и нельзя бросать исключение
        // и ни в коем случае не бросаем исключение на неинициализированные значения
        Types type = typeof(value);
        str   ret;
        Object obj;

        switch (type)
        {
            case Types::String:
            case Types::RString:
            case Types::VarString:
                ret = value;
                break;

            case Types::Container:
                ret = ConUtil::toStr(value, sep);
                break;

            case Types::Enum:
                ret = enum2str(value);
                break;

            case Types::AnyType:
                ret = '';
                break;

            case Types::Record:
                ret = RecordUtil::getValuesInfo(value);
                break;

            case Types::Class:
                if( value )
                {
                    obj = value;
                    ret = obj.toString();
                }
                else
                {
                    ret = 'null';
                }
                break;

            case Types::BLOB:
            case Types::void:
                ret = strfmt('%1', type); // не бросаем исключение! throw error(Error::unsupportedEnum(funcname(), type));
                break;

            default:
                ret = strfmt('%1', value);
                break;
        }

        return ret;
    }

    public static Types type(anytype value)
    {
        Types type = typeof(value);

        return type;
    }

    public static anytype undefined()
    {
        anytype undefined;

        return undefined;
    }
}