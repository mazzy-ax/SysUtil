Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: EnumeratorUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #EnumeratorUtil
    PROPERTIES
      Name                #EnumeratorUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class EnumeratorUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #asEnumerable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnumerable(anytype value)
        #{
        #    if( EnumeratorUtil::isEnumerable(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnumerator(anytype value)
        #{
        #    if( EnumeratorUtil::isEnumerable(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает объект, у которого можно вызвать метод moveNext или Null
        #public static Enumerator getEnumerator(anytype value)
        #{
        #    Object obj;
        #
        #    if( EnumeratorUtil::isEnumerable(value) )
        #    {
        #        switch( typeof(value) )
        #        {
        #            case Types::Container:
        #                return ConEnumerator::construct(value);
        #
        #            case Types::Class:
        #                if( value )
        #                {
        #                    obj = value; // проверка isEnumerable гарантирует, что метод getEnumerator существует и определен правильно
        #                    return obj.getEnumerator();
        #                }
        #                else
        #                {
        #                    return null;
        #                }
        #                break;
        #        }
        #    }
        #
        #    if( value )
        #    {
        #        return OneValueEnumerator::construct(value);
        #    }
        #
        #    return null; // можно вручную создать enumerator на коллекцию из одного null, если кто-то захочет
        #}
      ENDSOURCE
      SOURCE #isEnumerable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true для значения, для которого можно получить enumerator
        #public static boolean isEnumerable(anytype value)
        #{
        #    Types type = typeof(value);
        #    SysDictMethod sdm;
        #    ;
        #
        #    switch( type )
        #    {
        #        case Types::Container:
        #            return true;
        #
        #        case Types::Class:
        #            if( value )
        #            {
        #                if( AnytypeUtil::isList(value) )
        #                    return true;
        #
        #                if( AnytypeUtil::isMap(value) )
        #                    return true;
        #
        #                if( AnytypeUtil::isSet(value) )
        #                    return true;
        #
        #                if( AnytypeUtil::isClass(value, classnum(Enumerable)) )
        #                    return true;
        #
        #                // утиная типизация: есть метод getEnumerator,
        #                // у которого нет параметров и который возвращает объект
        #                sdm = new SysDictMethod(UtilElementType::ClassInstanceMethod, classidget(value), identifierstr(getEnumerator));
        #                if( sdm &&
        #                    sdm.parameterCnt() == 0 &&
        #                    sdm.returnType() == Types::Class &&
        #                    SysDictClass::construct(sdm.returnId()).isImplementing(classnum(Enumerator)) )
        #                {
        #                    return true;
        #                }
        #            }
        #            break;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true для значения, для которого можно получить enumerator
        #public static boolean isEnumerator(anytype value)
        #{
        #    return AnytypeUtil::isImplements(value, classnum(Enumerator));
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ConEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ConEnumerator
    PROPERTIES
      Name                #ConEnumerator
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public class ConEnumerator implements Enumerator
        #{
        #    int         idx;
        #    int         len;
        #    container   con;
        #}
      ENDSOURCE
      SOURCE #current
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public anytype current()
        #{
        #    // никаких проверок:
        #    // если индекс выходит за границы контейнера, то conPeek возвратит целый 0
        #    return conPeek(con, idx);
        #}
      ENDSOURCE
      SOURCE #definitionString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str definitionString()
        #{
        #    return 'container enumerator';
        #}
      ENDSOURCE
      SOURCE #init
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// метод публичный, чтобы объект данного класса можно было создавать из classFactory и инициализировать из всевозможных unpack
        #// не вызывайте этот метод напрямую
        #public void init(container _con)
        #{
        #    con = _con;
        #    len = conlen(con);
        #}
        #
      ENDSOURCE
      SOURCE #moveNext
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean moveNext()
        #{
        #    idx++;
        #
        #    return (idx <= len);
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void new(container _con = connull())
        #{
        #    this.init(con);
        #}
        #
      ENDSOURCE
      SOURCE #reset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void reset()
        #{
        #    idx = 0;
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString()
        #{
        #    // поскольку этот метод может вызваться в отладчике еще до инициализации,
        #    // то в этом методе нельзя использовать методы класса и нельзя бросать исключение
        #    // и ни в коем случае не бросаем исключение на неинициализированные значения
        #    return AnytypeUtil::toString(this.current());
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static server ConEnumerator construct(container con)
        #{
        #    ConEnumerator conEnumerator = new ConEnumerator(con);
        #
        #    return conEnumerator;
        #}
        #
      ENDSOURCE
      SOURCE #description
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static ClassDescription description()
        #{
        #    return "An enumerator to traverse a container.";
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: OneValueEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #OneValueEnumerator
    PROPERTIES
      Name                #OneValueEnumerator
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// enumerator по ОДНОМУ значению произвольного типа
        #class OneValueEnumerator implements Enumerator
        #{
        #    anytype currentValue;
        #    int pos; // 0: before, 1: inside, >1: after. Inside if (pos == 1)
        #}
      ENDSOURCE
      SOURCE #current
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public anytype current()
        #{
        #    if( pos == 1 )
        #    {
        #        return currentValue;
        #    }
        #
        #    return AnytypeUtil::undefined();
        #}
      ENDSOURCE
      SOURCE #definitionString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str definitionString()
        #{
        #    return strfmt('anytype[%1] enumerator', typeof(currentValue));
        #}
      ENDSOURCE
      SOURCE #init
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// метод публичный, чтобы объект данного класса можно было создавать из classFactory и инициализировать из всевозможных unpack
        #// повторный вызов этого метода не приведет к изменению типа переменной currentValue. И не должен приводить.
        #// не вызывайте этот метод напрямую.
        #public void init(anytype value)
        #{
        #    currentValue = value;
        #}
        #
      ENDSOURCE
      SOURCE #moveNext
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean moveNext()
        #{
        #    pos++;
        #
        #    return (pos == 1);
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(anytype value = 0)
        #{
        #    this.init(value);
        #}
      ENDSOURCE
      SOURCE #reset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void reset()
        #{
        #    pos = 0;
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString()
        #{
        #    if( pos > 1 )
        #    {
        #        return '(end)';
        #    }
        #    else if( pos < 1 )
        #    {
        #        return '(before)';
        #    }
        #
        #    return strfmt('[%1]', currentValue);
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Enumerator construct(anytype value)
        #{
        #    return new OneValueEnumerator(value);
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ConUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ConUtil
    PROPERTIES
      Name                #ConUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class ConUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #compact
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает новый контейнер, в котором удалены все пустые элементы
        #public static container compact(container con)
        #{
        #    ConEnumerator ce = ConEnumerator::construct(con);
        #    container ret;
        #
        #    while( ce && ce.moveNext() )
        #    {
        #        if( ce.current() )
        #        {
        #            ret += ce.current();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distinct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает новый контейнер, в котором присутствуют только уникальные объекты (дубли удалены)
        #public static container distinct(container con)
        #{
        #    ConEnumerator ce = ConEnumerator::construct(con);
        #    container ret;
        #
        #    while( ce && ce.moveNext() )
        #    {
        #        if( !confind(ret, ce.current()) )
        #        {
        #            ret += ce.current();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromArray
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromArray(Array array)
        #{
        #    container ret;
        #    int i;
        #
        #    for( i=1; array && i<=array.lastIndex(); ++i )
        #    {
        #        ret += array.value(i);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromBlob
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromBlob(container blob)
        #{
        #    return ContainerClass::blob2Container(blob);
        #}
      ENDSOURCE
      SOURCE #fromList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromList(List list)
        #{
        #    container ret;
        #    ListEnumerator le = list ? list.getEnumerator() : null;
        #
        #    while( le && le.moveNext() )
        #    {
        #        ret += le.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromMap
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromMap(Map map)
        #{
        #    container ret;
        #    MapEnumerator me = map ? map.getEnumerator() : null;
        #
        #    while( me && me.moveNext() )
        #    {
        #        ret += [me.currentKey(), me.currentValue()];
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromSet(Set set)
        #{
        #    container ret;
        #    SetEnumerator se = set ? set.getEnumerator() : null;
        #
        #    while( se && se.moveNext() )
        #    {
        #        ret += se.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #fromXml
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container fromXml(XmlNode node)
        #{
        #    return containerFromXMLNode(node);
        #}
      ENDSOURCE
      SOURCE #in
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean in(anytype value, container con)
        #{
        #    boolean ret = (confind(con, value) != 0);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #match
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// проверяет есть ли вхожение паттерна в какую-нибудь строку внутри контейнера
        #// проверку выполняет рекурсивно
        #public static boolean match(
        #    str         pattern,
        #    container   con)
        #{
        #    int     len     = conlen(con);
        #    int     i;
        #    Any     value;
        #
        #    for( i=1; i<=len; ++i )
        #    {
        #        value = Any::conpeek(con, i);
        #
        #        switch( value.type() )
        #        {
        #            case Types::String:
        #            case Types::RString:
        #            case Types::VarString:
        #                if( match(pattern, value.asString()) )
        #                    return true;
        #                break;
        #
        #            case Types::Container:
        #                if( ConUtil::match(pattern, value.asContainer()) )
        #                    return true;
        #                break;
        #
        #            case Types::Record:
        #                if( SysRecord::match(pattern, value.asRecord()) )
        #                    return true;
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #peekAs
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype peekAs(container con, int idx, anytype asValue)
        #{
        #    anytype ret = AnytypeUtil::as(conpeek(con, idx), asValue);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsContainer
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container peekAsContainer(container con, int idx)
        #{
        #    container ret = AnytypeUtil::asContainer(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsDate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Date peekAsDate(container con, int idx)
        #{
        #    Date ret = AnytypeUtil::asDate(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsDateTime
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static UtcDateTime peekAsDateTime(container con, int idx)
        #{
        #    utcdatetime ret = AnytypeUtil::asDateTime(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype peekAsEnum(container con, int idx, enumId enumId = 0)
        #{
        #    anytype ret = AnytypeUtil::asEnum(conpeek(con, idx), enumId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsGUID
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static GUID peekAsGUID(container con, int idx)
        #{
        #    GUID ret = AnytypeUtil::asGUID(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsInt
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int peekAsInt(container con, int idx)
        #{
        #    int ret = AnytypeUtil::asInt(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsInt64
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Int64 peekAsInt64(container con, int idx)
        #{
        #    Int64 ret = AnytypeUtil::asInt64(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsReal
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Real peekAsReal(container con, int idx)
        #{
        #    Real ret = AnytypeUtil::asInt(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsRecId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int64 peekAsRecId(container con, int idx)
        #{
        #    Int64 ret = AnytypeUtil::asRecId(conpeek(con, idx));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common peekAsRecord(container con, int idx, TableId tableId = 0)
        #{
        #    Common ret = AnytypeUtil::asRecord(conpeek(con, idx), tableId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #peekAsType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype peekAsType(container con, int idx, Types type, int potentialAncestorId = 0)
        #{
        #    anytype ret = AnytypeUtil::asType(conpeek(con, idx), type, potentialAncestorId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #remove
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container remove(container con, anytype value)
        #{
        #    int i = confind(con, value);
        #
        #    if( i )
        #    {
        #        con = condel(con, i, 1);
        #    }
        #
        #    return con;
        #}
      ENDSOURCE
      SOURCE #removeAll
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container removeAll(container con, anytype value)
        #{
        #    int i;
        #
        #    do
        #    {
        #        i = confind(con, value);
        #        if( i )
        #        {
        #            con = condel(con, i, 1);
        #        }
        #    }
        #    while( i );
        #
        #    return con;
        #}
      ENDSOURCE
      SOURCE #toArray
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Array toArray(container con, Array array = null)
        #{
        #    Any any;
        #    int i;
        #    int len = conlen(con);
        #
        #    for( i=1; i<=len; ++i )
        #    {
        #        any = Any::conpeek(con, i);
        #
        #        if( !array )
        #        {
        #            array = new Array(any.type());
        #        }
        #
        #        if( any.type() == array.typeId() )
        #        {
        #            array.value(i, any.value());
        #        }
        #    }
        #
        #    return array;
        #}
      ENDSOURCE
      SOURCE #toBlob
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container toBlob(container con)
        #{
        #    ContainerClass containerClass = new ContainerClass(con);
        #    return containerClass.toBlob();
        #}
      ENDSOURCE
      SOURCE #toList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static List toList(container con, List list = null)
        #{
        #    Any any;
        #    int i;
        #    int len = conlen(con);
        #
        #    for( i=1; i<=len; ++i )
        #    {
        #        any = Any::conpeek(con, i);
        #
        #        if( !list )
        #        {
        #            list = new List(any.type());
        #        }
        #
        #        if( any.type() == list.typeId() )
        #        {
        #            list.addEnd(any.value());
        #        }
        #    }
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #toSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Set toSet(container con, Set set = null)
        #{
        #    Any any;
        #    int i;
        #    int len = conlen(con);
        #
        #    for( i=1; i<=len; ++i )
        #    {
        #        any = Any::conpeek(con, i);
        #
        #        if( !set )
        #        {
        #            set = new Set(any.type());
        #        }
        #
        #        if( any.type() == set.typeId() )
        #        {
        #            set.add(conpeek(con, i));
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #toStr
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str toStr(container con, str sep = ',')
        #{
        #    str ret = TextBufferUtil::appendContainer(null, con, sep).getText();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toXmlString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str toXmlString(container con, int indent = 0)
        #{
        #    return XMLString(con, types::Container, indent);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ListUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ListUtil
    PROPERTIES
      Name                #ListUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class ListUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #newBy
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// создать list для хранения значений, тип которых совпадает с типом переменной value
        #public static List newBy(anytype value)
        #{
        #    Types type = typeof(value);
        #    List ret = new List(type);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container toCon(List list)
        #{
        #    container ret;
        #    ListEnumerator le = list.getEnumerator();
        #
        #    while( le.moveNext() )
        #    {
        #        ret += le.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Set toSet(List list)
        #{
        #    Set set;
        #    ListEnumerator le;
        #
        #    if (list)
        #    {
        #        set = new Set(list.typeId());
        #
        #        le = list.getEnumerator();
        #        while (le.moveNext())
        #        {
        #            set.add(le.current());
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #toStr
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str toStr(List list, str sep = ',')
        #{
        #    ListEnumerator le = list ? list.getEnumerator() : null;
        #    str ret = TextBufferUtil::appendEnumerator(null, le, sep).getText();
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SetUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SetUtil
    PROPERTIES
      Name                #SetUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class SetUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #newBy
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// создать set для хранения значений, тип которых совпадает с типом переменной value
        #public static Set newBy(anytype value)
        #{
        #    Types type = typeof(value);
        #    Set ret = new Set(type);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container toCon(Set set)
        #{
        #    container ret;
        #    SetEnumerator se = set.getEnumerator();
        #
        #    while( se.moveNext() )
        #    {
        #        ret += se.current();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static List toList(Set set)
        #{
        #    List list;
        #    SetEnumerator se;
        #
        #    if (set)
        #    {
        #        list = new List(set.typeId());
        #
        #        se = set.getEnumerator();
        #        while (se.moveNext())
        #        {
        #            list.addEnd(se.current());
        #        }
        #    }
        #
        #    return list;
        #}
      ENDSOURCE
      SOURCE #toStr
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str toStr(Set set, str sep = ',')
        #{
        #    SetEnumerator se = set ? set.getEnumerator() : null;
        #    str ret = TextBufferUtil::appendEnumerator(null, se, sep).getText();
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: StrUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #StrUtil
    PROPERTIES
      Name                #StrUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class StrUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #after
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится после первого вхожения подстроки
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      StringUtil::after('ABC-DEF-GH','DEF-') == 'GH'
        #//      StringUtil::after('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str after(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+strlen(txt), len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #afterChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится после первого вхожения любого из указанных символов characters
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'DEF-GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str afterChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+1, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #afterLast
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится после последнего вхожения подстроки
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','DEF') == 'GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str afterLast(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+strlen(txt), len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #afterLastChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится после последнего вхожения одного из символов characters
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'GH'
        #//      strBefore('ABC-DEF-GH',',')  == 'ABC-DEF-GH'
        #//
        #static str afterLastChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = substr(s, pos+1, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #before
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится до первого вхожения подстроки
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','DEF') == 'ABC-'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str before(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = StrUtil::strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #beforeChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится до первого вхожения одного из символов characters
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'ABC'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str beforeChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, 1, len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = StrUtil::strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #beforeLast
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится до последнего вхожения подстроки
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-DEFGH','-=') == 'ABC-DEF-'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str beforeLast(str s, str txt)
        #{
        #    int len = strlen(s);
        #    int pos = strscan(s, txt, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #        ret = StrUtil::strLeft(s, pos-1);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #beforeLastChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку, которая находится до последнего вхожения одного из символов characters
        #// возвращает пустую строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      strBefore('ABC-DEF-GH','-=') == 'ABC'
        #//      strBefore('ABC-DEF-GH',',')  == ''
        #//
        #static str beforeLastChar(str s, str characters)
        #{
        #    int len = strlen(s);
        #    int pos = strfind(s, characters, len, -len);
        #    str ret = s;
        #
        #    if(pos)
        #    {
        #        ret = StrUtil::strLeft(s, pos-1);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #drop
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// удалить первые n символов, если n > 0
        #// удалить последние n символов, если n < 0
        #// оставить исходную строку, если n == 0
        #public static str drop(str s, int n)
        #{
        #    if(n == 0)
        #        return s;
        #
        #    if(n < 0)
        #        return substr(s, 1, strlen(s)+n);
        #
        #    return substr(s, n+1, strlen(s)-n);
        #}
      ENDSOURCE
      SOURCE #end
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку заданной длины справа
        #//
        #// по идее, различие между strRight и end должно проявляться на текстах с разным направлением письма
        #static str end(str s, int len)
        #{
        #    str ret;
        #
        #    if( len <= 0 )
        #        return '';
        #
        #    ret = substr(s, strlen(s), -len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #hexDump
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str hexDump(str s)
        #{
        #    int         i;
        #    str         hex;
        #    int         len     = strlen(s);
        #    TextBuffer  ret     = new TextBuffer();
        #;
        #    for( i=1; i<=len; ++i )
        #    {
        #        if( ret.size() )
        #            ret.appendText(' ');
        #
        #        hex = Int2Hex(char2num(s, i));
        #
        #        if( strlen(hex) mod 2 )
        #        {
        #            ret.appendText('0');
        #        }
        #
        #        ret.appendText(hex);
        #    }
        #
        #    return ret.getText();
        #}
      ENDSOURCE
      SOURCE #isBlank
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static boolean isBlank(str s)
        #{
        #    str ret;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isEmptyOrBlank
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static boolean isEmptyOrBlank(str s)
        #{
        #    str ret;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #padEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ справа до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #//
        #// по идее, различие между padRight и padEnd должно проявляться на текстах с разным направлением письма
        #// но в аксапте никаких различий нет
        #static str padEnd(str s, int len, char char = ' ')
        #{
        #    str ret;
        #    int l = len - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = s + strrep(char, l);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #padLeft
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ слева до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #static str padLeft(str s, int len, char char = ' ')
        #{
        #    str ret;
        #    int l = len - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = strrep(char, l) + s;
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #padRight
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ справа до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #static str padRight(str s, int len, char char = ' ')
        #{
        #    str ret;
        #    int l = len - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = s + strrep(char, l);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #padStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ слева до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #//
        #// по идее, различие между padLeft и padStart должно проявляться на текстах с разным направлением письма
        #// но в аксапте никаких различий нет
        #static str padStart(str s, int len, char char = ' ')
        #{
        #    str ret;
        #    int l = len - strlen(s);
        #
        #    if(l<=0)
        #        return s;
        #
        #    ret = strrep(char, l) + s;
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #split
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// делит строку на подстроки, разделенные строкой delimiterStr
        #// возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #//
        #// пример:
        #//      strSplitCon('ABC:=DEF:=GH',':=')   == ['ABC','DEF','GH']
        #//      strSplitCon('ABC:=DEF:=GH',':=',2) == ['ABC','DEF:=GH']
        #//      strSplitCon('ABC:=DEF:=GH',':=',1) == ['ABC:=DEF:=GH']
        #//
        #static container split(str s, str delimiterStr, int maxSubstrings = 0)
        #{
        #    container ret;
        #    int delimiterLen;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiterStr == '' )
        #        return [s];
        #
        #    delimiterLen = strlen(delimiterStr);
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        pos = strscan(s, delimiterStr, posFrom, len);
        #        if( pos == 0 )
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+delimiterLen;
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #splitChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// делит строку на подстроки, разделенные хотя бы одним символом из delimiters (по-умолчанию это пробел, табуляция и перевод строки - whitespaces)
        #// возвращает контейнер подстрок.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #// Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #//
        #// пример:
        #//      strSplitChar('ABC DEF GH')        == ['ABC','DEF','GH']
        #//      strSplitChar('ABC-DEF-GH','-=')   == ['ABC','DEF','GH']
        #//      strSplitChar('ABC-DEF-GH','-=',2) == ['ABC','DEF-GH']
        #//      strSplitChar('ABC-DEF-GH','-=',1) == ['ABC-DEF-GH']
        #//
        #static container splitChar(str s, str delimiters = ' \t\n', int maxSubstrings = 0)
        #{
        #    container ret;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiters == '' )
        #        return [s];
        #
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        pos = strfind(s, delimiters, posFrom, len);
        #        if( pos == 0 )
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+1;
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #splitCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// делит строку на подстроки, разделенные хотя бы одной строкой из контейнера delimiterCon (по умолчанию пробел, табуляция и переводы строк - whitespaces)
        #// результат не зависит от порядка разделителей в контейнере.
        #// возвращает контейнер подстрок. Если maxSubstrings не ноль, то максимальная контейнера не будет превышать maxSubstrings.
        #// возвращает контейнер, содержащий исходную строку, если ни одного символа-разделителя не найдено.
        #//
        #// пример:
        #//      strSplitCon('ABC=DEF:=GH',[':=','='])   == ['ABC','DEF','GH']
        #//      strSplitCon('ABC=DEF:=GH',[':=','='],2) == ['ABC','DEF:=GH']
        #//      strSplitCon('ABC=DEF:=GH',[':=','='],1) == ['ABC=DEF:=GH']
        #//
        #static container splitCon(str s, container delimiterCon = [' ','\t','\n','\r\n','\n\r'], int maxSubstrings = 0)
        #{
        #    container ret;
        #    int d;
        #    str delimiter;
        #    str delimiterStr;
        #    int delimiterPos;
        #    int delimiterLen;
        #    int len;
        #    int posFrom = 1;
        #    int pos;
        #
        #    if( delimiterCon == connull() )
        #        return [s];
        #
        #    len = strlen(s);
        #    do
        #    {
        #        maxSubstrings--;
        #        if( maxSubstrings == 0 )
        #            break;
        #
        #        delimiter = conpeek(delimiterCon, 1);       // проверка выше гарантирует, что хотя бы один разделитель у нас есть
        #        pos = strscan(s, delimiter, posFrom, len);  // позиция первого разделителя
        #        for(d = 2; d <= conlen(delimiterCon); d++)  // позиции разделителей после первого
        #        {
        #            delimiterStr = conpeek(delimiterCon, d);
        #            delimiterPos = strscan(s, delimiterStr, posFrom, len);
        #            if( delimiterPos == 0 )
        #                continue;
        #
        #            if( pos && pos < delimiterPos )
        #                continue;
        #
        #            if( pos == delimiterPos && strlen(delimiter) >= strlen(delimiterStr) )
        #                continue;
        #
        #            // берем разделитель с минимальной позицией
        #            // если позиция совпадает, то берем разделитель с максимальной длиной
        #            delimiter = delimiterStr;
        #            pos = delimiterPos;
        #        }
        #        if( pos == 0 )  // разделители не найдены
        #            break;
        #
        #        ret += substr(s, posFrom, pos-posFrom);
        #        posFrom = pos+strlen(delimiter);
        #    }
        #    while( maxSubstrings );
        #
        #    ret += substr(s, posFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #start
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку заданной длины слева
        #//
        #// по идее, различие между strLeft и start должно проявляться на текстах с разным направлением письма
        #// но в аксапте никаких различий нет
        #//
        #static str start(str s, int len)
        #{
        #    str ret;
        #
        #    if( len <= 0 )
        #        return '';
        #
        #    ret = substr(s, 1, len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strLeft
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку заданной длины слева
        #//
        #// в X++ есть ключевое слово left. Поэтому обявить метод с именем left нельзя
        #static str strLeft(str s, int len)
        #{
        #    str ret;
        #
        #    if( len <= 0 )
        #        return '';
        #
        #    ret = substr(s, 1, len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #strRight
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку заданной длины справа
        #static str strRight(str s, int len)
        #{
        #    str ret;
        #
        #    if( len<=0 )
        #        return '';
        #
        #    ret = substr(s, strlen(s), -len);
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #take
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает подстроку заданной длины с указанного символа
        #// len может быть отрицательным числом.
        #static str take(str s, int len, int startFrom = 1)
        #{
        #    str ret = substr(s, startFrom, len);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trim
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// убирает указанные символы в начале и в конце строки
        #// по умолчанию, убирает пробелы, табуляцию и переводы строк
        #static str trim(str s, str ws = ' \t\r\n')
        #{
        #    str ret;
        #    int len = strlen(s);
        #    int fromPos = strnfind(s, ws, 1, len);
        #    int toPos = strnfind(s, ws, len, -len);
        #
        #    if( fromPos && fromPos <= toPos )
        #    {
        #        ret = substr(s, fromPos, toPos - fromPos + 1);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trimEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static str trimEnd(str s, str ws = ' \t\r\n')
        #{
        #    str ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trimIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// удаляет отступ, который применим для каждой строки в многострочном тексте
        #// табуляцию рассматривает как непробельный значащий символ
        #// работает как trimIndent в Kotlin, https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-indent.html
        #// см. также https://openjdk.java.net/jeps/355
        #public static str trimIndent(str s)
        #{
        #    return TextUtil::trimIndent(s);
        #}
      ENDSOURCE
      SOURCE #trimStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static str trimStart(str s, str ws = ' \t\r\n')
        #{
        #    str ret;
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: TextBufferUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #TextBufferUtil
    PROPERTIES
      Name                #TextBufferUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class TextBufferUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #append
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer append(TextBuffer textOrNull, str s)
        #{
        #    TextBuffer text = TextBufferUtil::safeNotNull(textOrNull);
        #
        #    if( s )
        #    {
        #        text.appendText(s);
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendCallStack
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// отображаем как в отладчике
        #public static TextBuffer appendCallStack(TextBuffer text, int skip = 1, container callStack = xSession::xppCallStack())
        #{
        #    int len   = conLen(callStack);
        #    int start = max(2, skip*2+2);
        #    int i;
        #
        #    if( !text )
        #    {
        #        text = new TextBuffer();
        #    }
        #
        #    for( i=start; i<=len; i+=2 )
        #    {
        #        text.appendText(strfmt('\n%1 - line %2', conPeek(callStack, i-1), conPeek(callStack, i)));
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendContainer
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer appendContainer(TextBuffer textOrNull, container con, str sep = ',')
        #{
        #    ConEnumerator ce = ConEnumerator::construct(con);
        #    TextBuffer text = TextBufferUtil::appendEnumerator(textOrNull, ce, sep);
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer appendEnumerator(TextBuffer textOrNull, Enumerator e, str sep = ',')
        #{
        #    TextBuffer text = TextBufferUtil::safeNotNull(textOrNull);
        #    boolean tail;
        #
        #    while( e && e.moveNext() )
        #    {
        #        if( tail && sep )
        #        {
        #            text.appendText(sep);
        #        }
        #
        #        text.appendText(strFmt('%1', e.current()));
        #
        #        tail = true;
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendIfNotEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer appendIfNotEmpty(TextBuffer text, str s)
        #{
        #    if( s && text && text.size() )
        #    {
        #        text.appendText(s);
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendInfolog
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer appendInfolog(TextBuffer textOrNull, InfologData info = infolog.export(), str newLine = '\n')
        #{
        #    TextBuffer              text = TextBufferUtil::safeNotNull(textOrNull);
        #    boolean                 firstLine = true;
        #    SysInfologEnumerator    sysInfologEnumerator;
        #    SysInfologMessageStruct messageStruct;
        #    SysInfoLogStr           message;
        #
        #    if (info)
        #    {
        #        sysInfologEnumerator = SysInfologEnumerator::newData(info);
        #        while (sysInfologEnumerator.moveNext())
        #        {
        #            if (!firstLine && newLine)
        #            {
        #                text.appendText(newline);
        #            }
        #
        #            messageStruct = SysInfologMessageStruct::construct(sysInfologEnumerator.currentMessage());
        #            message = messageStruct.message();
        #            if (message)
        #            {
        #                text.appendText(message);
        #                firstLine = false;
        #            }
        #        }
        #    }
        #
        #    return text;
        #}
        #
      ENDSOURCE
      SOURCE #calcIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// рассчитывает бощий отступ, который может быть применим для каждой строки в многострочном тексте
        #// табуляцию рассматривает как непробельный значащий символ
        #// при расчете игнорирует пустые и пробельные строки (строки, содержащие только пробелы)
        #public static int calcIndent(TextBuffer text)
        #{
        #    int     ident;
        #    int     lineIndent;
        #    int     startPos    = 1;
        #
        #    if( !text )
        #        return 0;
        #
        #    if( !text.size() )
        #        return 0;
        #
        #    ident = maxint();
        #
        #    ///////////////////
        #    if( text.find('< +') )
        #    {
        #        lineIndent = text.matchLen();
        #        startPos = text.matchPos() + text.matchLen();
        #    }
        #
        #    while( text.find('\n *', startPos) )
        #    {
        #        // вторая половина условия срабатывает толкьо для непробельных строк
        #        if( lineIndent < ident && startPos != text.matchPos() )
        #        {
        #            ident = lineIndent;
        #        }
        #
        #        lineIndent = text.matchLen() - 1;
        #        startPos = text.matchPos() + text.matchLen();
        #    }
        #
        #    if( lineIndent < ident && startPos <= text.size() )
        #    {
        #        ident = lineIndent;
        #    }
        #    else if( ident == maxint() )
        #    {
        #        ident = lineIndent;
        #    }
        #
        #    return ident;
        #}
      ENDSOURCE
      SOURCE #changeIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет или удаляет отступ слева у каждой строки в многострочном тексте
        #// пробелы справа каждой строки оставляет как есть
        #// табуляцию рассматривает как непробельный значащий символ
        #// возвращает измененный TextBuffer, не создает копию если TextBuffer уже создан
        #// возвращаемый объект никогда не равен null
        #//
        #// text - исходный текст, в котором метод изменяет отступы
        #// identOffset - положительное значение увеличивает отступ, отрицательное значение уменьшает отступ, нулевое значение не меняет текст
        #//
        #public static TextBuffer changeIndent(TextBuffer textOrNull, int indentOffset)
        #{
        #    TextBuffer text = TextBufferUtil::safeNotNull(textOrNull);
        #
        #    if( text.size() == 0 )
        #        return text;
        #
        #    while( indentOffset < 0 )
        #    {
        #        text.replace('< ', '');
        #        text.replace('\n ', '\n');
        #        indentOffset++;
        #    }
        #
        #    while( indentOffset > 0 )
        #    {
        #        text.insert(' ', 1);
        #        text.replace('\n', '\n ');
        #        indentOffset--;
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #getText
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str getText(TextBuffer text)
        #{
        #    str ret = text ? text.getText() : '';
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #newFrom
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer newFrom(TextBuffer textOrNull)
        #{
        #    TextBuffer text = new TextBuffer();
        #
        #    if( textOrNull && textOrNull.size() )
        #    {
        #        text.setText(textOrNull.getText());
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #newFromStr
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer newFromStr(str s)
        #{
        #    TextBuffer text = new TextBuffer();
        #
        #    if( s )
        #    {
        #        text.appendText(s);
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #safeNotNull
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TextBuffer safeNotNull(TextBuffer text)
        #{
        #    if( !text )
        #    {
        #        text = new TextBuffer();
        #    }
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #trimIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// удаляет общий для всех строк отступ в многострочном тексте
        #// пробелы справа каждой строки оставляет как есть
        #// табуляцию рассматривает как непробельный значащий символ
        #//
        #// работает как trimIndent в Kotlin, https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-indent.html
        #// см. также https://openjdk.java.net/jeps/355
        #public static TextBuffer trimIndent(TextBuffer text)
        #{
        #    TextBuffer  ret     = new TextBuffer();
        #    int         startPos;
        #    int         endPos;
        #    int         len;
        #    int         indent;
        #;
        #    if( text == null )
        #        return ret;
        #
        #    if( text.size() == 0 )
        #        return ret;
        #
        #    // удаляем первую пустую или пробельную строку
        #    if( text.find('< *\n') )
        #        startPos = text.matchPos() + text.matchLen();
        #    else
        #        startPos = 1;
        #
        #    // удаляем последнюю пустую или пробельную строку
        #    if( text.find('\n *>') )
        #        endPos = text.matchPos() - 1;
        #    else
        #        endPos = text.size();
        #
        #    len = endPos - startPos + 1;
        #
        #    if( len <= 0 )
        #        return ret;
        #
        #    if( len == text.size() )
        #        ret = text;
        #    else
        #        ret.setText(text.subStr(startPos, len));
        #
        #    indent = TextBufferUtil::calcIndent(ret);
        #
        #    if( indent == 0 )
        #        return ret;
        #
        #    ret = TextBufferUtil::changeIndent(ret, -indent);
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: TextUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #TextUtil
    PROPERTIES
      Name                #TextUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс оперирует с текстом - многострочной строкой (multiline string)
        #// если текст содержит только одну строку, то класс работает также как и строковые функции
        #class TextUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #after
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находится после первого вхожения подстроки
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::after('ABC-DEF-GH\nIJK-LMN-OP','-') == 'DEF-GH\nLMN-OP'
        #//      TextUtil::after('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str after(str text, str search)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( search == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)^.*?%1', search);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #afterChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после первого вхожения любого из указанных символов characters
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::afterChar('ABC-DEF-GH\nIJK-LMN-OP','-') == 'DEF-GH\nLMN-OP'
        #//      TextUtil::afterChar('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str afterChar(str text, str characters)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( characters == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)^.*?[%1]', characters);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #afterLast
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после последнего вхожения подстроки
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::afterLast('ABC-DEF-GH\nIJK-LMN-OP','-') == 'GH\nOP'
        #//      TextUtil::afterLast('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str afterLast(str text, str search)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( search == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)^.*%1', search);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #afterLastChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после последнего вхожения любого из указанных символов characters
        #// возвращает исходную строку, если ни одного вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::afterLastChar('ABC-DEF-GH\nIJK-LMN-OP','-=') == 'GH\nOP'
        #//      TextUtil::afterLastChar('ABC-DEF-GH\nIJK-LMN-OP',',')  == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str afterLastChar(str s, str characters)
        #{
        #    str pattern;
        #
        #    if( s == '' )
        #        return s;
        #
        #    if( characters == '' )
        #        return s;
        #
        #    pattern = strfmt(@'(?m)^.*[%1]', characters);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #appendEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет строку в конец каждой подстроки текста
        #//
        #// пример:
        #//      TextUtil::appendEnd('ABC-DEF-GH\nIJK-LMN-OP',';') == 'ABC-DEF-GH;\nIJK-LMN-OP;'
        #//      TextUtil::appendEnd('ABC-DEF-GH',            ';') == 'ABC-DEF-GH;'
        #//      TextUtil::appendEnd('',                      ';') == ';'
        #//
        #public static str appendEnd(str text, str start)
        #{
        #    if( text == '' )
        #        return start;
        #
        #    if( start == '' )
        #        return text;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, @'(?m)$', start);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #appendStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет строку в начало каждой подстроки текста
        #//
        #// пример:
        #//      TextUtil::appendStart('ABC-DEF-GH\nIJK-LMN-OP','* ') == '* ABC-DEF-GH\n* IJK-LMN-OP'
        #//      TextUtil::appendStart('ABC-DEF-GH',            '* ') == '* ABC-DEF-GH'
        #//      TextUtil::appendStart('',                      '* ') == '* '
        #//
        #public static str appendStart(str text, str end)
        #{
        #    if( text == '' )
        #        return end;
        #
        #    if( end == '' )
        #        return text;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, @'(?m)^', end);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #before
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после первого вхожения подстроки
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::before('ABC-DEF-GH\nIJK-LMN-OP','-') == 'ABC\nIJK'
        #//      TextUtil::before('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str before(str text, str search)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( search == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)%1.*?$', search);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #beforeChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после первого вхожения любого из указанных символов characters
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::beforeChar('ABC-DEF-GH\nIJK-LMN-OP','=-') == 'ABC\nIJK'
        #//      TextUtil::beforeChar('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str beforeChar(str text, str characters)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( characters == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)[%1].*?$', characters);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #beforeLast
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после последнего вхожения подстроки
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::beforeLast('ABC-DEF-GH\nIJK-LMN-OP','-') == 'ABC-DEF\nIJK-LMN'
        #//      TextUtil::beforeLast('ABC-DEF-GH\nIJK-LMN-OP',',') == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str beforeLast(str text, str search)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( search == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)%1(?!.*%1).*$', search);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #beforeLastChar
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст с подстроками, которые находятся после последнего вхожения любого из указанных символов characters
        #// возвращает исходный текст, если вхождения не найдено
        #//
        #// пример:
        #//      TextUtil::beforeLastChar('ABC-DEF-GH\nIJK-LMN-OP','=-') == 'ABC-DEF\nIJK-LMN'
        #//      TextUtil::beforeLastChar('ABC-DEF-GH\nIJK-LMN-OP',',')  == 'ABC-DEF-GH\nIJK-LMN-OP'
        #//
        #static str beforeLastChar(str text, str characters)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( characters == '' )
        #        return text;
        #
        #    pattern = strfmt(@'(?m)[%1](?!.*[%1]).*$', characters);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #calcIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// рассчитывает отступ, который применим для каждой строки в многострочном тексте
        #// табуляцию рассматривает как один непробельный значащий символ
        #public static int calcIndent(str text)
        #{
        #    int indent = maxint();
        #    int i;
        #
        #    System.Text.RegularExpressions.Match            rMatch;
        #    System.Text.RegularExpressions.GroupCollection  rGroupCollection;
        #    System.Text.RegularExpressions.Group            rGroup;
        #
        #    if( text == '' )
        #        return 0;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    rMatch = System.Text.RegularExpressions.Regex::Match(text, @'^(\r?\n)*(?<indent> *).*((\r?\n)+( *|\k<indent>.*))*$');
        #    if( rMatch && rMatch.get_Success() )
        #    {
        #        rGroupCollection = rMatch.get_Groups();
        #        rGroup = rGroupCollection.get_Item('indent');
        #        i = rGroup.get_Length();
        #        indent = min(indent, i);
        #    }
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    if( indent == maxint() )
        #        return 0;
        #
        #    return indent;
        #}
      ENDSOURCE
      SOURCE #callStack
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// отображаем как в отладчике
        #public static str callStack(int skip = 2, container callStack = xSession::xppCallStack())
        #{
        #    str ret = TextBufferUtil::appendCallStack(null, skip, callStack).getText();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #changeIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет или удаляет отступ слева у каждой строки в многострочном тексте
        #// пробелы справа каждой строки оставляет как есть
        #// табуляцию рассматривает как непробельный значащий символ
        #//
        #// text - исходный текст, в котором метод изменяет отступы
        #// identOffset - положительное значение увеличивает отступ, отрицательное значение уменьшает отступ, нулевое значение не меняет текст
        #//
        #public static str changeIndent(str text, int indentOffset)
        #{
        #    str pattern;
        #    str replacement;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( indentOffset == 0 )
        #        return text;
        #
        #    if( indentOffset < 0 )
        #    {
        #        pattern = strfmt('(?m)^ {1,%1}', -indentOffset);
        #        replacement = '';
        #    }
        #    else
        #    {
        #        pattern = '(?m)^';
        #        replacement = strrep(' ', indentOffset);
        #    }
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, replacement);
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #drop
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// в каждой строке многострочного текста:
        #// = удаляет первые n символов, если n > 0
        #// = удаляет последние n символов, если n < 0
        #// возвращает исходный текст, если n == 0
        #public static str drop(str text, int n)
        #{
        #    if( n > 0 )
        #        return TextUtil::dropStart(text, n);
        #
        #    return TextUtil::dropEnd(text, -n);
        #}
      ENDSOURCE
      SOURCE #dropEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// в каждой строке многострочного текста:
        #// = удаляет последние n символов, если n < 0
        #// возвращает исходный текст, если n => 0
        #public static str dropEnd(str text, int n)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( n >= 0 )
        #        return text;
        #
        #    pattern = strfmt('(?m).{1,%1}$', -n);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #dropStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// в каждой строке многострочного текста:
        #// удаляет первые n символов, если n > 0
        #// возвращает исходный текст, если n <= 0
        #public static str dropStart(str text, int n)
        #{
        #    str pattern;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( n <= 0 )
        #        return text;
        #
        #    pattern = strfmt('(?m)^.{1,%1}', n);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    text = System.Text.RegularExpressions.Regex::Replace(text, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return text;
        #}
      ENDSOURCE
      SOURCE #infolog
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str infolog(InfologData info = infolog.export(), str newLine = '\n')
        #{
        #    str ret = TextBufferUtil::appendInfolog(null, info, newLine).getText();
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #line
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает n-ую строку из многострочного текста
        #public static str line(str s, int n)
        #{
        #    str ret = strline(s, n);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #lines
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static System.String[] lines(str text)
        #{
        #    System.String[] ret;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ret = System.Text.RegularExpressions.Regex::Split(text, '\n');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #padLeft
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ слева до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #public static str padLeft(str text, int length, char char = ' ')
        #{
        #    TextBuffer                              ret = new TextBuffer();
        #    str                                     s;
        #    int                                     n;
        #    System.Char                             c;
        #    System.String                           ss;
        #    System.Text.RegularExpressions.Match    rMatch;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( char == '' )
        #        return text;
        #
        #    if( length <= 0 )
        #        return text;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    c = System.Char::Parse(char);
        #
        #    rMatch = System.Text.RegularExpressions.Regex::Match(text, @'(?m)^.*$');
        #    while( rMatch && rMatch.get_Success() )
        #    {
        #        ss = rMatch.get_Value();
        #        s = ss.PadLeft(length, c);
        #
        #        if( n )
        #            ret.appendText('\n');
        #
        #        ret.appendText(s);
        #
        #        rMatch = rMatch.NextMatch();
        #        ++n;
        #    }
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return ret.getText();
        #}
      ENDSOURCE
      SOURCE #padRight
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет указанный символ справа до нужной длины
        #// если строка уже длиннее, то ничего не делает. Поэтому результат может быть длиннее указанной длины.
        #static str padRight(str text, int length, char char = ' ')
        #{
        #    TextBuffer  ret = new TextBuffer();
        #    str         s;
        #
        #    System.Char                     c;
        #    System.String                   ss;
        #    System.String[]                 ssa;
        #    System.Collections.IEnumerator  se;
        #
        #    if( text == '' )
        #        return text;
        #
        #    if( char == '' )
        #        return text;
        #
        #    if( length <= 0 )
        #        return text;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    ssa = TextUtil::lines(text);
        #    se  = ssa.GetEnumerator();
        #    while( se.MoveNext() )
        #    {
        #        if( ret.size() )
        #        {
        #            ret.appendText('\n');
        #        }
        #        else
        #        {
        #            c = System.Char::Parse(char);
        #        }
        #
        #        ss = se.get_Current();
        #        s  = ss.PadRight(length, c);
        #
        #        ret.appendText(s);
        #    }
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return ret.getText();
        #}
      ENDSOURCE
      SOURCE #strLeft
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст, в котором каждая строка содержит не более заданной длины справа
        #static str strLeft(str s, int len)
        #{
        #    str pattern;
        #
        #    if( s == '' )
        #        return s;
        #
        #    if( len > 0 )
        #        pattern = strfmt(@'(?m)(?<=.{%1}).+', len);
        #    else
        #        pattern = strfmt(@'(?m).+', len);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #strRight
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает текст, в котором каждая строка содержит не более заданной длины слева
        #static str strRight(str s, int len)
        #{
        #    str pattern;
        #
        #    if( s == '' )
        #        return s;
        #
        #    if( len > 0 )
        #        pattern = strfmt(@'(?m).+(?=.{%1})', len);
        #    else
        #        pattern = strfmt(@'(?m).+', len);
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    s = System.Text.RegularExpressions.Regex::Replace(s, pattern, '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #toArray
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// TODO
        #public static container toArray(str s)
        #{
        #    container ret = StrUtil::splitChar(s, '\n');
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container toCon(str s)
        #{
        #    container ret = StrUtil::splitChar(s, '\n');
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// TODO
        #public static container toList(str s)
        #{
        #    container ret = StrUtil::splitChar(s, '\n');
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toMap
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// TODO
        #public static container toMap(str s, int startLineNum = 1)
        #{
        #    container ret = StrUtil::splitChar(s, '\n');
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// TODO
        #public static container toSet(str s)
        #{
        #    container ret = StrUtil::splitChar(s, '\n');
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trim
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// убирает указанные символы в начале и в конце всех строк в многострочном тексте
        #// по умолчанию, убирает пробелы, табуляцию и переводы строк
        #static str trim(str s, str ws = ' \t')
        #{
        #    str ret;
        #    int len = strlen(s);
        #    int fromPos = strnfind(s, ws, 1, len);
        #    int toPos = strnfind(s, ws, len, -len);
        #
        #    if( fromPos && fromPos <= toPos )
        #    {
        #        ret = substr(s, fromPos, toPos - fromPos + 1);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trimBlankLines
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static str trimBlankLines(str s, str ws = ' \t\r\n')
        #{
        #    str ret;
        #    //TODO
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trimEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static str trimEnd(str s, str ws = ' \t')
        #{
        #    str ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #trimIndent
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// удаляет отступ, который применим для каждой строки в многострочном тексте
        #// табуляцию рассматривает как непробельный значащий символ
        #// работает как trimIndent в Kotlin, https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-indent.html
        #// см. также https://openjdk.java.net/jeps/355
        #public static str trimIndent(str s)
        #{
        #    int indent;
        #
        #    if( s == '' )
        #        return s;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    // удаляем первую и последнюю пустые или пробельные строки
        #    s = System.Text.RegularExpressions.Regex::Replace(s, '^ *\n|\n *$', '');
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    indent = TextUtil::calcIndent(s);
        #
        #    s = TextUtil::changeIndent(s, -indent);
        #
        #    return s;
        #}
      ENDSOURCE
      SOURCE #trimStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #//TODO
        #public static str trimStart(str s, str ws = ' \t')
        #{
        #    str ret;
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: RecordUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #RecordUtil
    PROPERTIES
      Name                #RecordUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class RecordUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #cacheLookup
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static RecordCacheLevel cacheLookup(Common rec)
        #{
        #    RecordCacheLevel ret = RecordUtil::dictTable(rec).cacheLookup();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #clone
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common clone(Common orig, RefTableId expectedTableId = 0)
        #{
        #    Common clone;
        #
        #    if( expectedTableId && expectedTableId != orig.TableId && expectedTableId != RecordUtil::commonTableId() )
        #    {
        #        throw error(strFmt('%1: Не совпадают TableId. Ожидается %2, фактическое значение %3',
        #                        funcname(),
        #                        SysDictTable::construct(expectedTableId).toString(),
        #                        SysDictTable::construct(orig.TableId).toString()
        #        ));
        #    }
        #
        #    clone.data(orig);
        #
        #    return clone;
        #}
      ENDSOURCE
      SOURCE #commonRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common commonRecord()
        #{
        #    Common rec;
        #
        #    return rec;
        #}
      ENDSOURCE
      SOURCE #commonTableId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static TableId commonTableId()
        #{
        #    // Common rec;
        #    //
        #    // return rec.TableId;
        #
        #    return 65535;
        #}
      ENDSOURCE
      SOURCE #dictTable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// всегда возвращает not nullable объект. Полезно в выражениях
        #public static DictTable dictTable(Common rec)
        #{
        #    DictTable dt = new DictTable(rec.TableId);
        #
        #    if( !dt )
        #    {
        #        dt = new DictTable(RecordUtil::commonTableId());
        #    }
        #
        #    return dt;
        #}
      ENDSOURCE
      SOURCE #findFromUniqueIndexFields
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// ищет по значениям из полей, которые входят в уникальный индекс
        #public static Common findFromUniqueIndexFields(Common rec)
        #{
        #    KeyData     keyData     = SysDictTable::getKeyData(rec).pack();
        #    Common      ret         = SysDictTable::findFromKeyData(rec.TableId, keyData);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getFieldValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype getFieldValue(Common record, FieldId fieldid)
        #{
        #    // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про поля в записи
        #    anytype value = record.(fieldid);
        #
        #    return value;
        #}
      ENDSOURCE
      SOURCE #getInfo
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает строку, которая содержит значения указанных в контейнере, ключевых и обязательных полей
        #// каждое поле задействовано в контейнере только один раз
        #//
        #// порядок возвращаемых значений:
        #// сначала идут значения из полей, которые указаны пользователем,
        #// затем полей из уникальных индексов, затем обязательные поля
        #//
        #// как правило, метод используется в информационных сообщениях
        #//
        #// пример использования:
        #// str s = SysDictTable::getInfo(rContractTable, [fieldnum(rContractTable,CurrencyCode)]);
        #//
        #// в стандартной Аксапте уникальный индекс состоит из полей RContractPartnerType, RContractCode, RContractAccount
        #// результат будет похож на: "RContractTable[CurrencyCode, RContractPartnerType, RContractCode, RContractAccount]"
        #public static str getInfo(
        #    Common      rec,
        #    anytype     fieldIdCollection       = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     uniqueCollection        = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     mandatoryCollection     = null) // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #{
        #    str valueInfo = RecordUtil::getValuesInfo(rec, fieldIdCollection, uniqueCollection, mandatoryCollection);
        #    str ret = strFmt('%1[%2]', tableId2name(rec.TableId), valueInfo);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getValues
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает контейнер, который содержит значения указанных в контейнере, ключевых и обязательных полей
        #// каждое поле задействовано в контейнере только один раз
        #//
        #// порядок возвращаемых значений:
        #// сначала идут значения из полей, которые указаны пользователем,
        #// затем полей из уникальных индексов, затем обязательные поля
        #//
        #// как правило, метод используется в unit-тестах
        #//
        #// пример использования:
        #// container values = SysDictTable::getValues(rContractTable, [fieldnum(rContractTable,CurrencyCode)]);
        #//
        #// в стандартной Аксапте уникальный индекс состоит из полей RContractPartnerType, RContractCode, RContractAccount
        #// контейнер values будет содержать 4 значения: [CurrencyCode, RContractPartnerType, RContractCode, RContractAccount]
        #public static container getValues(
        #    Common      rec,
        #    anytype     fieldIdCollection       = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     uniqueCollection        = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     mandatoryCollection     = null) // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #{
        #    Set         fields  = new Set(Types::Integer);
        #    container   ret;
        #
        #    void appendFrom(anytype collection)
        #    {
        #        FieldId fieldId;
        #        Enumerator e = collection ? EnumeratorUtil::getEnumerator(collection) : null;
        #
        #        while( e && e.moveNext() )
        #        {
        #            fieldId = AnytypeUtil::asInt(e.current());
        #
        #            if( fieldId && fields.add(fieldId) )
        #            {
        #                ret += rec.(fieldId);
        #            }
        #        }
        #    }
        #
        #    appendFrom(fieldIdCollection);
        #    appendFrom(uniqueCollection ? uniqueCollection : SysDictTable::getUniqueIndexFields(rec.TableId));
        #    appendFrom(mandatoryCollection ? mandatoryCollection : SysDictTable::getMandatoryFields(rec.TableId));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getValuesInfo
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает контейнер, который содержит значения указанных в контейнере, ключевых и обязательных полей
        #// каждое поле задействовано в контейнере только один раз
        #//
        #// порядок возвращаемых значений:
        #// сначала идут значения из полей, которые указаны пользователем,
        #// затем полей из уникальных индексов, затем обязательные поля
        #//
        #// как правило, метод используется в unit-тестах
        #//
        #// пример использования:
        #// container values = SysDictTable::getValuesInfo(rContractTable, [fieldnum(rContractTable,CurrencyCode)]);
        #//
        #// в стандартной Аксапте уникальный индекс состоит из полей RContractPartnerType, RContractCode, RContractAccount
        #// контейнер values будет содержать 4 значения: [CurrencyCode, RContractPartnerType, RContractCode, RContractAccount]
        #public static str getValuesInfo(
        #    Common      rec,
        #    anytype     fieldIdCollection       = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     uniqueCollection        = null, // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #    anytype     mandatoryCollection     = null) // Integer, Container, List, Set, Map, implements Enumerable or getEnumerator method
        #{
        #    Set fields = new Set(Types::Integer);
        #    TextBuffer text;
        #
        #    void appendFrom(anytype collection)
        #    {
        #        FieldId fieldId;
        #        DictField df;
        #        str info;
        #        Enumerator e = EnumeratorUtil::getEnumerator(collection);
        #
        #        while( e && e.moveNext() )
        #        {
        #            fieldId = AnytypeUtil::asInt(e.current());
        #
        #            if( fieldId && fields.add(fieldId) )
        #            {
        #                df = new DictField(rec.TableId, fieldId);
        #                info = strfmt("%1=%2", df.label(), rec.(df.id()));
        #
        #                text = TextBufferUtil::appendIfNotEmpty(text, ', ');
        #                text = TextBufferUtil::append(text, info);
        #            }
        #        }
        #    }
        #
        #    appendFrom(fieldIdCollection);
        #    appendFrom(uniqueCollection ? uniqueCollection : SysDictTable::getUniqueIndexFields(rec.TableId));
        #    appendFrom(mandatoryCollection ? mandatoryCollection : SysDictTable::getMandatoryFields(rec.TableId));
        #
        #    return TextBufferUtil::getText(text);
        #}
      ENDSOURCE
      SOURCE #hasTableAccess
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean hasTableAccess(Common rec, AccessType neededAccessType)
        #{
        #    AccessType accessType = RecordUtil::dictTable(rec).rights();
        #    boolean ret = (accessType >= neededAccessType);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isCommon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isCommon(Common record)
        #{
        #    boolean ret = (record.TableId && record.TableId == RecordUtil::commonTableId());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true, если таблица не содержит ни одной записи
        #// возвращает false, если хотя бы одна запись есть.
        #//
        #// метод особенно полезен для временных таблиц
        #public static boolean isEmpty(Common record)
        #{
        #    Common buf = RecordUtil::makeRecord(record.TableId);
        #
        #    if( record.isTmp() )
        #    {
        #        buf.setTmp();
        #        buf.setTmpData(record);
        #    }
        #
        #    select firstOnly buf;
        #
        #    return (buf.RecId == 0);
        #}
      ENDSOURCE
      SOURCE #isNull
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isNull(Common record)
        #{
        #    boolean ret = (record.TableId && record.TableId == RecordUtil::commonTableId());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #makeRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common makeRecord(TableId tableId = 0)
        #{
        #    Common record;
        #    DictTable dt;
        #
        #    if( tableId )
        #    {
        #        dt = new DictTable(tableId);
        #        if( dt )
        #        {
        #            record = dt.makeRecord();
        #        }
        #    }
        #
        #    return record;
        #}
      ENDSOURCE
      SOURCE #makeRecordIfCommon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common makeRecordIfCommon(Common record, TableId tableId)
        #{
        #    if( RecordUtil::isCommon(record) )
        #    {
        #        record = RecordUtil::makeRecord(tableId);
        #    }
        #
        #    return record;
        #}
      ENDSOURCE
      SOURCE #match
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// проверяет есть ли вхожение паттерна в какое-нибудь поле
        #// проверку выполняет рекурсивно, если есть поля-контейнеры
        #public static boolean match(
        #    str         pattern,
        #    Common      record,
        #    boolean     includeSystemFields     = false)
        #{
        #    SysDictTable    sysDictTable    = new SysDictTable(record.TableId);
        #    Set             fields          = sysDictTable.fields();
        #    SetEnumerator   fe              = fields ? fields.getEnumerator() : null;
        #    SysDictField    field;
        #    Any             value;
        #;
        #    while( fe && fe.moveNext() )
        #    {
        #        field = fe.current();
        #        if( !includeSystemFields && field.isSystem() )
        #            continue;
        #
        #        switch( field.type() )
        #        {
        #            case Types::String:
        #            case Types::RString:
        #            case Types::VarString:
        #                value = Any::field(record, field.id());
        #                if( match(pattern, value.asString()) )
        #                    return true;
        #                break;
        #
        #            case Types::Container:
        #                value = Any::field(record, field.id());
        #                if( ConUtil::match(pattern, value.asContainer()) )
        #                    return true;
        #                break;
        #
        #            case Types::Record:
        #                value = Any::field(record, field.id());
        #                if( RecordUtil::match(pattern, value.asRecord()) )
        #                    return true;
        #                break;
        #
        #            default:
        #                break;
        #        }
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #setFieldValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype setFieldValue(Common record, fieldId fieldid, anytype value)
        #{
        #    // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про поля в записи
        #    record.(fieldid) = value;
        #
        #    return value;
        #}
      ENDSOURCE
      SOURCE #sysDictTable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// всегда возвращает not nullable объект. Полезно в выражениях
        #public static SysDictTable sysDictTable(Common rec)
        #{
        #    SysDictTable dt = new SysDictTable(rec.TableId);
        #
        #    if( !dt )
        #    {
        #        new SysDictTable(RecordUtil::commonTableId());
        #    }
        #
        #    return dt;
        #}
      ENDSOURCE
      SOURCE #toCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container toCon(Common rec)
        #{
        #    // первый элемент - для совместимости с Global:buf2con(), и Global::con2Buf()
        #    container ret = [rec.TableId, rec];
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #validateAndDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateAndDelete(Common buf)
        #{
        #    if( !buf.validateDelete() )
        #    {
        #        return false;
        #    }
        #
        #    buf.delete();
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateAndDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateAndDeleteOrThrow(Common buf)
        #{;
        #    RecordUtil::validateDeleteOrThrow(buf);
        #    buf.delete();
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #validateAndInsert
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateAndInsert(Common buf)
        #{
        #    if( !buf.validateWrite() )
        #    {
        #        return false;
        #    }
        #
        #    buf.insert();
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateAndInsertOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateAndInsertOrThrow(Common buf)
        #{;
        #    RecordUtil::validateWriteOrThrow(buf);
        #    buf.insert();
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateAndUpdate(Common buf)
        #{
        #    if( !buf.validateWrite() )
        #    {
        #        return false;
        #    }
        #
        #    buf.update();
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdateOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateAndUpdateOrThrow(Common buf)
        #{;
        #    RecordUtil::validateWriteOrThrow(buf);
        #    buf.update();
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #validateAndWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateAndWrite(Common buf)
        #{
        #    if( !buf.validateWrite() )
        #    {
        #        return false;
        #    }
        #
        #    buf.write();
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateAndWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateAndWriteOrThrow(Common buf)
        #{;
        #    RecordUtil::validateWriteOrThrow(buf);
        #    buf.write();
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateDelete(Common buf)
        #{
        #    if( !buf.validateDelete() )
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateDeleteOrThrow(Common buf)
        #{
        #    if( !buf.validateDelete() )
        #    {
        #        throw error(strFmt('Delete validation error for %1', RecordUtil::getInfo(buf)));
        #    }
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean validateWrite(Common buf)
        #{
        #    if( !buf.validateWrite() )
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common validateWriteOrThrow(Common buf)
        #{
        #    if( !buf.validateWrite() )
        #    {
        #        throw error(strFmt('Write validation error for %1', RecordUtil::getInfo(buf)));
        #    }
        #
        #    return buf;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRecordList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRecordList
    PROPERTIES
      Name                #SysRecordList
      Extends             #List
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #addEnd
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public anytype addEnd(anytype value)
        #{
        #    Common buf = this.assignable(value);
        #
        #    if( this.isAssignableBuf(buf) )
        #    {
        #        buf = super(value);
        #        this.tableIds().add(buf.TableId);
        #    }
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #addStart
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public anytype addStart(anytype value)
        #{
        #    Common buf = this.assignable(value);
        #
        #    if( this.isAssignableBuf(buf) )
        #    {
        #        buf = super(value);
        #        this.tableIds().add(buf.TableId);
        #    }
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #appendEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает число добавленных элементов
        #public int appendEnumerator(Enumerator e, int maxElements = 0)
        #{
        #    int elements;
        #    Common buf;
        #
        #    while( e && e.moveNext() && (maxElements == 0 || elements <= maxElements)  )
        #    {
        #        buf = this.addEnd(e.current());
        #        elements += this.isAssignableBuf(buf);
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #appendList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// @override
        #public void appendList(List list)
        #{
        #    if( list &&
        #        confind([Types::Record, Types::Integer, Types::String, Types::RString, Types::VarString], list.typeId()) )
        #    {
        #        this.appendEnumerator(list.getEnumerator());
        #    }
        #}
      ENDSOURCE
      SOURCE #appendMarked
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет все отмеченные на форме записи
        #// возвращает число добавленных элементов
        #public int appendMarked(FormDataSource fds, int maxElements = 0)
        #{
        #    int elements;
        #    common buf = fds ? fds.getFirst(1) : null;
        #
        #    while( fds && buf && (maxElements == 0 || elements <= maxElements) )
        #    {
        #        buf = this.addEnd(buf);
        #        elements = this.isAssignableBuf(buf);
        #
        #        buf = fds.getNext();
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #appendQuery
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет в список datasource из query, которые получат значения в выборке из базы
        #// Получится список неинициализированых буферов
        #// возвращает число добавленных элементов
        #public int appendQuery(Query q, int maxElements = 0)
        #{
        #    int elements;
        #    QueryBuildDataSource qbds;
        #    int qbdsId;
        #
        #    if( q )
        #    {
        #        qbdsId = q.nextUniqueId();
        #        while( qbdsId && (maxElements == 0 || elements <= maxElements) )
        #        {
        #            qbds = q.dataSourceUniqueId(qbdsId);
        #
        #            if (qbds &&
        #                qbds.table() &&
        #                qbds.enabled() &&
        #                confind([JoinMode::InnerJoin, JoinMode::OuterJoin], qbds.joinMode()))
        #            {
        #                elements += this.addEnd(qbds.table());
        #            }
        #
        #            qbdsId = q.nextUniqueId();
        #        }
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #appendRecIdEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет табличные буфера с указанными RecId
        #// возвращает число добавленных элементов
        #public int appendRecIdEnumerator(TableId tableId, Enumerator e, boolean selectForUpdate = false, int maxElements = 0)
        #{
        #    int       elements;
        #    RecId     recId;
        #    common    buf;
        #
        #    while( e && e.moveNext() && (maxElements == 0 || elements <= maxElements)  )
        #    {
        #        recId = AnytypeUtil::asRecId(e.current());
        #        if( recId )
        #        {
        #            buf = RecordUtil::commonRecord(); // на случай, если в списке табличные буфера разного типа
        #            buf.selectForUpdate(selectForUpdate);
        #            select firstonly buf where buf.RecId == recId;
        #
        #            buf = this.addEnd(e.current());
        #            elements += this.isAssignableBuf(buf);
        #        }
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #appendSelect
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет все записи из табличного буфера, который был заполнен командой select
        #// возвращает число добавленных элементов
        #//
        #// пример:
        #//
        #// {
        #//     CustTable ct;
        #//     select ct where ct.Name like 'Micro*';
        #//     SysRecordList::fromList(ct);
        #// }
        #//
        #public int appendSelect(Common selectedBuf, int maxElements = 0)
        #{
        #    int elements;
        #    Common buf;
        #
        #    while( selectedBuf && (maxElements == 0 || elements <= maxElements)  )
        #    {
        #        buf = this.addEnd(selectedBuf);
        #        elements += this.isAssignableBuf(buf);
        #
        #        next selectedBuf;
        #    }
        #
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #assignable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Common assignable(anytype value)
        #{
        #    Common buf = AnytypeUtil::toBuf(value);
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс содержит список записей из таблиц *разного типа* (в том числе могут быть типа Common)
        #// для записей всех типов вполне успешно срабатывают табличные методы initValue, validateWrite, write, insert, update и т.д.
        #// класс позволяет единообразно обслуживать записи из списка
        #//
        #// класс во многом похож на RecordLinkList. отличия:
        #// * работает предсказуемым образом
        #// * гарантировано держит все записи в памяти
        #// * позволяет создавать несколько энумераторов и делать вложенные циклы по одному списку
        #// * не вмешивается и не копирует записи, поэтому внутренние флаги и проперти в записи сохраняются.
        #//   это значит что:
        #//   * методы update получат правильный флаг forupdate
        #//   * оператор next будет правильно работать с записями, которые выбраны из списка
        #//   * запись из map останется записью из map
        #// * методы pack/unpack позволяют эффективно передавать значения между клиентом и сервером (внутренние флаги и проперти сбрасываются)
        #// * методы validateDelete и validateWrite сначала проверят все записи, лишь потом выполнят действия для всех записей
        #// * реализованы методы merge и appendList и другие методы базового класса List
        #//
        #// по сравнению с RecordLinkList этот класс не позволяет:
        #// * получить доступ к записи по индексу (см. второй параметр в RecordLinkList.get)
        #// * перейти к предыдущей записи в цикле (см. метод RecordLinkList.prev)
        #// * удалять элементы из списка
        #//
        #// TODO добавить выборку табличных буферов из QueryRun
        #class SysRecordList extends List
        #{
        #    Set tableIds;
        #}
      ENDSOURCE
      SOURCE #deleteDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет удаление без валиадции.
        #// Может, стоит использовать метод validateAndDelete?
        #public SysRecordList deleteDatabase()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( le && le.moveNext() )
        #    {
        #        buf = le.current();         // строка для отладчика
        #        buf.delete();
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #hasTableAccess
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean hasTableAccess(AccessType neededAccessType)
        #{
        #    AccessType accessType = this.rights();
        #    boolean ret = (accessType >= neededAccessType);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет initValue для буферов с пустым recId.
        #public void initValue()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( le && le.moveNext() )
        #    {
        #        buf = le.current();
        #        if( !buf.RecId )
        #        {
        #            buf.initValue();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #insertDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет вставку без валиадции для буферов с пустым recId.
        #// Может, стоит использовать метод validateAndInsert?
        #public SysRecordList insertDatabase()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( le && le.moveNext() )
        #    {
        #        buf = le.current();
        #        if( !buf.RecId )
        #        {
        #            buf.insert();
        #        }
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #isAssignableBuf
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean isAssignableBuf(Common buf)
        #{
        #    boolean ret = buf.TableId && !RecordUtil::isCommon(buf);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void new(Types _type = Types::Record)
        #{
        #    anytype contract = Debug::assert(_type == Types::Record);
        #
        #    super(Types::Record);
        #}
      ENDSOURCE
      SOURCE #rights
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает минимальный уровень доступа
        #// пустой список записей имеет максимальный уровень доступа
        #public AccessType rights()
        #{
        #    AccessType ret = AccessType::Delete;
        #    AccessType rights;
        #
        #    SetEnumerator se = this.tableIds().getEnumerator();
        #    TableId tableId;
        #
        #    while( se && se.moveNext() )
        #    {
        #        tableId = se.current();
        #        rights = new DictTable(tableId).rights(); // так мы получаем права с учетом свойства таблицы maxAccessMode
        #        ret = min(ret, rights);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #selectForUpdate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// устанавливает режим выборки для всех табличных буферов в true, если selectForUpdate == true
        #// не изменяет флаг у табличных буферов, если selectForUpdate == false
        #public void selectForUpdate(boolean selectForUpdate = false)
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( selectForUpdate && le && le.moveNext() )
        #    {
        #        buf = le.current();
        #        buf.selectForUpdate(selectForUpdate);
        #    }
        #}
      ENDSOURCE
      SOURCE #setTmp
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// сделать все записи временными
        #public void setTmp()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( le && le.moveNext() )
        #    {
        #        buf = le.current();         // строка для отладчика
        #        buf.setTmp();
        #    }
        #}
      ENDSOURCE
      SOURCE #tableIds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Set tableIds()
        #{
        #    if( !tableIds )
        #        tableIds = new Set(Types::Integer);
        #
        #    return tableIds;
        #}
      ENDSOURCE
      SOURCE #updateDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет обновление без валиадции для буферов с заполненным recId.
        #// Может, стоит использовать метод validateAndupdate?
        #public SysRecordList updateDatabase()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( le && le.moveNext() )
        #    {
        #        buf = le.current();
        #        if( buf.RecId )
        #        {
        #            buf.update();
        #        }
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateAndDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех записей,
        #// а затем, если валидация успешна, удаляет
        #public boolean validateAndDelete()
        #{
        #    boolean valid = this.validateDelete();
        #
        #    if( valid )
        #    {
        #        this.deleteDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateAndDeleteOrThrow()
        #{
        #    this.validateDeleteOrThrow();
        #    this.deleteDatabase();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateAndInsert
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех еще не вставленных записей (recId == 0),
        #// а затем, если валидация успешна, вставку еще не вставленных записей
        #public boolean validateAndInsert()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.insertDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndInsertOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateAndInsertOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.insertDatabase();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех уже вставленных записей (recId != 0),
        #// а затем, если валидация успешна, update уже вставленных записей
        #public boolean validateAndUpdate()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.updateDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdateOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateAndUpdateOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.writeDatabase();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateAndWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех записей,
        #// а затем, если валидация успешна, запись всех буферов (Аксапта сама разбирается нужно вставить или обновить буфер)
        #public boolean validateAndWrite()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.writeDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateAndWriteOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.writeDatabase();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean validateDelete()
        #{
        #    boolean valid = true;
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( valid && le && le.moveNext() )
        #    {
        #        buf = le.current();         // строка для отладчика
        #        valid = buf.validateDelete();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateDeleteOrThrow()
        #{
        #    if( !this.validateDelete() )
        #    {
        #        throw error(strFmt('Delete validation error in %1', funcname()));
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean validateWrite()
        #{
        #    boolean valid = true;
        #    ListEnumerator le = this.getEnumerator();
        #    Common buf;
        #
        #    while( valid && le && le.moveNext() )
        #    {
        #        buf = le.current();         // строка для отладчика
        #        valid = buf.validateWrite();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysRecordList validateWriteOrThrow()
        #{
        #    if( !this.validateWrite() )
        #    {
        #        throw error(strFmt('Write validation error in %1', funcname()));
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #writeDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет запись без валиадции всех буферов.
        #// Может, стоит использовать метод validateAndWrite?
        #public SysRecordList writeDatabase()
        #{
        #    ListEnumerator le = this.getEnumerator();
        #    Common rec;
        #
        #    while( le && le.moveNext() )
        #    {
        #        rec = le.current(); // строка для отладчика
        #        rec.write();
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList construct()
        #{
        #    SysRecordList recordList = new SysRecordList(Types::Record);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// табличные буфера как параметры, чтобы не потерять внутренние флаги
        #// такие как SelectForUpdate, formDataSource, был сделан select, isTmp
        #public static SysRecordList fromBuf(
        #    Common buf1 = null,
        #    Common buf2 = null,
        #    Common buf3 = null,
        #    Common buf4 = null,
        #    Common buf5 = null,
        #    Common buf6 = null,
        #    Common buf7 = null,
        #    Common buf8 = null,
        #    Common buf9 = null,
        #    Common buf10 = null,
        #    Common buf11 = null,
        #    Common buf12 = null)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    if( !prmisdefault(buf1) ) recordList.addEnd(buf1);
        #    if( !prmisdefault(buf2) ) recordList.addEnd(buf2);
        #    if( !prmisdefault(buf3) ) recordList.addEnd(buf3);
        #    if( !prmisdefault(buf4) ) recordList.addEnd(buf4);
        #    if( !prmisdefault(buf5) ) recordList.addEnd(buf5);
        #    if( !prmisdefault(buf6) ) recordList.addEnd(buf6);
        #    if( !prmisdefault(buf7) ) recordList.addEnd(buf7);
        #    if( !prmisdefault(buf8) ) recordList.addEnd(buf8);
        #    if( !prmisdefault(buf9) ) recordList.addEnd(buf9);
        #    if( !prmisdefault(buf10) ) recordList.addEnd(buf10);
        #    if( !prmisdefault(buf11) ) recordList.addEnd(buf11);
        #    if( !prmisdefault(buf12) ) recordList.addEnd(buf12);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf1
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf1(Common buf)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf2
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf2(Common buf1, Common buf2)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf1);
        #    recordList.addEnd(buf2);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf3
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf3(Common buf1, Common buf2, Common buf3)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf1);
        #    recordList.addEnd(buf2);
        #    recordList.addEnd(buf3);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf4
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf4(Common buf1, Common buf2, Common buf3, Common buf4)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf1);
        #    recordList.addEnd(buf2);
        #    recordList.addEnd(buf3);
        #    recordList.addEnd(buf4);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf5
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf5(Common buf1, Common buf2, Common buf3, Common buf4, Common buf5)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf1);
        #    recordList.addEnd(buf2);
        #    recordList.addEnd(buf3);
        #    recordList.addEnd(buf4);
        #    recordList.addEnd(buf5);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBuf6
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromBuf6(Common buf1, Common buf2, Common buf3, Common buf4, Common buf5, Common buf6)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #
        #    recordList.addEnd(buf1);
        #    recordList.addEnd(buf2);
        #    recordList.addEnd(buf3);
        #    recordList.addEnd(buf4);
        #    recordList.addEnd(buf5);
        #    recordList.addEnd(buf6);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromBufCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// табличные буфера в контейнере потеряют внутренние флаги
        #// такие как SelectForUpdate, formDataSource, был сделан select, isTmp
        #public static SysRecordList fromBufCon(container records, TableId tableId = 0)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    Common buf;
        #    int len = conlen(records);
        #    int i;
        #
        #    for (i=1; i<=len; i++)
        #    {
        #        buf = Any::conpeek(records, i).asRecord(tableId);
        #        recordList.addEnd(buf);
        #    }
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromCon(container tableIds_tableNames_records)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    int len = conlen(tableIds_tableNames_records);
        #    int i;
        #
        #    for (i=1; i<=len; i++)
        #    {
        #        recordList.addEnd(conpeek(tableIds_tableNames_records, i));
        #    }
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromEnumerator(Enumerator e, int maxElements = 0)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.appendEnumerator(e, maxElements);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает объект, содержащий клон списка
        #// внимание: объекты (элементы списка) являются общими для старого и нового списка, а сами списки - разные
        #public static SysRecordList fromList(List list)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.appendList(list);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromMarked
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет все отмеченные на форме записи
        #// возвращает число добавленных элементов
        #public static SysRecordList fromMarked(FormDataSource fds, int maxElements = 0)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.appendMarked(fds, maxElements);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromQuery
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет в список те datasource из query, которые получат значения в выборке из базы
        #public static SysRecordList fromQuery(Query q, int maxElements = 0)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.appendQuery(q, maxElements);
        #
        #    return recordList;
        #}
      ENDSOURCE
      SOURCE #fromSelect
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет все записи из буфера, который был заполнен командой select
        #// возвращает число добавленных элементов
        #//
        #// пример:
        #//
        #// {
        #//     ...
        #//     select custVendTable where custVendTable.Name like 'Micro*';
        #//     recordList = SysRecordList::fromSelect(custVendTable);
        #//     rle = recordList.getEnumerator()
        #//
        #//     while( rle && rle.moveNext() )
        #//     {
        #//        rle.current(); // возвращает табличный буфер
        #//     }
        #// }
        #//
        #public static SysRecordList fromSelect(Common rec, int maxElements = 0)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.appendSelect(rec, maxElements);
        #
        #    return recordList;
        #}
        #
        #
        #
      ENDSOURCE
      SOURCE #fromTableId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordList fromTableId(TableId tableId)
        #{
        #    SysRecordList recordList = SysRecordList::construct();
        #    ;
        #
        #    recordList.addEnd(tableId);
        #
        #    return recordList;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRecordMap unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRecordMap
    PROPERTIES
      Name                #SysRecordMap
      Extends             #Map
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #assignable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Common assignable(anytype value)
        #{
        #    Common buf = AnytypeUtil::toBuf(value);
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс содержит map записей из таблиц *разного типа* (в том числе могут быть типа Common)
        #// для записей всех типов вполне успешно срабатывают табличные методы initValue, validateWrite, write, insert, update и т.д.
        #// класс позволяет единообразно обслуживать записи из списка
        #//
        #class SysRecordMap extends Map
        #{
        #    Set tableIds;
        #}
      ENDSOURCE
      SOURCE #deleteDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет удаление без валиадции.
        #// Может, стоит использовать метод validateAndDelete?
        #public SysRecordMap deleteDatabase()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.currentValue();         // строка для отладчика
        #        buf.delete();
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #hasTableAccess
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean hasTableAccess(AccessType neededAccessType)
        #{
        #    AccessType accessType = this.rights();
        #    boolean ret = (accessType >= neededAccessType);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #initValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет initValue для буферов с пустым recId.
        #public void initValue()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.current();
        #        if( !buf.RecId )
        #        {
        #            buf.initValue();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #insert
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean insert(anytype key, anytype value)
        #{
        #    boolean ret;
        #    Common buf = this.assignable(value);
        #
        #    if( this.isAssignableBuf(buf) )
        #    {
        #        ret = super(key, value);
        #        this.tableIds().add(buf.TableId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #insertDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет вставку без валиадции для буферов с пустым recId.
        #// Может, стоит использовать метод validateAndDelete?
        #public SysRecordMap insertDatabase()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.current();
        #        if( !buf.RecId )
        #        {
        #            buf.insert();
        #        }
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #isAssignableBuf
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean isAssignableBuf(Common buf)
        #{
        #    boolean ret = buf.TableId && !RecordUtil::isCommon(buf);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void new(Types _keyType, Types _valueType = Types::Record)
        #{
        #    anytype contract = Debug::assert(_valueType == Types::Record);
        #
        #    super(_keyType, Types::Record);
        #}
      ENDSOURCE
      SOURCE #rights
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает минимальный уровень доступа
        #// пустой список записей имеет максимальный уровень доступа
        #public AccessType rights()
        #{
        #    AccessType ret = AccessType::Delete;
        #    AccessType rights;
        #
        #    SetEnumerator se = this.tableIds().getEnumerator();
        #    TableId tableId;
        #
        #    while( se && se.moveNext() )
        #    {
        #        tableId = se.current();
        #        rights = new DictTable(tableId).rights(); // так мы получаем права с учетом свойства таблицы maxAccessMode
        #        ret = min(ret, rights);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #selectForUpdate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// устанавливает режим выборки для всех табличных буферов в true, если selectForUpdate == true
        #// не изменяет флаг у табличных буферов, если selectForUpdate == false
        #public void selectForUpdate(boolean selectForUpdate = false)
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( selectForUpdate && me && me.moveNext() )
        #    {
        #        buf = me.currentValue();
        #        buf.selectForUpdate(selectForUpdate);
        #    }
        #}
      ENDSOURCE
      SOURCE #setTmp
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void setTmp()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.currentValue();         // строка для отладчика
        #        buf.setTmp();
        #    }
        #}
      ENDSOURCE
      SOURCE #tableIds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Set tableIds()
        #{
        #    if( !tableIds )
        #        tableIds = new Set(Types::Integer);
        #
        #    return tableIds;
        #}
      ENDSOURCE
      SOURCE #updateDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет обновление без валиадции для буферов с заполненным recId.
        #// Может, стоит использовать метод validateAndDelete?
        #public SysRecordMap updateDatabase()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.currentValue();
        #        if( buf.RecId )
        #        {
        #            buf.update();
        #        }
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #validateAndDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех записей,
        #// а затем, если валидация успешна, удаляет
        #public boolean validateAndDelete()
        #{
        #    boolean valid = this.validateDelete();
        #
        #    if( valid )
        #    {
        #        this.deleteDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateAndDeleteOrThrow()
        #{
        #    this.validateDeleteOrThrow();
        #    this.deleteDatabase();
        #}
      ENDSOURCE
      SOURCE #validateAndInsert
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех еще не вставленных записей (recId == 0),
        #// а затем, если валидация успешна, вставку еще не вставленных записей
        #public boolean validateAndInsert()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.insertDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndInsertOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateAndInsertOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.insertDatabase();
        #}
      ENDSOURCE
      SOURCE #validateAndUpdate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех уже вставленных записей (recId != 0),
        #// а затем, если валидация успешна, update уже вставленных записей
        #public boolean validateAndUpdate()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.updateDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndUpdateOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateAndUpdateOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.writeDatabase();
        #}
      ENDSOURCE
      SOURCE #validateAndWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет валидацию всех записей,
        #// а затем, если валидация успешна, запись всех буферов (Аксапта сама разбирается нужно вставить или обновить буфер)
        #public boolean validateAndWrite()
        #{
        #    boolean valid = this.validateWrite();
        #
        #    if( valid )
        #    {
        #        this.writeDatabase();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateAndWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateAndWriteOrThrow()
        #{
        #    this.validateWriteOrThrow();
        #    this.writeDatabase();
        #}
      ENDSOURCE
      SOURCE #validateDelete
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean validateDelete()
        #{
        #    boolean valid = true;
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( valid && me && me.moveNext() )
        #    {
        #        buf = me.currentValue();         // строка для отладчика
        #        valid = buf.validateDelete();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateDeleteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateDeleteOrThrow()
        #{
        #    if( !this.validateDelete() )
        #    {
        #        throw error(strFmt('Delete validation error in %1', funcname()));
        #    }
        #}
      ENDSOURCE
      SOURCE #validateWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean validateWrite()
        #{
        #    boolean valid = true;
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( valid && me && me.moveNext() )
        #    {
        #        buf = me.currentValue();         // строка для отладчика
        #        valid = buf.validateWrite();
        #    }
        #
        #    return valid;
        #}
      ENDSOURCE
      SOURCE #validateWriteOrThrow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void validateWriteOrThrow()
        #{
        #    if( !this.validateWrite() )
        #    {
        #        throw error(strFmt('Write validation error in %1', funcname()));
        #    }
        #}
      ENDSOURCE
      SOURCE #writeDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// выполняет запись без валиадции всех буферов.
        #// Может, стоит использовать метод validateAndDelete?
        #public SysRecordMap writeDatabase()
        #{
        #    MapEnumerator me = this.getEnumerator();
        #    Common buf;
        #
        #    while( me && me.moveNext() )
        #    {
        #        buf = me.currentValue(); // строка для отладчика
        #        buf.writeDatabase();
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysRecordMap construct(Types keyType)
        #{
        #    SysRecordMap recordMap = new SysRecordMap(keyType, Types::Record);
        #
        #    return recordMap;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysRecordInsertList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysRecordInsertList
    PROPERTIES
      Name                #SysRecordInsertList
      Extends             #RecordInsertList
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #add
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// добавляет запись к набору RecordInsertList
        #// перед добавлением выполняет validateVrite, если это не запрещено параметрами класса
        #public int add(Common record)
        #{
        #    int ret;
        #
        #    if (this.skipValidateWrite() || record.validateWrite())
        #    {
        #        ret = super(record);    // внимание! на клиенте всегда возвращает 0
        #        elements++;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class SysRecordInsertList extends RecordInsertlist
        #{
        #    boolean skipValidateWrite;
        #
        #    int elements;
        #    int lastInserted;
        #}
      ENDSOURCE
      SOURCE #elements
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// всего элементов было добавлено в этот список
        #public int elements()
        #{
        #    return elements;
        #}
      ENDSOURCE
      SOURCE #insertDatabase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает число записей, которые были вставлены в базу данной командой
        #public int insertDatabase()
        #{
        #    int ret;
        #
        #    if( elements )
        #    {
        #        ret = super();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #skipValidateWrite
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean skipValidateWrite(boolean _skipValidateWrite = skipValidateWrite)
        #{
        #    skipValidateWrite = _skipValidateWrite;
        #    return skipValidateWrite;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// создает объект на сервере
        #// используйте new(), если вы хотите вручную управлять местом создания объекта
        #public server static SysRecordInsertList construct(
        #    TableId     tableId,
        #    boolean     skipInsertMethod    = false,
        #    boolean     skipDatabaseLog     = false,
        #    boolean     skipEvents          = false,
        #    boolean     skipAosValidation   = false,
        #    boolean     skipRLSValidation   = false,
        #    boolean     skipValidateWrite   = false)
        #{
        #    SysRecordInsertList ril = new SysRecordInsertList(
        #                                    tableId,
        #                                    skipInsertMethod,
        #                                    skipDatabaseLog,
        #                                    skipEvents,
        #                                    skipAosValidation,
        #                                    skipRLSValidation);
        #    ;
        #
        #    ril.skipValidateWrite(skipValidateWrite);
        #
        #    return ril;
        #}
      ENDSOURCE
      SOURCE #fromRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// создает объект на сервере
        #// используйте new(), если вы хотите вручную управлять местом создания объекта
        #public server static SysRecordInsertList fromRecord(
        #    Common      record,
        #    boolean     skipValidateWrite   = false,
        #    boolean     skipRLSValidation   = record.recordLevelSecurity())
        #{
        #    SysRecordInsertList     ril     = SysRecordInsertList::construct(
        #                                            record.tableId,
        #                                            record.skipDataMethods(),
        #                                            record.skipDatabaseLog(),
        #                                            record.skipEvents(),
        #                                            record.skipAosValidation(),
        #                                            skipRLSValidation);
        #    ;
        #
        #    ril.skipValidateWrite(skipValidateWrite);
        #
        #    return ril;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ArgsUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ArgsUtil
    PROPERTIES
      Name                #ArgsUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class ArgsUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #assertCallerFormName
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertCallerFormName(Args args, FormName formName, str _funcname = '')
        #{
        #    if( ArgsUtil::callerFormName(args) == formName)
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertCallerType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertCallerType(Args args, classId potentialAncestorClassId, str _funcname = '')
        #{
        #    if( ArgsUtil::checkCallerType(args, potentialAncestorClassId) )
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertEnum(Args args, Anytype enum, str _funcname = '')
        #{
        #    if ( ArgsUtil::checkEnum(args, enum) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertEnumType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertEnumType(Args args, EnumId enumId, str _funcname = '')
        #{
        #    if( ArgsUtil::checkEnumType(args, enumId) )
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertFormDatasource
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertFormDatasource(Args args, str _funcname = '')
        #{
        #    if (args && args.dataset() && args.record().isFormDataSource())
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertParm
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertParm(Args args, str matchPattern = '.', str _funcname = '')
        #{
        #    if ( ArgsUtil::checkParm(args, matchPattern) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertRecord(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    if ( ArgsUtil::checkRecord(args, tableId) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertRecordExists
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertRecordExists(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    if ( ArgsUtil::checkRecordExists(args, tableId) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertRecordTableIds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static void assertRecordTableIds(Args args, container tableIds, str _funcname = '')
        #{
        #    if ( ArgsUtil::checkRecordTableIds(args, tableIds) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #caller
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Object caller(Args args, classId potentialAncestorClassId)
        #{
        #    Object ret = args ? SysDictClass::as(args.caller(), potentialAncestorClassId) : null;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #callerFormName
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str callerFormName(Args args)
        #{
        #    FormRun formRun = ArgsUtil::caller(args, classnum(FormRun));
        #    str formName = formRun ? formRun.form().name() : '';
        #
        #    return formName;
        #}
      ENDSOURCE
      SOURCE #checkCallerType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean checkCallerType(Args args, classId potentialAncestorClassId)
        #{
        #    boolean checkOk = args && SysDictClass::is(args.caller(), potentialAncestorClassId);
        #    ;
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean checkEnum(Args args, Anytype enum)
        #{
        #    boolean checkOk;
        #
        #    if( args && typeof(enum) == types::Enum )
        #    {
        #        checkOk = (enum == args.parmEnum());
        #    }
        #
        #    return checkOk;
        #}
        #
      ENDSOURCE
      SOURCE #checkEnumType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean checkEnumType(Args args, EnumId enumId)
        #{
        #    boolean checkOk = (args && args.parmEnumType() == enumId);
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkParm
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// параметр parm содержит паттерн.
        #// возвращает true, если parm-строка соответствует regexp-выражению в matchPattern (метод использует функцию match для проверки)
        #// если не указать matchPattern, то возвращает true, если parm не пустой (содержит хотя бы один символ)
        #// возвращает true, если matchPattern является пустой строкой
        #public static boolean checkParm(Args args, str matchPattern = '.')
        #{
        #    boolean checkOk = (args && match(matchPattern, args.parm()));
        #
        #    return checkOk;
        #}
        #
      ENDSOURCE
      SOURCE #checkRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// запись из указанной таблицы (или любой таблицы для tableId = 0)
        #public static boolean checkRecord(Args args, TableId tableId = 0)
        #{
        #    boolean checkOk = (args != null);
        #    int     dataset;
        #
        #    if( checkOk )
        #    {
        #        dataset = args.dataset();
        #        checkOk = (dataset != 0) && (tableId == 0 || dataset == tableId);
        #    }
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkRecordExists
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// запись существует (recId != 0) и запись из указанной таблицы (или любой таблицы для tableId = 0)
        #public static boolean checkRecordExists(Args args, TableId tableId = 0)
        #{
        #    boolean checkOk = (ArgsUtil::checkRecord(args, tableId) && args.record() && args.record().RecId != 0);
        #;
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkRecordTableIds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true, если:
        #// * контейнер содержит tableId, совпадающий с tableId таблицы
        #// * контейнер содержит 0
        #// * контейнер пустой
        #// возвращает false в остальных случаях
        #public static boolean checkRecordTableIds(Args args, container tableIds)
        #{
        #    boolean checkOk = (args != null);
        #    int     dataset;
        #
        #    if( checkOk && tableIds )
        #    {
        #        dataset = args.dataset();
        #        checkOk = confind(tableIds, dataset) || confind(tableIds, 0);
        #    }
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #copyArgs
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Args copyArgs(Args fromArgs, Args toArgs = null)
        #{
        #    if (fromArgs)
        #    {
        #        if (!toArgs)
        #        {
        #            toArgs = new Args();
        #        }
        #
        #        SysArgs::copyArgs(fromArgs, toArgs);
        #    }
        #
        #    return toArgs;
        #}
        #
      ENDSOURCE
      SOURCE #enum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// убедиться что в аргументах enum указанного типа и
        #// вернуть значение этого enum из аргументов
        #// бросает исключение, если enum не указанного типа
        #public static int enum(Args args, EnumId enumId, str _funcname = '')
        #{;
        #    ArgsUtil::assertEnumType(args, enumId, _funcname);
        #
        #    return args.parmEnum();
        #}
      ENDSOURCE
      SOURCE #enumDefault
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// тоже самое, что и ArgsUtil::getEnum()
        #// но если в аргументах не нужный enum не выдает ошибку, а возвращает дефолтное значение.
        #public static int enumDefault(Args args, anytype defaultEnumValue)
        #{
        #    if( typeof(defaultEnumValue) == Types::Enum )
        #    {
        #        if( ArgsUtil::checkEnumType(args, AnytypeUtil::enumId(defaultEnumValue)) )
        #        {
        #            return args.parmEnum();
        #        }
        #
        #        return defaultEnumValue;
        #    }
        #
        #    throw error::wrongUseOfFunction(funcname());
        #}
      ENDSOURCE
      SOURCE #markedList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container markedList(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    List            ret = new List(Types::Int64);
        #    FormDataSource  fds;
        #    common          record;
        #
        #    if( ArgsUtil::checkRecord(args, tableId) )
        #    {
        #        fds = args.record().dataSource();
        #        if( fds && fds.anyMarked() )
        #        {
        #            // marked records
        #            for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
        #            {
        #                ret.addEnd(record.RecId);
        #            }
        #        }
        #
        #        if( ret.elements() == 0 )
        #        {
        #            // or a record itself
        #            record = ArgsUtil::record(args, tableId, _funcname);
        #            ret.addEnd(record.RecId);
        #        }
        #    }
        #
        #    return ret.pack();
        #}
      ENDSOURCE
      SOURCE #markedRecIds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container markedRecIds(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    container       ret;
        #    FormDataSource  fds;
        #    common          record;
        #
        #    if( ArgsUtil::checkRecord(args, tableId) )
        #    {
        #        fds = args.record().dataSource();
        #        if( fds && fds.anyMarked() )
        #        {
        #            // marked records
        #            for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
        #            {
        #                ret += record.RecId;
        #            }
        #        }
        #
        #        if( !ret )
        #        {
        #            // or a record itself
        #            record = ArgsUtil::record(args, tableId, _funcname);
        #            ret += record.RecId;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #markedSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container markedSet(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    Set             ret = new Set(Types::Int64);
        #    FormDataSource  fds;
        #    common          record;
        #
        #    if( ArgsUtil::checkRecord(args, tableId) )
        #    {
        #        fds = args.record().dataSource();
        #        if( fds && fds.anyMarked() )
        #        {
        #            // marked records
        #            for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
        #            {
        #                ret.add(record.RecId);
        #            }
        #        }
        #
        #        if( ret.elements() == 0 )
        #        {
        #            // or a record itself
        #            record = ArgsUtil::record(args, tableId, _funcname);
        #            ret.add(record.RecId);
        #        }
        #    }
        #
        #    return ret.pack();
        #}
      ENDSOURCE
      SOURCE #record
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common record(Args args, TableId tableId = 0, str _funcname = '')
        #{;
        #    ArgsUtil::assertRecord(args, tableId, _funcname);
        #
        #    return args.record();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: AnytypeUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #AnytypeUtil
    PROPERTIES
      Name                #AnytypeUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс реализует только статические методы.
        #// не содержит внутри никаких значений, не имеет смысла создавать экземпляр этого класса
        #//
        #class AnytypeUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #as
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype as(anytype value, anytype asValue)
        #{
        #    Types   asType = typeof(asValue);
        #    Int     asId   = AnytypeUtil::id(asValue);
        #    anytype ret    = AnytypeUtil::asType(value, asType, asId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #asArray
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Array asArray(anytype value)
        #{
        #    if( AnytypeUtil::isArray(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asClass
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Object asClass(anytype value, ClassId potentialAncestorId = 0)
        #{
        #    if( typeof(value) == Types::Class )
        #    {
        #        if( potentialAncestorId )
        #        {
        #            return SysDictClass::as(value, potentialAncestorId);
        #        }
        #
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asCollection
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asCollection(anytype value)
        #{
        #    return EnumeratorUtil::asEnumerable(value);
        #}
      ENDSOURCE
      SOURCE #asContainer
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container asContainer(anytype value)
        #{
        #    if( typeof(value) == Types::Container )
        #    {
        #        return value;
        #    }
        #
        #    return connull();
        #}
      ENDSOURCE
      SOURCE #asDate
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Date asDate(anytype value)
        #{
        #    if( typeof(value) == Types::Date )
        #    {
        #        return value;
        #    }
        #
        #    return DateNull();
        #}
      ENDSOURCE
      SOURCE #asDateTime
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static UtcDateTime asDateTime(anytype value)
        #{
        #    if( typeof(value) == Types::UtcDateTime )
        #    {
        #        return value;
        #    }
        #
        #    return utcDateTimeNull();
        #}
      ENDSOURCE
      SOURCE #asEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnum(anytype value, enumId enumId = 0)
        #{
        #    return AnytypeUtil::asType(value, Types::Enum, enumId);
        #}
      ENDSOURCE
      SOURCE #asEnumDefault
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnumDefault(anytype value, anytype defaultEnumValue)
        #{
        #    int enumId = AnytypeUtil::enumId(defaultEnumValue);
        #
        #    if( !enumId )
        #    {
        #        throw error(strfmt('The parameter defaultEnumValue should be Enum. The type of defaultEnumValue is %1.', typeof(defaultEnumValue)));
        #    }
        #
        #    if( AnytypeUtil::isType(value, Types::Enum, enumId) )
        #    {
        #        return value;
        #    }
        #
        #    return defaultEnumValue;
        #}
        #
        #
      ENDSOURCE
      SOURCE #asEnumerable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnumerable(anytype value)
        #{
        #    return EnumeratorUtil::asEnumerable(value);
        #}
      ENDSOURCE
      SOURCE #asEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asEnumerator(anytype value)
        #{
        #    return EnumeratorUtil::asEnumerator(value);
        #}
      ENDSOURCE
      SOURCE #asGUID
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static GUID asGUID(anytype value)
        #{
        #    if( typeof(value) == Types::Guid )
        #    {
        #        return value;
        #    }
        #
        #    return nullValueBaseType(Types::Guid);
        #}
      ENDSOURCE
      SOURCE #asInt
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int asInt(anytype value)
        #{
        #    if( typeof(value) == Types::Integer )
        #    {
        #        return value;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #asInt64
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int64 asInt64(anytype value)
        #{
        #    if( typeof(value) == Types::Int64 )
        #    {
        #        return value;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #asList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static List asList(anytype value)
        #{
        #    if( AnytypeUtil::isList(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asMap
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Map asMap(anytype value)
        #{
        #    if( AnytypeUtil::isMap(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asObject
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Object asObject(anytype value)
        #{
        #    return AnytypeUtil::asClass(value);
        #}
      ENDSOURCE
      SOURCE #asReal
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Real asReal(anytype value)
        #{
        #    if( typeof(value) == Types::Real )
        #    {
        #        return value;
        #    }
        #
        #    return 0.0;
        #}
      ENDSOURCE
      SOURCE #asRecId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int64 asRecId(anytype value)
        #{
        #    if( typeof(value) == Types::Int64 )
        #    {
        #        return value;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #asRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common asRecord(anytype value, TableId tableId = 0)
        #{
        #    Common ret = AnytypeUtil::asType(value, Types::Record, tableId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #asRecVersion
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int64 asRecVersion(anytype value)
        #{
        #    if( typeof(value) == Types::Integer )
        #    {
        #        return value;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #assertEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype assertEmpty(anytype value)
        #{
        #    if (value)
        #    {
        #        throw error(Error::wrongUseOfFunction(funcName()));
        #    }
        #
        #    return value;
        #}
      ENDSOURCE
      SOURCE #assertInTypes
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype assertInTypes(anytype value, container typeCon)
        #{
        #    if (confind(typeCon, typeof(value)) )
        #    {
        #        return value;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #assertNotEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype assertNotEmpty(anytype value)
        #{
        #    if (value)
        #    {
        #        return value;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #assertType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype assertType(anytype value, Types type, int potentialAncestorId = 0)
        #{
        #    if (AnytypeUtil::isType(value, type, potentialAncestorId))
        #    {
        #        return value;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcName()));
        #}
      ENDSOURCE
      SOURCE #asSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Set asSet(anytype value)
        #{
        #    if( AnytypeUtil::isSet(value) )
        #    {
        #        return value;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str asString(anytype value)
        #{
        #    if( AnytypeUtil::isString(value) )
        #    {
        #        return value;
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #asTime
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static timeOfDay asTime(anytype value)
        #{
        #    if( typeof(value) == Types::Integer )
        #    {
        #        return value;
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #asType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype asType(anytype value, Types type, int potentialAncestorId = 0)
        #{
        #    if( AnytypeUtil::isType(value, type, potentialAncestorId) )
        #    {
        #        return value;
        #    }
        #
        #    return nullValueBaseType(type);
        #}
      ENDSOURCE
      SOURCE #classId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int classId(anytype value)
        #{
        #    int id = 0;
        #
        #    if( typeof(value) == Types::Class )
        #    {
        #        id = classidget(value);
        #    }
        #
        #    return id;
        #}
      ENDSOURCE
      SOURCE #enumId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int enumId(anytype value)
        #{
        #    int id = 0;
        #
        #    if( typeof(value) == Types::Enum )
        #    {
        #        id = DictEnum::value2id(value);
        #    }
        #
        #    return id;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает объект, у которого можно вызвать метод moveNext
        #public static Enumerator getEnumerator(anytype value)
        #{
        #    return EnumeratorUtil::getEnumerator(value);
        #}
      ENDSOURCE
      SOURCE #id
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int id(anytype value)
        #{
        #    int   id   = 0;
        #    Types type = typeof(value);
        #
        #    switch( type )
        #    {
        #        case Types::Enum:
        #            id = DictEnum::value2id(value);
        #            break;
        #
        #        case Types::Record:
        #            id = AnytypeUtil::asRecord(value).TableId;
        #            break;
        #
        #        case Types::Class:
        #            id = classidget(value);
        #            break;
        #    }
        #
        #    return id;
        #}
      ENDSOURCE
      SOURCE #is
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean is(anytype value, anytype isValue)
        #{
        #    Types   isType = typeof(isValue);
        #    Int     isId   = AnytypeUtil::id(isValue);
        #    boolean ret    = AnytypeUtil::isType(value, isType, isId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isArray
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isArray(anytype value)
        #{
        #    boolean ret = AnytypeUtil::isClass(value, classnum(Array));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isClass
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isClass(anytype value, int potentialAncestorId = 0)
        #{
        #    boolean ret = AnytypeUtil::isType(Types::Class, potentialAncestorId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isCollection
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true для значения, для которого можно получить enumerator
        #public static boolean isCollection(anytype value)
        #{
        #    return EnumeratorUtil::isEnumerable(value);
        #}
      ENDSOURCE
      SOURCE #isContainer
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isContainer(anytype value)
        #{
        #    boolean ret = typeof(value) == Types::Container;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// нормально работает с контейнерами, классами, CLR и прочими сложными объектами.
        #public static boolean isEmpty(anytype value)
        #{
        #    if (value)
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #isEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isEnum(anytype value, enumId enumId = 0)
        #{
        #    return AnytypeUtil::isType(value, Types::Enum, enumId);
        #}
      ENDSOURCE
      SOURCE #isEnumerable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true для значения, для которого можно получить enumerator
        #public static boolean isEnumerable(anytype value)
        #{
        #    return EnumeratorUtil::isEnumerable(value);
        #}
      ENDSOURCE
      SOURCE #isEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true для значения, для которого можно получить enumerator
        #public static boolean isEnumerator(anytype value)
        #{
        #    return EnumeratorUtil::isEnumerator(value);
        #}
      ENDSOURCE
      SOURCE #isImplements
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isImplements(anytype value, int interfaceId = 0)
        #{
        #    boolean ret;
        #    classId classId;
        #
        #    if( interfaceId && typeof(value) == Types::Class )
        #    {
        #        classId = classidget(value);
        #        ret = new SysDictClass(classId).isImplementing(interfaceId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInt
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isInt(anytype value)
        #{
        #    boolean ret = typeof(value) == Types::Integer;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInt64
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isInt64(anytype value)
        #{
        #    boolean ret = typeof(value) == Types::Int64;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInTypes
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isInTypes(anytype value, container typeCon)
        #{
        #    Types type = AnytypeUtil::type(value);
        #
        #    if (confind(typeCon, type))
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isList(anytype value)
        #{
        #    boolean ret = AnytypeUtil::isClass(value, classnum(List));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isMap
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isMap(anytype value)
        #{
        #    boolean ret = AnytypeUtil::isClass(value, classnum(Map));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isNotEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// нормально работает с контейнерами, классами, CLR и прочими сложными объектами.
        #public static boolean isNotEmpty(anytype value)
        #{
        #    if (value)
        #    {
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isPrimitive
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isPrimitive(anytype value)
        #{
        #    Types type = typeof(value);
        #
        #    switch( type )
        #    {
        #        case Types::String:
        #        case Types::Integer:
        #        case Types::Real:
        #        case Types::Date:
        #        case Types::Enum:
        #        case Types::UtcDateTime:
        #        case Types::RString:
        #        case Types::VarString:
        #        case Types::UserType:
        #        case Types::Guid:
        #        case Types::Int64:
        #        case Types::Time:
        #            return true;
        #
        #        case Types::Container:
        #        case Types::Record:
        #        case Types::AnyType:
        #        case Types::BLOB:
        #        case Types::Class:
        #        case Types::void:
        #            return false;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isRecId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isRecId(anytype value)
        #{
        #    boolean ret = typeof(value) == Types::Int64;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isRecord
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isRecord(anytype value, int potentialAncestorId = 0)
        #{
        #    boolean ret = AnytypeUtil::isType(value, Types::Record, potentialAncestorId);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isRecVersion
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isRecVersion(anytype value)
        #{
        #    boolean ret = typeof(value) == Types::Integer;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isSet(anytype value)
        #{
        #    boolean ret = AnytypeUtil::isClass(classnum(Set));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isString(anytype value)
        #{
        #    boolean ret = AnytypeUtil::isInTypes(value, AnytypeUtil::stringTypes());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isType(anytype value, Types type, int potentialAncestorId = 0)
        #{
        #    Types t = typeof(value);
        #
        #    if( potentialAncestorId )
        #    {
        #        switch( t )
        #        {
        #            case Types::Class:
        #                return (type == t) && SysDictClass::is(value, potentialAncestorId);
        #
        #            case Types::Record:
        #                return (type == t) && SysDictTable::is(value, potentialAncestorId);
        #
        #            case Types::Integer:
        #                switch( type )
        #                {
        #                    case Types::Class:
        #                        return SysDictClass::isEqualOrSuperclass(value, potentialAncestorId);
        #
        #                    case Types::Record:
        #                        return SysDictTable::is(SysRecord::makeRecord(value), potentialAncestorId);
        #
        #                    case Types::UserType:
        #                        return SysDictType::isEqualOrExtending(value, potentialAncestorId);
        #
        #                    case Types::Enum:
        #                        return (potentialAncestorId == new DictType(value).enumId());
        #                }
        #                break;
        #
        #            case Types::Enum:
        #                return (type == t) && potentialAncestorId == DictEnum::value2id(value); // TODO равен ли? может ли быть enum от enum?
        #        }
        #    }
        #
        #    if( type == t )
        #    {
        #        return true;
        #    }
        #    else if( confind(AnytypeUtil::stringTypes(),t) )
        #    {
        #        // не строгое совпадение строковых типов поскольку все строки можно присвоить друг другу
        #        return true;
        #    }
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #nullValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype nullValue(Types type)
        #{
        #    return nullValueBaseType(type);
        #}
      ENDSOURCE
      SOURCE #stringTypes
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static container stringTypes()
        #{
        #    return [Types::String, Types::RString, Types::VarString];
        #}
      ENDSOURCE
      SOURCE #tableId
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static int tableId(anytype value)
        #{
        #    int id = 0;
        #
        #    if( typeof(value) == Types::Record )
        #    {
        #        id = AnytypeUtil::asRecord(value).TableId;
        #    }
        #
        #    return id;
        #}
      ENDSOURCE
      SOURCE #toBuf
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// преобразовать value в соответствующий буфер, насколько это возможно
        #public static Common toBuf(anytype value)
        #{
        #    Common buf;
        #
        #    switch(typeof(value))
        #    {
        #        case Types::Record:
        #            buf = value;
        #            break;
        #
        #        case Types::Integer:
        #            buf = SysRecord::makeRecord(value);
        #            break;
        #
        #        case Types::Int64:
        #            if( value > 0 )
        #            {
        #                buf = SysRecord::makeRecord(int642int(value, true));
        #            }
        #            break;
        #
        #        case Types::String:
        #        case Types::RString:
        #        case Types::VarString:
        #            if( value )
        #            {
        #                buf = SysRecord::makeRecord(tablename2id(value));
        #            }
        #            break;
        #    }
        #
        #    return buf;
        #}
      ENDSOURCE
      SOURCE #toNullValue
        #public static anytype toNullValue(anytype value)
        #{
        #    return nullValueBaseType(value);
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str toString(anytype value, str sep = ',')
        #{
        #    // поскольку этот метод может вызваться в отладчике еще до инициализации,
        #    // то в этом методе нельзя использовать методы класса и нельзя бросать исключение
        #    // и ни в коем случае не бросаем исключение на неинициализированные значения
        #    Types type = typeof(value);
        #    str   ret;
        #    Object obj;
        #
        #    switch (type)
        #    {
        #        case Types::String:
        #        case Types::RString:
        #        case Types::VarString:
        #            ret = value;
        #            break;
        #
        #        case Types::Container:
        #            ret = ConUtil::toStr(value, sep);
        #            break;
        #
        #        case Types::AnyType:
        #            ret = '';
        #            break;
        #
        #        case Types::Record:
        #            ret = RecordUtil::getValuesInfo(value);
        #
        #        case Types::Class:
        #            if( value )
        #            {
        #                obj = value;
        #                ret = obj.toString();
        #            }
        #            else
        #            {
        #                ret = 'null';
        #            }
        #            break;
        #
        #        case Types::BLOB:
        #        case Types::void:
        #            ret = strfmt('%1', type); // не бросаем исключение! throw error(Error::unsupportedEnum(funcname(), type));
        #            break;
        #
        #        default:
        #            ret = strfmt('%1', value);
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #type
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Types type(anytype value)
        #{
        #    Types type = typeof(value);
        #
        #    return type;
        #}
      ENDSOURCE
      SOURCE #undefined
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static anytype undefined()
        #{
        #    anytype undefined;
        #
        #    return undefined;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ClrTypeUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #ClrTypeUtil
    PROPERTIES
      Name                #ClrTypeUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class ClrTypeUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #asInstance
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static System.Object asInstance(System.Object obj, System.Object baseObj)
        #{
        #    if( ClrTypeUtil::isInstance(obj, baseObj) )
        #    {
        #        return obj;
        #    }
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #asInstanceOrBase
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static System.Object asInstanceOrBase(System.Object obj, System.Object baseObj)
        #{
        #    if( ClrTypeUtil::isInstance(obj, baseObj) )
        #    {
        #        return obj;
        #    }
        #
        #    return baseObj;
        #}
        #
      ENDSOURCE
      SOURCE #isInstance
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isInstance(System.Object obj, System.Object baseObj)
        #{
        #    anytype perm = new InteropPermission(Interopkind::ClrInterop).assert();
        #
        #    System.Type baseType = baseObj ? baseObj.GetType() : null;
        #    boolean     ret      = baseType && obj ? baseType.IsInstanceOfType(obj) : false;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #name
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str name(System.Object obj)
        #{
        #    anytype perm = new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    System.Type type = obj ? obj.GetType() : null;
        #    str typeName = type ? type.get_Name() : '';
        #
        #    return typeName;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: QueryRunUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #QueryRunUtil
    PROPERTIES
      Name                #QueryRunUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class QueryRunUtil
        #{
        #}
      ENDSOURCE
      SOURCE #getByName
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common getByName(QueryRun qr, str dsName)
        #{
        #    Query                   q       = qr && dsName ? qr.query() : null;
        #    QueryBuildDataSource    qbds    = q ? q.dataSourceName(dsName) : null;
        #    Common                  ret;
        #
        #    if( qbds )
        #    {
        #        ret = qr.getNo(qbds.id());
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #take
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// получить из запроса n записей, начиная со startFrom
        #public static QueryRun take(QueryRun qr, int n, int startFrom = 1)
        #{
        #    if( qr && n )
        #    {
        #        qr.enablePositionPaging(true);
        #        qr.addPageRange(startFrom, n);
        #    }
        #
        #    return qr;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SessionUtil unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SessionUtil
    PROPERTIES
      Name                #SessionUtil
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class SessionUtil
        #{
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// это Util-класс, содержащий только статические методы
        #// нет смысла создавать объекты этого класса
        #private void new()
        #{
        #}
      ENDSOURCE
      SOURCE #clientSessionTable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static server SysClientSessions clientSessionTable(int _sessionId = 0)
        #{
        #    int sessId = _sessionId ? _sessionId : sessionid();
        #
        #    SysClientSessions clientSessions;
        #    ;
        #
        #    new SkipAOSValidationPermission().assert();
        #
        #    //BP deviation documented
        #    clientSessions.skipAosValidation(true);
        #
        #    select clientSessions
        #    where clientSessions.SessionId == sessId;
        #
        #    return clientSessions;
        #}
      ENDSOURCE
      SOURCE #clientType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static ClientType clientType(int _sessionId = 0)
        #{
        #    return SessionUtil::session().clientKind();
        #
        #}
      ENDSOURCE
      SOURCE #isInRoleAdmin
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true если:
        #// пользователь наделен правами локального администратора
        #// и текущая сессия была запущена runAsAdministrator
        #//
        #public static boolean isInRoleAdmin()
        #{
        #    #define.CacheOwner('SessionFlags')
        #    #define.CacheKey('isInRoleAdmin')
        #
        #    boolean ret;
        #    anytype cached = classfactory.globalCache().get(#CacheOwner, #CacheKey, '');
        #
        #    if( typeof(cached) == Types::Integer )
        #    {
        #        ret = cached;
        #    }
        #    else
        #    {
        #        ret = SessionUtil::isInRoleAdmin_Slow();
        #
        #        classfactory.globalCache().set(#CacheOwner, #CacheKey, ret);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInRoleAdmin_Slow
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает true если:
        #// пользователь наделен правами локального администратора
        #// и текущая сессия была запущена runAsAdministrator
        #//
        #// используйте метод isInRoleAdmin(), в котором выполняется кэширование
        #//
        #public static boolean isInRoleAdmin_Slow()
        #{
        #    anytype perm = new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    System.Security.Principal.WindowsIdentity    id = System.Security.Principal.WindowsIdentity::GetCurrent();
        #    System.Security.Principal.WindowsPrincipal   principal = new System.Security.Principal.WindowsPrincipal(id);
        #    System.Security.Principal.WindowsBuiltInRole admin = System.Security.Principal.WindowsBuiltInRole::Administrator;
        #
        #    boolean ret = principal.IsInRole(admin);
        #    ;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #serverSessionTable
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static server SysServerSessions serverSessionTable(int _sessionId = 0)
        #{
        #    int sessId = _sessionId ? _sessionId : sessionid();
        #
        #    SysClientSessions clientSessions;
        #    SysServerSessions serverSessions;
        #    ;
        #
        #    new SkipAOSValidationPermission().assert();
        #
        #    //BP deviation documented
        #    clientSessions.skipAosValidation(true);
        #    //BP deviation documented
        #    serverSessions.skipAosValidation(true);
        #
        #    select serverSessions
        #    exists join clientSessions
        #    where clientSessions.ServerId == serverSessions.ServerId
        #       && clientSessions.SessionId == sessId;
        #
        #    return serverSessions;
        #}
      ENDSOURCE
      SOURCE #session
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Session session(int _sessionId = 0, boolean _checkSession = false)
        #{
        #    int sessId = _sessionId ? _sessionId : sessionid();
        #
        #    Session ret = new Session(sessId, _checkSession);
        #
        #    return ret;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Any unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Any
    PROPERTIES
      Name                #Any
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #addToTextBuffer
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// рекурсивно заполняет textBuffer
        #protected textBuffer addToTextBuffer(
        #    str         _sep            = ',',
        #    boolean     _queryValue     = false,
        #    TextBuffer  _textBuffer     = null)
        #{
        #    Types   type    = typeof(value);
        #    int     i;
        #    int     len;
        #    str     s;
        #
        #    if (_textBuffer == null)
        #    {
        #        _textBuffer = new TextBuffer();
        #    }
        #
        #    switch(type)
        #    {
        #        case Types::Container:
        #            len = conlen(value);
        #            for(i=1; i<=len; ++i)
        #            {
        #                if(i>1)
        #                {
        #                    _textBuffer.appendText(_sep);
        #                }
        #                _textBuffer = Any::conpeek(value, i).addToTextBuffer(_sep, _queryValue, _textBuffer);
        #            }
        #            break;
        #
        #        case Types::Class:
        #            if (SysDictClass::isEqualOrSuperclass(classidget(value), classnum(Set)))
        #            {
        #                _textBuffer = Any::construct(ConUtil::fromSet(value)).addToTextBuffer(_sep, _queryValue, _textBuffer);
        #                break;
        #            }
        #            else if (SysDictClass::isEqualOrSuperclass(classidget(value), classnum(List)))
        #            {
        #                _textBuffer = Any::construct(ConUtil::fromList(value)).addToTextBuffer(_sep, _queryValue, _textBuffer);
        #                break;
        #            }
        #            else if (SysDictClass::isEqualOrSuperclass(classidget(value), classnum(Array)))
        #            {
        #                _textBuffer = Any::construct(ConUtil::fromArray(value)).addToTextBuffer(_sep, _queryValue, _textBuffer);
        #                break;
        #            }
        #            // no break! проваливаемся ниже
        #        case Types::Record:
        #        case Types::AnyType:
        #        case Types::BLOB:
        #        case Types::void:
        #            throw error(Error::unsupportedEnum(funcname(), type));
        #
        #        default:
        #            s = _queryValue ? SysQuery::value(value) : strfmt('%1', value);
        #            _textBuffer.appendText(s);
        #            break;
        #    }
        #
        #    return _textBuffer;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс содержит неизменяемое значение любого типа
        #// чтобы переприсвоить значение создайте новый объект этого типа
        #//
        #// Чем отличается этот класс от Anytype и от SysAnyType?
        #// 1.
        #// Аксапта позволяет установить произвольное значение в переменную типа anytype только один раз.
        #// Во время первой инициализации тип переменной фиксируется, в дальнейшем тип изменить нельзя.
        #//
        #// Anytype var = 1;
        #// var = 2;         // ok
        #// var = '';        // результат не определен. В большинстве версий аксапты будет 0;
        #//
        #// 2.
        #// Чтобы обойти эту проблему в Аксапту ввели тип SysAnyType
        #// SysAnyType позволяет в любой момент установить действительно любое значение.
        #// Но ради этого тип сделали очень тяжелым - в куче хранится map, key и сам объект в качестве value
        #// кроме того, каждое обращение к value - это lookup внутри map
        #//
        #// SysAnyType var = new SysAnyType(1);
        #// var.value('');   // будет хранить пустую строку
        #//
        #// 3.
        #// Данный класс Any не позволяет изменять значение хранимого объекта.
        #// Поэтому данный класс может просто хранить ref на объект произвольного типа
        #// Но! переприсвоить значение можно просто пересоздав объект Any
        #//
        #// Any var = new Any(1);        // ok
        #// var = new Any('');           // ok
        #//
        #// у Any есть несколько специализированных конструкторов и обычный construct
        #//
        #// Any var = Any::constuct(1);  // ok
        #// var = Any::constuct('');     // ok
        #//
        #// Класс проявляется в цикле (обратите внимание на специализированный конструктор conpeek)
        #//
        #// container con = [1, '', 31\01\2019];
        #// Any var;
        #// for(i=1; i<=conlen(con); ++i)
        #// {
        #//     var = Any::conpeek(con, i);
        #// }
        #class Any
        #{
        #    Anytype value;
        #}
      ENDSOURCE
      SOURCE #ensureEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Any ensureEmpty()
        #{
        #    if (this.value())
        #    {
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #    }
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureInTypes
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Any ensureInTypes(container typeCon)
        #{
        #    if (confind(typeCon, this.type()))
        #    {
        #        return this;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #ensureNotEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Any ensureNotEmpty()
        #{
        #    if (this.value())
        #    {
        #        return this;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #ensureType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Any ensureType(Types type, int potentialAncestorId = 0)
        #{
        #    if (AnytypeUtil::isType(this.value(), type, potentialAncestorId))
        #    {
        #        return this;
        #    }
        #
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #equalsTo
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean equalsTo(Any type2)
        #{
        #    //Is one of them null ?
        #    if (!type2)
        #    {
        #        return false;
        #    }
        #
        #    //Are their types different ?
        #    if (this.type() != type2.type())
        #    {
        #        return false;
        #    }
        #
        #    //They are the same type. Is this type void ?
        #    if (this.type() == Types::void)
        #    {
        #        return true;
        #    }
        #
        #    //Are their values different ?
        #    if (this.value() != type2.value())
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #new
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void new(Anytype _value = null)
        #{
        #    value = _value;
        #}
      ENDSOURCE
      SOURCE #toNullValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public anytype toNullValue()
        #{
        #    return nullValueBaseType(this.type());
        #}
      ENDSOURCE
      SOURCE #toQueryValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toQueryValue()
        #{
        #    str ret;
        #
        #    switch (this.type())
        #    {
        #        case Types::Class:
        #        case Types::Container:
        #            ret = this.addToTextBuffer(',', true).getText();
        #            break;
        #
        #        case Types::Record:
        #        case Types::AnyType:
        #        case Types::BLOB:
        #        case Types::void:
        #            throw error(Error::unsupportedEnum(funcname(), this.type()));
        #
        #        default:
        #            ret = SysQuery::value(value);
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString(str sep = ',')
        #{
        #    // поскольку этот метод может вызваться в отладчике еще до инициализации,
        #    // то в этом методе нельзя использовать методы класса и нельзя бросать исключение
        #    // и ни в коем случае не бросаем исключение на неинициализированные значения
        #    str ret = AnytypeUtil::toString(this.value(), sep);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #type
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #final public Types type()
        #{
        #    Types type = typeof(value);
        #
        #    return type;
        #}
      ENDSOURCE
      SOURCE #value
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// только чтение! см. комментарий к classDeclaration
        #final public AnyType value()
        #{
        #    return value;
        #}
      ENDSOURCE
      SOURCE #checkAllNotEmpty
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// принимает данные в контейнере, который состоит из контейнеров - значение и метка
        #// выдает ошибки для всех пустых значений
        #// если хотя бы одно значение пустое, то возвращает false
        #// если все значения не пустые, то возвращает true
        #//
        #// пример использования:
        #//     Any::checkAllNotEmpty([[purchId, 'Закупка'], [emplId, 'Ответственный']]);
        #//
        #public static boolean checkAllNotEmpty(container pairs, str txt = 'Значение не должно быть пустым. Укажите значение для %1.')
        #{
        #    boolean     ret = true;
        #
        #    container   pair;
        #    str         label;
        #
        #    int         i;
        #    int         len = conlen(pairs);
        #    ;
        #
        #    for (i=1; i<=len; ++i)
        #    {
        #        pair  = ConUtil::peekAsContainer(pairs, i);
        #        label = conpeek(pair, 2);
        #
        #        if( !conpeek(pair, 1) )
        #        {
        #            ret = CheckFailed(strfmt(txt, label));
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #conpeek
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Any conpeek(container con, int idx)
        #{
        #    anytype value   = conpeek(con, idx);  // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про контейнеры
        #    Any     ret     = Any::construct(value);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Any construct(Anytype value)
        #{
        #    return new Any(value);
        #}
      ENDSOURCE
      SOURCE #field
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Any field(Common record, fieldId fieldid)
        #{
        #    anytype value   = record.(fieldid);  // не делаем дополнительных проверок: к случае чего, аксапта выбросит исключение про поля в записи
        #    Any     ret     = Any::construct(value);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isEqual
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean isEqual(Any type1, Any type2)
        #{
        #    //Are both null ?
        #    if (!type1 && !type2)
        #    {
        #        return true;
        #    }
        #
        #    //Is one of them null ?
        #    if (!type1 || !type2)
        #    {
        #        return false;
        #    }
        #
        #    //Are their types different ?
        #    if (type1.type() != type2.type())
        #    {
        #        return false;
        #    }
        #
        #    //They are the same type. Is this type void ?
        #    if (type1.type() == Types::void)
        #    {
        #        return true;
        #    }
        #
        #    //Are their values different ?
        #    if (type1.value() != type2.value())
        #    {
        #        return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: AnyTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #AnyTest
    PROPERTIES
      Name                #AnyTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class AnyTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testConpeek
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testConpeek()
        #{
        #    container con = [1, '', 31\01\2019, ['inside'], 2019-01-31T13:00:00];
        #    Any any;
        #    ;
        #
        #    any = Any::conpeek(con, 1);
        #    this.assertEquals(conpeek(con,1), any.value());
        #
        #    any = Any::conpeek(con, 2);
        #    this.assertEquals(conpeek(con, 2), any.value());
        #
        #    any = Any::conpeek(con, 3);
        #    this.assertEquals(conpeek(con, 3), any.value());
        #
        #    any = Any::conpeek(con, 4);
        #    this.assertEquals(conpeek(con, 4), any.value());
        #
        #    any = Any::conpeek(con, 5);
        #    this.assertEquals(conpeek(con, 5), any.value());
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testConstruct()
        #{
        #    //TO DO проверить все типы
        #    int i = 1;
        #    str s = 'test';
        #    Voucher v = 'voucher';
        #    Any any;
        #    ;
        #
        #    any = Any::construct(i);
        #    this.assertEquals(i, any.value());
        #
        #    any = Any::construct(s);
        #    this.assertEquals(s, any.value());
        #
        #    any = Any::construct(v);
        #    this.assertEquals(v, any.value());
        #}
      ENDSOURCE
      SOURCE #testEqualsTo
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testEqualsTo()
        #{
        #    //TO DO проверить все типы
        #    int i = 1;
        #    str s = 'test';
        #    Voucher v = 'voucher';
        #    Date d = systemdateget();
        #    utcdatetime dt = DateTimeUtil::utcNow();
        #    container c = [1, '', d];
        #
        #    Any any1 = Any::construct(i);
        #    Any any2;
        #    ;
        #
        #    any2 = Any::construct(i);
        #    this.assertTrue(any1.equalsTo(any2));
        #    this.assertTrue(any2.equalsTo(any1));
        #
        #    this.assertFalse(any1.equalsTo(null));
        #    this.assertFalse(any2.equalsTo(null));
        #
        #    any2 = Any::construct(s);
        #    this.assertFalse(any1.equalsTo(any2));
        #    this.assertFalse(any2.equalsTo(any1));
        #
        #    any2 = Any::construct(v);
        #    this.assertFalse(any1.equalsTo(any2));
        #    this.assertFalse(any2.equalsTo(any1));
        #
        #    any2 = Any::construct(d);
        #    this.assertFalse(any1.equalsTo(any2));
        #    this.assertFalse(any2.equalsTo(any1));
        #
        #    any2 = Any::construct(dt);
        #    this.assertFalse(any1.equalsTo(any2));
        #    this.assertFalse(any2.equalsTo(any1));
        #
        #    any2 = Any::construct(c);
        #    this.assertFalse(any1.equalsTo(any2));
        #    this.assertFalse(any2.equalsTo(any1));
        #}
      ENDSOURCE
      SOURCE #testField
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testField()
        #{
        #    UserInfo userInfo;
        #    Any any;
        #    ;
        #
        #    select firstOnly userInfo;
        #
        #    any = Any::field(userInfo, fieldnum(Userinfo, RecId));
        #    this.assertEquals(userInfo.RecId, any.value());
        #
        #    any = Any::field(userInfo, fieldnum(Userinfo, dataAreaId));
        #    this.assertEquals(userInfo.dataAreaId, any.value());
        #
        #    any = Any::field(userInfo, fieldnum(Userinfo, createdDateTime));
        #    this.assertEquals(userInfo.createdDateTime, any.value());
        #}
      ENDSOURCE
      SOURCE #testIsEqual
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsEqual()
        #{
        #    //TO DO проверить все типы
        #    int i = 1;
        #    str s = 'test';
        #    Voucher v = 'voucher';
        #    Date d = systemdateget();
        #    utcdatetime dt = DateTimeUtil::utcNow();
        #    container c = [1, '', d];
        #
        #    Any any1 = Any::construct(i);
        #    Any any2;
        #    ;
        #
        #    any2 = Any::construct(i);
        #    this.assertTrue(Any::isEqual(any1, any2));
        #    this.assertTrue(Any::isEqual(any2, any1));
        #
        #    this.assertTrue(Any::isEqual(null, null));
        #    this.assertFalse(Any::isEqual(any1, null));
        #    this.assertFalse(Any::isEqual(null, any2));
        #
        #    any2 = Any::construct(s);
        #    this.assertFalse(Any::isEqual(any1, any2));
        #    this.assertFalse(Any::isEqual(any2, any1));
        #
        #    any2 = Any::construct(v);
        #    this.assertFalse(Any::isEqual(any1, any2));
        #    this.assertFalse(Any::isEqual(any2, any1));
        #
        #    any2 = Any::construct(d);
        #    this.assertFalse(Any::isEqual(any1, any2));
        #    this.assertFalse(Any::isEqual(any2, any1));
        #
        #    any2 = Any::construct(dt);
        #    this.assertFalse(Any::isEqual(any1, any2));
        #    this.assertFalse(Any::isEqual(any2, any1));
        #
        #    any2 = Any::construct(c);
        #    this.assertFalse(Any::isEqual(any1, any2));
        #    this.assertFalse(Any::isEqual(any2, any1));
        #}
      ENDSOURCE
      SOURCE #testToString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testToString()
        #{
        #    //TO DO проверить все типы
        #    Any any;
        #    ;
        #
        #    any = Any::construct(1);
        #    this.assertEquals('1', any.toString());
        #
        #    any = Any::construct('test');
        #    this.assertEquals('test', any.toString());
        #
        #    any = Any::construct(31\12\2019);
        #    this.assertEquals(strfmt('%1',31\12\2019), any.toString());
        #
        #    any = Any::construct(2019-12-31T13:01:00);
        #    this.assertEquals(strfmt('%1',2019-12-31T13:01:00), any.toString());
        #
        #    any = Any::construct([1, '', [31\12\2019]]);
        #    this.assertEquals('1,,31.12.2019', any.toString());
        #
        #    any = Any::construct(appl);
        #    this.assertEquals('Class', any.toString());
        #
        #    any = Any::construct(SysUserInfo::find());
        #    this.assertEquals('Record', any.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: AnyPrevCurrent unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #AnyPrevCurrent
    PROPERTIES
      Name                #AnyPrevCurrent
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #changed
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// сюда можно передать параметр любого типа, включая объект типа Any
        #final public boolean changed(anytype newCurrent = null)
        #{
        #    boolean ret;
        #
        #    if( !prmisdefault(newCurrent) )
        #    {
        #        this.current(newCurrent);
        #    }
        #
        #    ret = prev && !Any::isEqual(curr, prev);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #final class AnyPrevCurrent
        #{
        #    Any curr;
        #    Any prev;
        #}
      ENDSOURCE
      SOURCE #current
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// сюда можно передать параметр любого типа, включая объект типа Any
        #final public anytype current(anytype newCurrent = null)
        #{
        #    anytype ret;
        #
        #    if( !prmIsDefault(newCurrent) )
        #    {
        #        prev = curr;
        #        curr = Any::construct(newCurrent);
        #    }
        #
        #    if( curr )
        #    {
        #        ret = curr.value();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #prev
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// сюда можно передать параметр любого типа, включая объект типа Any
        #final public anytype prev(anytype newPrev = null)
        #{
        #    anytype ret;
        #
        #    if( !prmIsDefault(newPrev) )
        #    {
        #        prev = Any::construct(newPrev);
        #    }
        #
        #    if( prev )
        #    {
        #        ret = prev.value();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public void reset()
        #{
        #    prev = null;
        #    curr = null;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static AnyPrevCurrent construct()
        #{
        #    return new AnyPrevCurrent();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictClass unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictClass
    PROPERTIES
      Name                #SysDictClass
      Extends             #DictClass
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #allowMakeObject
        #/*
        #    This methods will return false, if:
        #     * The class is abstract
        #     * The class doesn't implement required abstract methods
        #     * The new method has parameters
        #*/
        #public boolean allowMakeObject()
        #{
        #    str text;
        #    XppCompiler         compiler;
        #    ExecutePermission   permission;
        #    ;
        #
        #    if (this.isAbstract())
        #        return false;
        #
        #    permission = new ExecutePermission();
        #    permission.assert();
        #
        #    // BP deviation documented
        #    compiler = new XppCompiler();
        #    text = strfmt('%1 test(){return new %1();}',this.name());
        #
        #    return compiler.compile(text);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysDictClass extends DictClass implements SysDictXmlReflectionProvider, SysDictXmlDocumentationProvider
        #{
        #    #XmlDocumentation
        #}
      ENDSOURCE
      SOURCE #hasObjectMethod
        #boolean hasObjectMethod(
        #    identifiername  methodName
        #    )
        #{
        #    SysDictMethod   dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod,this.id(),methodName);
        #
        #    if (! dictMethod)
        #        return false;
        #
        #    if (! dictMethod.compiledOk())
        #        return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #hasStaticMethod
        #boolean hasStaticMethod(identifiername  methodName)
        #{
        #    SysDictMethod   dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod,this.id(),methodName);
        #
        #    if (! dictMethod)
        #        return false;
        #
        #    if (! dictMethod.compiledOk())
        #        return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #implementedBy
        #//Returns set of classid's of those classes that are implementing the specified interface (_id).
        #public List implementedBy()
        #{
        #    Dictionary      dictionary = new Dictionary();
        #    SysDictClass    sysDictClass;
        #    List            implementList = new List(Types::Integer);
        #    List            classList = new List(Types::Integer);
        #    Counter         counter;
        #    int             classCount;
        #    classId         classId;
        #    ;
        #
        #    classCount = dictionary.classCnt();
        #    for (counter=1;counter<=classCount;counter++)
        #    {
        #        classId = dictionary.classCnt2Id(counter);
        #        sysDictClass = new SysDictClass(classId);
        #
        #        if (sysDictClass.isImplementing(this.id()))
        #            implementList.addEnd(classId);
        #    }
        #
        #    return implementList;
        #}
      ENDSOURCE
      SOURCE #isExtending
        #//Extended version of the DictClass.extend(.) that checks if the object - or
        #//any of its superclasses are extending the specified class
        #boolean isExtending(classId _superClassId)
        #{
        #    boolean ret = false;
        #    SysDictClass sysDictClass;
        #    ;
        #
        #    if (this.extend() == _superClassId)
        #    {
        #        ret = true;
        #    }
        #
        #    if (!ret && this.extend())
        #    {
        #        sysDictClass = new SysDictClass(this.extend());
        #        ret = sysDictClass.isExtending(_superClassId);
        #    }
        #
        #    return ret;
        #}
        #
      ENDSOURCE
      SOURCE #isImplementing
        #//Extended version of the DictClass.implements(.) that checks if the object - or
        #//any of its superclasses are implementing the specified interface
        #boolean isImplementing(classId _interfaceId)
        #{
        #    int local;
        #    boolean ret = false;
        #    SysDictClass    sysDictClass;
        #    int             implementCount
        #    ;
        #    if (this.id() == _interfaceId)
        #        return true;
        #
        #    implementCount = this.implementsCnt();
        #    for (local=1;local<=implementCount;local++)
        #    {
        #        if (this.implements(local) == _interfaceId)
        #        {
        #            ret = true;
        #            break;
        #        }
        #        sysDictClass = new SysDictClass(this.implements(local));
        #        if(sysDictClass && sysDictClass.isImplementing(_interfaceId))
        #        {
        #            ret = true;
        #            break;
        #        }
        #    }
        #
        #    if (!ret && this.extend())
        #    {
        #        sysDictClass = new SysDictClass(this.extend());
        #        if (sysDictClass)
        #            ret = sysDictClass.isImplementing(_interfaceId);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isInheritedVariable
        #//
        #// Check if the variable is an inherited variable.
        #// Need to do this check because the classDeclartion
        #// method returns all the inherited variables, not just
        #// the local variables.
        #//
        #//
        #
        #public boolean isInheritedVariable( str _varName, Types _varType, int _varId )
        #{
        #    #VisioUml
        #    boolean             isFound = false;
        #    DictMethod          objectMethod;
        #
        #    int                 varIndex;
        #    str                 varName;
        #    Types               varType;
        #    int                 varId;
        #    SysDictClass        parent;
        #    ;
        #
        #    //
        #    // Check this class
        #    //
        #
        #    objectMethod =  new DictMethod( UtilElementType::ClassInstanceMethod, this.id(), #classDeclaration );
        #    for ( varIndex=1; varIndex <= objectMethod.varCnt(); varIndex++ )
        #    {
        #        varName = objectMethod.varName( varIndex );
        #        varType = objectMethod.varType( varIndex );
        #        varId = objectMethod.varId( varIndex );
        #
        #        if ( strlen( varName ) == strlen( _varName ) &&
        #             varName == _varName &&
        #             varType == _varType &&
        #             varId == _varId )
        #        {
        #            isFound = true;
        #            break;
        #        }
        #    }
        #
        #    // Check parent class
        #
        #    if ( !isFound )
        #    {
        #        parent = new SysDictClass( this.extend() );
        #
        #        if ( parent )
        #        {
        #            isFound = parent.isInheritedVariable( _varName, _varType, _varId );
        #        }
        #    }
        #
        #    return isFound;
        #}
        #
      ENDSOURCE
      SOURCE #isMethodActual
        #boolean isMethodActual(identifiername _methodName)
        #{
        #    int i;
        #    for (i=1; i<=this.objectMethodCnt(); i++)
        #    {
        #        if (this.objectMethod(i) == _methodName)
        #            return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isSystemClass
        #public boolean isSystemClass()
        #{
        #    classId id = this.id();
        #
        #    switch (id)
        #    {
        #        case classnum(VersionControl):
        #        case classnum(Global):
        #        case classnum(ClassFactory):
        #        case classnum(Info):
        #        case classnum(Site):
        #        case classnum(Company):
        #        case classnum(Application):
        #        case classnum(Session):
        #            return false;
        #    }
        #
        #    return isSysId(id);
        #}
      ENDSOURCE
      SOURCE #methods
        #public Set methods(
        #    boolean _includeInstanceMethods = true,
        #    boolean _includeStaticMethods = true,
        #    boolean _includeInheritedMethods = true)
        #{
        #    return this.methodsRecursive(_includeInstanceMethods, _includeStaticMethods, _includeInheritedMethods, null);
        #}
      ENDSOURCE
      SOURCE #methodsActualClassId
        #classId methodsActualClassId(identifiername _methodName)
        #{
        #    if (this.isMethodActual(_methodName))
        #        return this.id();
        #
        #    return this.superMethodsClassId(_methodName);
        #}
      ENDSOURCE
      SOURCE #methodsRecursive
        #protected Set methodsRecursive(
        #    boolean _includeInstanceMethods,
        #    boolean _includeStaticMethods,
        #    boolean _includeInheritedMethods,
        #    Set     _overriddenMethods)
        #{
        #    #SysBPCheck
        #    int cnt;
        #    int i;
        #    classId classId = this.id();
        #    SysDictMethod dictMethod;
        #    Set set = new Set(Types::Class);
        #    Set setMethodName = new Set(Types::String);
        #
        #    if (_overriddenMethods)
        #    {
        #        setMethodName = _overriddenMethods;
        #    }
        #    else
        #    {
        #        setMethodName = new Set(Types::String);
        #    }
        #
        #    //
        #    // Include instance methods
        #    //
        #    if (_includeInstanceMethods)
        #    {
        #        cnt = this.objectMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            if (this.objectMethod(i) != #MethodNameClassDeclaration)
        #            {
        #                //
        #                // Skip if method is overridden
        #                //
        #                if (!_overriddenMethods || !_overriddenMethods.in(this.objectMethod(i)))
        #                {
        #                    dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classId, this.objectMethod(i));
        #                    set.add(dictMethod);
        #                    setMethodName.add(dictMethod.name());
        #                }
        #            }
        #        }
        #    }
        #
        #    //
        #    // Include static methods
        #    //
        #    if (_includeStaticMethods)
        #    {
        #        cnt = this.staticMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, classId, this.staticMethod(i));
        #            set.add(dictMethod);
        #        }
        #    }
        #
        #    //
        #    // Include inherited methods
        #    //
        #    if (_includeInstanceMethods && _includeInheritedMethods)
        #    {
        #        if (this.extend())
        #        {
        #            set = Set::union(set, new SysDictClass(this.extend()).methodsRecursive(true, false, true, setMethodName));
        #        }
        #        else
        #        {
        #            //
        #            // Include Object, even if the inheritance isn't explicitly specified
        #            //
        #            if (this.name() != classstr(Object))
        #            {
        #                set = Set::union(set, new SysDictClass(classnum(Object)).methodsRecursive(true, false, true, setMethodName));
        #            }
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #objectMethods2ClassId
        #public Map objectMethods2ClassId(boolean _includeExtendedClasses = true)
        #{
        #    Map             methodNames = new Map(Types::String,Types::Integer);
        #    int             i;
        #
        #    if (_includeExtendedClasses && this.extend())
        #    {
        #        methodNames = new SysDictClass(this.extend()).objectMethods2ClassId(true);
        #    }
        #
        #    for (i=1; i<=this.objectMethodCnt(); i++)
        #    {
        #        if (! methodNames.exists(this.objectMethod(i)))
        #        {
        #            methodNames.insert(this.objectMethod(i),this.id());
        #        }
        #    }
        #
        #    return methodNames;
        #}
      ENDSOURCE
      SOURCE #ObjectMethodSet
        #public Set objectMethodSet(boolean _includeInheritedMethods = true)
        #{
        #    Set methodNames = new Set(Types::String);
        #    int i;
        #
        #    for (i=1; i<=this.objectMethodCnt(); i++)
        #    {
        #        methodNames.add(this.objectMethod(i));
        #    }
        #
        #    if (_includeInheritedMethods && this.extend())
        #    {
        #        methodNames = Set::union(methodNames, new SysDictClass(this.extend()).objectMethodSet(true));
        #    }
        #    return methodNames;
        #}
      ENDSOURCE
      SOURCE #path
        #xRefPath path()
        #{
        #    return xRefNames::calcPath(xRefKind::Class,this.name(),'',this.id());
        #}
      ENDSOURCE
      SOURCE #pathForDeveloperDocumentation
        #public TreeNodePath pathForDeveloperDocumentation()
        #{
        #    #AOT
        #    TreeNodePath treeNodePath;
        #
        #    if (this.isSystemClass())
        #    {
        #        treeNodePath = #SystemClassesPath+#AOTDelimiter+this.name();
        #    }
        #    else
        #    {
        #        treeNodePath = #ApplicationDeveloperDocClassesPath+#AOTDelimiter+this.name();
        #    }
        #    return treeNodePath;
        #}
      ENDSOURCE
      SOURCE #superMethodsClassId
        #classId superMethodsClassId(identifiername _methodName)
        #{
        #    SysDictClass dictClass = new SysDictClass(this.extend());
        #
        #    while (dictClass)
        #    {
        #        if (dictClass.isMethodActual(_methodName))
        #        {
        #            return dictClass.id();
        #        }
        #
        #        dictClass = new SysDictClass(dictClass.extend());
        #    }
        #
        #    // no actual method found for this.name(),_methodName;
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #syntax
        #public str syntax()
        #{
        #    #SysBPCheck
        #    SysDictMethod classDeclarationDictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, this.id(), #MethodNameClassDeclaration);
        #
        #    if (classDeclarationDictMethod)
        #        return classDeclarationDictMethod.syntax();
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('%1 [%2]', this.name(), this.id());
        #}
      ENDSOURCE
      SOURCE #treeNode
        #TreeNode treeNode()
        #{
        #    TreeNode treeNode = TreeNode::findNode(this.path());
        #    if (!treeNode)
        #    {
        #        throw error(strfmt("@SYS28152",this.path()));
        #    }
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #xmlDocumentation
        #public XML xmlDocumentation()
        #{
        #    //
        #    // Read from file if available
        #    //
        #    XML xml = this.xmlDocumentationFromFile();
        #
        #    if (!xml)
        #    {
        #        //
        #        // If file is not available, extract from the source code
        #        //
        #        xml = this.xmlDocumentationFromMethods();
        #    }
        #    return xml;
        #}
      ENDSOURCE
      SOURCE #xmlDocumentationFromFile
        #//
        #// This method can only be used on the client tier.
        #//
        #protected XML xmlDocumentationFromFile()
        #{
        #    int infologLine;
        #    InfologData errorData;
        #    SysInfologEnumerator enum;
        #    str errorMessage;
        #    SysTreeNode sysTreeNode = SysTreeNode::newTreeNodePath(this.path());
        #    XML xml;
        #    SysVersionControlSystem versionControlSystem;
        #    Filename filename;
        #    str filePath;
        #    str fileExtension;
        #    XmlReader xmlReader;
        #    #file
        #
        #    if (this.objectOnServer())
        #        throw error(strfmt("@SYS19306", funcname()));
        #
        #    if (versioncontrol && versioncontrol.parmSysVersionControlSystem())
        #    {
        #        versionControlSystem = versioncontrol.parmSysVersionControlSystem();
        #        [filePath, filename, fileExtension] = fileNameSplit(versionControlSystem.fileName(sysTreeNode));
        #
        #        filename = filePath + filename + #xml;
        #        if (WinAPI::fileExists(filename))
        #        {
        #            //
        #            // Read the contents of the <members> tag
        #            //
        #            infologLine = infolog.line();
        #            try
        #            {
        #                //BP Deviation documented
        #                xmlReader = XmlReader::newFile(filename);
        #                while (xmlReader.read())
        #                {
        #                    if (xmlReader.nodeType() == XmlNodeType::Element &&
        #                        xmlReader.name() == #XmlMembers)
        #                    {
        #                        xml = xmlReader.readInnerXml();
        #                    }
        #                }
        #            }
        #            catch (Exception::Error)
        #            {
        #                errorData = infolog.cut(infologLine+1);
        #                enum = SysInfologEnumerator::newData(errorData);
        #                while (enum.moveNext())
        #                {
        #                    errorMessage += (errorMessage?',':'')+strrem(enum.currentMessage(), '\n\t');
        #                }
        #                xml = strfmt('<member name="!:%1 (%2)"/>', this.name(), errorMessage);
        #            }
        #        }
        #    }
        #    return xml;
        #}
      ENDSOURCE
      SOURCE #xmlDocumentationFromMethods
        #protected XML xmlDocumentationFromMethods()
        #{
        #    TextBuffer textBuffer = new TextBuffer();
        #    Set methods = this.methods(true, true, false);
        #    SetEnumerator enum;
        #    SysDictMethod dictMethod;
        #    #SysBpCheck
        #;
        #    //
        #    // Include ClassDeclaration in the list of methods, as it contains the documentation for the class.
        #    //
        #
        #    methods.add(new SysDictMethod(UtilElementType::ClassInstanceMethod, this.id(), #MethodNameClassDeclaration));
        #
        #    enum = methods.getEnumerator();
        #    while (enum.moveNext())
        #    {
        #        dictMethod = enum.current();
        #        textBuffer.appendText(dictMethod.xmlDocumentation(true));
        #    }
        #
        #    return textBuffer.getText();
        #}
      ENDSOURCE
      SOURCE #xmlQualifiedName
        #public XML xmlQualifiedName()
        #{
        #    return strfmt('T:%1', this.name());
        #}
      ENDSOURCE
      SOURCE #xmlReflection
        #public void xmlReflection(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlApi);
        #    _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedName());
        #
        #    this.xmlReflectionApiData(_xmlWriter);
        #    this.xmlReflectionTypeData(_xmlWriter);
        #    this.xmlReflectionFamily(_xmlWriter);
        #    this.xmlReflectionImplements(_xmlWriter);
        #    this.xmlReflectionSyntax(_xmlWriter);
        #    this.xmlReflectionElements(_xmlWriter);
        #    this.xmlReflectionContainers(_xmlWriter);
        #    this.xmlReflectionFile(_xmlWriter);
        #
        #    _xmlWriter.writeEndElement();
        #
        #    this.xmlReflectionMembers(_xmlWriter);
        #}
      ENDSOURCE
      SOURCE #xmlReflectionApiData
        #protected void xmlReflectionApiData(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlApiData);
        #    _xmlWriter.writeAttributeString(#XmlName, this.name());
        #    _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupType);
        #    _xmlWriter.writeAttributeString(#XmlSubGroup, this.isInterface() ? #XmlSubGroupInterface : #XmlSubGroupClass);
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionContainers
        #protected void xmlReflectionContainers(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlContainers);
        #    _xmlWriter.writeStartElement(#XmlType);
        #    _xmlWriter.writeAttributeString(#XmlApi, #XmlRootProject);
        #    _xmlWriter.writeEndElement();
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionElements
        #protected void xmlReflectionElements(XmlWriter _xmlWriter)
        #{
        #    #SysBPCheck
        #    SysDictMethod dictMethod;
        #    SetEnumerator enum = this.methods(true).getEnumerator();
        #
        #    _xmlWriter.writeStartElement(#XmlElements);
        #
        #    while (enum.moveNext())
        #    {
        #        dictMethod = enum.current();
        #        _xmlWriter.writeStartElement(#XmlElement);
        #        _xmlWriter.writeAttributeString(#XmlApi, dictMethod.xmlQualifiedName());
        #        _xmlWriter.writeEndElement();
        #    }
        #
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionFamily
        #protected void xmlReflectionFamily(XmlWriter _xmlWriter)
        #{
        #    SysDictClass sysDictClass;
        #    List ancestors = new List(Types::String);
        #    Set descendents = new Set(Types::String);
        #    boolean objectFound;
        #
        #void writeList(Enumerator enum)
        #{
        #    while (enum.moveNext())
        #    {
        #        _xmlWriter.writeStartElement(#XmlType);
        #        _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', enum.current()));
        #        _xmlWriter.writeEndElement();
        #    }
        #}
        #;
        #    //
        #    // Find ancestors
        #    //
        #    sysDictClass = new SysDictClass(this.extend());
        #    while (sysDictClass)
        #    {
        #        if (sysDictClass.id() == classnum(Object))
        #            objectFound = true;
        #
        #        ancestors.addEnd(sysDictClass.name());
        #        sysDictClass = new SysDictClass(sysDictClass.extend());
        #    }
        #
        #    if (!objectFound && this.id() != classnum(Object))
        #    {
        #        ancestors.addEnd(classstr(Object));
        #    }
        #
        #    //
        #    // Find descendents
        #    //
        #    descendents = Set::create(xRefTypeHierarchy::descendents(Types::Class, this.id()));
        #
        #    //
        #    // Write xml
        #    //
        #    _xmlWriter.writeStartElement(#XmlFamily);
        #
        #    _xmlWriter.writeStartElement(#XmlAncestors);
        #    writeList(ancestors.getEnumerator());
        #    _xmlWriter.writeEndElement();
        #
        #    _xmlWriter.writeStartElement(#XmlDescendents);
        #    writeList(descendents.getEnumerator());
        #    _xmlWriter.writeEndElement();
        #
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionFile
        #protected void xmlReflectionFile(XmlWriter _xmlWriter)
        #{
        #    TreeNodePath treeNodePath = this.pathForDeveloperDocumentation();
        #    DocNode docNode;
        #
        #    if (treeNodePath)
        #    {
        #        docNode = TreeNode::findNode(treeNodePath);
        #
        #        if (docNode &&
        #            docNode.hTMLHelpEnabled() &&
        #            docNode.hTMLHelpTopic())
        #        {
        #            _xmlWriter.writeElementString(#XmlFile, docNode.hTMLHelpTopic());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionImplements
        #protected void xmlReflectionImplements(XmlWriter _xmlWriter)
        #{
        #    int i;
        #
        #    if (this.implementsCnt())
        #    {
        #        _xmlWriter.writeStartElement(#XmlImplements);
        #
        #        for (i=1; i<=this.implementsCnt(); i++)
        #        {
        #            _xmlWriter.writeStartElement(#XmlType);
        #            _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', extendedTypeId2DisplayName(Types::Class, this.implements(i))));
        #            _xmlWriter.writeEndElement();
        #        }
        #        _xmlWriter.writeEndElement();
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionMembers
        #protected void xmlReflectionMembers(XmlWriter _xmlWriter)
        #{
        #    SysDictXmlReflectionProvider xmlReflectionProvider;
        #    SetEnumerator enum = this.methods(true, true, false).getEnumerator();
        #
        #    while (enum.moveNext())
        #    {
        #        xmlReflectionProvider = SysDictClass::as(enum.current(), classnum(SysDictXmlReflectionProvider));
        #        if (xmlReflectionProvider)
        #        {
        #            xmlReflectionProvider.xmlReflection(_xmlWriter);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionSyntax
        #protected void xmlReflectionSyntax(XmlWriter _xmlWriter)
        #{
        #    _xmlWriter.writeElementString(#XmlSyntax, this.syntax());
        #}
      ENDSOURCE
      SOURCE #xmlReflectionTypeData
        #protected void xmlReflectionTypeData(XmlWriter _xmlWriter)
        #{
        #    _xmlWriter.writeStartElement(#XmlTypeData);
        #    _xmlWriter.writeAttributeString(#XmlId, int2str(this.id()));
        #    _xmlWriter.writeAttributeString(#XmlFinal, this.isFinal() ? 'true' : 'false');
        #    _xmlWriter.writeAttributeString(#XmlAbstract, this.isAbstract() ? 'true' : 'false');
        #    _xmlWriter.writeAttributeString(#XmlRunOn, strfmt('%1', this.RunMode()));
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #as
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static public Object as(Object _class, classId _classId)
        #{
        #    if (_class && SysDictClass::is(_class, _classId))
        #        return _class;
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysDictClass construct(ClassId classId)
        #{
        #    return new SysDictClass(classId);
        #}
      ENDSOURCE
      SOURCE #getImplements
        #//Returns set of classid's of those classes that are implementing the specified interface (_id).
        #//If _onlyLeafClasses is specified as true no superclasses are included.
        #public static Set getImplements(classId _id, boolean _onlyLeafClasses = true)
        #{
        #    Dictionary dictionary = new Dictionary();
        #    SysDictClass sysDictClass;
        #    boolean removed;
        #    Set set = new Set(Types::Integer);
        #    SetIterator setIterator = new SetIterator(set);
        #    int i;
        #    ;
        #
        #    for (i=1;i<=dictionary.classCnt();i++)
        #    {
        #        sysDictClass = new SysDictClass(dictionary.classCnt2Id(i));
        #        if (sysDictClass.isImplementing(_id))
        #        {
        #            set.add(sysDictClass.id());
        #        }
        #    }
        #
        #    if (_onlyLeafClasses)
        #    {
        #        //Only leaf classes are included in return set
        #        setIterator.begin();
        #        while (setIterator.more())
        #        {
        #            removed = false;
        #            sysDictClass = new SysDictClass(setIterator.value());
        #            while (sysDictClass.extend())
        #            {
        #                removed = removed | set.remove(sysDictClass.extend());
        #                sysDictClass = new SysDictClass(sysDictClass.extend());
        #            }
        #            if (removed)
        #                setIterator.begin(); //restart search
        #            else
        #                setIterator.next();  //
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #invokeObjectMethod
        #public static anytype invokeObjectMethod(Object _object, identifiername _methodName, boolean _tryBaseClass = false)
        #{
        #    DictClass  dictClass = new DictClass(classidget(_object));
        #    DictClass  dictClassBase;
        #    DictMethod dictMethod;
        #    int i;
        #;
        #    for (i=1; i<=dictClass.objectMethodCnt(); i++)
        #    {
        #        if (dictClass.objectMethod(i) == _methodName)
        #        {
        #            dictMethod = dictClass.objectMethodObject(i);
        #            if (dictMethod.parameterCnt() == 0)
        #            {
        #                // invokeObjectMethod is listed as a dangerous API. Just suppress BP error;
        #                // CAS is implemented by DictClass::callObject.
        #
        #                // BP deviation documented
        #                return dictClass.callObject(_methodName, _object);
        #            }
        #            throw error(strfmt("@SYS87800", _methodName));
        #        }
        #    }
        #
        #    if (_tryBaseClass && dictClass.extend())
        #    {
        #        dictClassBase = new DictClass(dictClass.extend());
        #
        #        // BP deviation documented
        #        return SysDictClass::invokeObjectMethod(dictClassBase.makeObject(), _methodName, _tryBaseClass);
        #    }
        #
        #    throw error(strfmt("@SYS60360", _methodName));
        #}
      ENDSOURCE
      SOURCE #is
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean is(Object _class, classId _classId)
        #{
        #    boolean ret = false;
        #
        #    if( _classId )
        #    {
        #        ret = SysDictClass::isEqualOrSuperclass(classidget(_class), _classId);
        #
        #        if( !ret )
        #        {
        #            ret = new SysDictClass(classidget(_class)).isImplementing(_classId);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isEqualOrSuperclass
        #static boolean isEqualOrSuperclass(     // not: isSuperclass
        #    classId  _id,
        #    classId  _potentialAncestorId
        #    )
        #{
        #    // is Equal?
        #
        #    if (_id == _potentialAncestorId)
        #        return true;
        #
        #    // is ascendant?
        #    return SysDictClass::isSuperclass(_id,_potentialAncestorId);
        #}
      ENDSOURCE
      SOURCE #isSuperclass
        #static boolean isSuperclass(     // not: IsEqualOrSuperclass
        #    classId  _id,
        #    classId  _potentialAncestorId
        #    )
        #{
        #    DictClass dictClass = new DictClass(_id);
        #    while (dictClass)
        #    {
        #        if (dictClass.extend() == _potentialAncestorId)
        #            return true;
        #        dictClass = new DictClass(dictClass.extend());
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #subClassListEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static ListEnumerator subClassListEnumerator(ClassId classId)
        #{
        #    DictClass        dc =   new DictClass(classId);
        #    List             list = dc ? dc.extendedBy() : null;
        #    ListEnumerator   le   = list ? list.getEnumerator() : null;
        #
        #    return le;
        #}
      ENDSOURCE
      SOURCE #superClass
        #static classId superClass(
        #    classId  _id
        #    )
        #{
        #    DictClass dictClass = new DictClass(_id);
        #    return dictClass.extend();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictEnum unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictEnum
    PROPERTIES
      Name                #SysDictEnum
      Extends             #DictEnum
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysDictEnum extends DictEnum implements SysDictXmlReflectionProvider
        #{
        #    #Properties
        #    #XmlDocumentation
        #}
      ENDSOURCE
      SOURCE #displayLength
        #/*
        #    returns the effective DisplayLength (in chars) of the enum
        #    defined or
        #    effective based on enumerators
        #*/
        #int displayLength()
        #{
        #    throw error(strfmt("@SYS75628",funcname(),this.name()));
        #}
        #
      ENDSOURCE
      SOURCE #extendedTypeId
        #/*
        #    Returns the combined typeId used in the dialog system
        #*/
        #extendedTypeId extendedTypeId()
        #{
        #    return this.id() << 16 | Types::Enum;
        #}
      ENDSOURCE
      SOURCE #firstValue
        #int firstValue()
        #{
        #    ;
        #    return this.index2Value(0);
        #}
      ENDSOURCE
      SOURCE #helpLabelId
        #/*
        #    returns the labelId of the enum's Help
        #*/
        #LabelId helpLabelId()
        #{
        #    setprefix(this.name());
        #
        #    if (isSysId(this.id()))
        #    {
        #        return '';
        #    }
        #    if (this.help()) // a Help is defined here
        #    {
        #        return findProperty(this.treeNode().AOTgetProperties(),#PropertyHelp);
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #labelLabel
        #/*
        #    returns the labelId of the enum's Label
        #*/
        #LabelId labelLabel()
        #{
        #    setprefix(this.name());
        #
        #    if (isSysId(this.id()))
        #    {
        #        return '';
        #    }
        #    if (this.label()) // a label is defined here
        #    {
        #        return findProperty(this.treeNode().AOTgetProperties(),#PropertyLabel);
        #    }
        #    return '';
        #}
      ENDSOURCE
      SOURCE #lastValue
        #int lastValue()
        #{
        #    return this.index2Value(this.values() - 1);
        #}
      ENDSOURCE
      SOURCE #nextValue
        #int nextValue(int value)
        #{
        #    Counter     idx = this.value2Index(value);
        #    Counter     newIdx = idx + 1;
        #    ;
        #    if (idx == this.values() - 1)
        #        newIdx = 0;
        #    return this.index2Value(newIdx);
        #}
      ENDSOURCE
      SOURCE #path
        #xRefPath path()
        #{
        #    return xRefNames::calcPath(xRefKind::Enum,this.name(),'',this.id());
        #}
      ENDSOURCE
      SOURCE #pathForDeveloperDocumentation
        #public TreeNodePath pathForDeveloperDocumentation()
        #{
        #    #AOT
        #    TreeNodePath treeNodePath;
        #
        #    if (isSysId(this.id()))
        #    {
        #        treeNodePath = #SystemEnumsPath+#AOTDelimiter+this.name();
        #    }
        #    else
        #    {
        #        //
        #        // Enums not listed under Application Developer Documentation
        #        //
        #        treeNodePath = '';
        #    }
        #
        #    return treeNodePath;
        #}
      ENDSOURCE
      SOURCE #treeNode
        #TreeNode treeNode()
        #{
        #    TreeNode treeNode = TreeNode::findNode(this.path());
        #    if (!treeNode)
        #    {
        #        throw error(strfmt("@SYS28152",this.path()));
        #    }
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #value2Index
        #int value2Index(int value)
        #{
        #    Counter     enumChoices = this.values();
        #    Counter     idx;
        #
        #    for (idx = 0; idx < enumChoices; idx++)
        #    {
        #        if (this.index2Symbol(idx) == this.value2Symbol(value))
        #            return idx;
        #    }
        #    throw error(strfmt("@SYS54195", funcname()));
        #}
      ENDSOURCE
      SOURCE #xmlQualifiedName
        #public XML xmlQualifiedName()
        #{
        #    return strfmt('T:%1', this.name());
        #}
      ENDSOURCE
      SOURCE #xmlQualifiedNameForEntry
        #protected str xmlQualifiedNameForEntry(int _entry)
        #{
        #    return strfmt('F:%1::%2', this.name(), this.index2Symbol(_entry));
        #}
      ENDSOURCE
      SOURCE #xmlReflection
        #public void xmlReflection(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlApi);
        #    _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedName());
        #
        #    this.xmlReflectionApiData(_xmlWriter);
        #    this.xmlReflectionTypeData(_xmlWriter);
        #
        #    this.xmlReflectionContainers(_xmlWriter);
        #    this.xmlReflectionElements(_xmlWriter);
        #    this.xmlReflectionLabel(_xmlWriter);
        #    this.xmlReflectionHelpText(_xmlWriter);
        #
        #    _xmlWriter.writeEndElement();
        #
        #    this.xmlReflectionMembers(_xmlWriter);
        #
        #}
      ENDSOURCE
      SOURCE #xmlReflectionApiData
        #protected void xmlReflectionApiData(XmlWriter _xmlWriter)
        #{
        #    _xmlWriter.writeStartElement(#Xmlapidata);
        #    _xmlWriter.writeAttributeString(#XmlName, this.name());
        #    _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupType);
        #    _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubgroupEnum);
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionContainers
        #protected void xmlReflectionContainers(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlContainers);
        #    _xmlWriter.writeStartElement(#XmlType);
        #    _xmlWriter.writeAttributeString(#XmlApi, #XmlRootProject);
        #    _xmlWriter.writeEndElement();
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionElements
        #protected void xmlReflectionElements(XmlWriter _xmlWriter)
        #{
        #    int cnt;
        #    int i;
        #
        #    _xmlWriter.writeStartElement(#XmlElements);
        #
        #    cnt = this.values();
        #    for (i=0; i<cnt; i++)
        #    {
        #        _xmlWriter.writeStartElement(#XmlElement);
        #        _xmlWriter.writeAttributeString(#XmlApi, this.xmlQualifiedNameForEntry(i));
        #        _xmlWriter.writeEndElement();
        #    }
        #
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionHelpText
        #protected void xmlReflectionHelpText(XmlWriter _xmlWriter)
        #{
        #    LabelString helplabel = this.help();
        #;
        #    if (helplabel)
        #    {
        #        _xmlWriter.writeElementString(#XmlHelpText, helplabel);
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionLabel
        #protected void xmlReflectionLabel(XmlWriter _xmlWriter)
        #{
        #    LabelString label = this.label();
        #;
        #    if (label)
        #    {
        #        _xmlWriter.writeElementString(#XmlLabel, label);
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionMembers
        #protected void xmlReflectionMembers(XmlWriter _xmlWriter)
        #{
        #    int cnt;
        #    int i;
        #
        #    cnt = this.values();
        #    for (i=0; i<cnt; i++)
        #    {
        #        _xmlWriter.writeStartElement(#XmlApi);
        #        _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedNameForEntry(i));
        #
        #        _xmlWriter.writeStartElement(#XmlApiData);
        #        _xmlWriter.writeAttributeString(#XmlName, this.index2Symbol(i));
        #        _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupMember);
        #        _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubgroupEnumEntry);
        #        _xmlWriter.writeEndElement();
        #
        #        _xmlWriter.writeStartElement(#XmlTypeData);
        #        _xmlWriter.writeAttributeString(#XmlValue, int2str(this.index2Value(i)) );
        #        _xmlWriter.writeAttributeString(#XmlLabel, this.index2Label(i) );
        #        _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.index2ConfigurationKey(i)));
        #        _xmlWriter.writeEndElement();
        #
        #        _xmlWriter.writeEndElement();
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionTypeData
        #protected void xmlReflectionTypeData(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlTypeData);
        #    _xmlWriter.writeAttributeString(#XmlId, int2str(this.id()));
        #    _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.configurationKeyId()));
        #    _xmlWriter.writeAttributeString(#XmlEnumStyle, strfmt("%1", this.showAsRadio() ? FormControlType::RadioButton : FormControlType::ComboBox));
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #newFromEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysDictEnum newFromEnum(anytype enum)
        #{
        #    enumId          enumId          = DictEnum::value2id(enum);
        #    SysDictEnum     sysDictEnum     = new SysDictEnum(enumId);
        #
        #    return sysDictEnum;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysDictTable unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictTable
    PROPERTIES
      Name                #SysDictTable
      Extends             #DictTable
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #allowSecuritySetup
        #boolean allowSecuritySetup()
        #{
        #    if (this.isTmp()  ||
        #        this.isMap()  ||
        #        !this.securityKeyId() ||                          //If not, the table rights cannot be calculated if the user is a member of >1 group
        #        (this.configurationKeyId() && !isConfigurationkeyEnabled(this.configurationKeyId())))
        #        return false;
        #    return true;
        #}
      ENDSOURCE
      SOURCE #analysisSelection
        #/*
        #    returns the defined value of the table's AnalysisSelection property
        #*/
        #str analysisSelection()
        #{
        #    #Properties
        #    return findProperty(this.treeNode().AOTgetProperties(), #PropertyAnalysisSelection);
        #}
        #
      ENDSOURCE
      SOURCE #analysisVisibility
        #/*
        #  returns the defined value of the table's AnalysisVisibility property
        #*/
        #str analysisVisibility()
        #{
        #    #Properties
        #    return findProperty(this.treeNode().AOTgetProperties(),#PropertyAnalysisVisibility);
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #public class SysDictTable extends DictTable implements SysDictXmlReflectionProvider, SysDictXmlDocumentationProvider
        #{
        #    #AOT
        #    #XmlDocumentation
        #
        #    // Column methods
        #    int         colCnt;
        #    fieldId     col2Id[];
        #
        #}
      ENDSOURCE
      SOURCE #column2id
        #/*
        #Returns the extended fieldid, of the provided column.
        #Column could be an index used with the ResultSet class.
        #*/
        #fieldId column2id(int colno)
        #{
        #    if (! colCnt)
        #        this.columnArrBuild();
        #
        #    return col2Id[colno];
        #}
      ENDSOURCE
      SOURCE #columnArrBuild
        #/*
        #Builds the array used in column2Id()
        #*/
        #private void columnArrBuild()
        #{
        #    Counter     fieldcnt,a;
        #    DictField   df;
        #
        #    fieldcnt    = 1;
        #
        #    while (fieldcnt <= this.fieldCnt())
        #    {
        #        df = this.fieldObject(this.fieldCnt2Id(fieldcnt));
        #
        #        if (df.isSql())
        #            if (df.arraySize() > 1)
        #            {
        #                for (a=1;a<=df.arraySize();a++)
        #                {
        #                    colCnt++;
        #                    col2Id[colCnt] = fieldId2Ext(df.id(),a);
        #                }
        #            }
        #            else
        #            {
        #                colCnt++;
        #                col2Id[colCnt] = df.id();
        #            }
        #
        #        fieldcnt++;
        #    }
        #}
      ENDSOURCE
      SOURCE #columnCnt
        #int columnCnt()
        #{
        #    if (! colCnt)
        #        this.columnArrBuild();
        #
        #    return colCnt;
        #}
      ENDSOURCE
      SOURCE #fieldCntWithoutSys
        #int fieldCntWithoutSys()
        #{
        #    Counter i, noOfFields;
        #
        #    for (i=1;i<=this.fieldCnt();i++)
        #        if (! isSysId(this.fieldCnt2Id(i)))
        #            noOfFields++;
        #
        #    return noOfFields;
        #}
      ENDSOURCE
      SOURCE #fieldGroups
        #public Set fieldGroups()
        #{
        #    int cnt;
        #    int i;
        #    tableId tableId = this.id();
        #    SysDictFieldGroup sysDictFieldGroup;
        #    Set set = new Set(Types::Class);
        #
        #    //
        #    // Include field groups
        #    //
        #    cnt = this.fieldGroupCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictFieldGroup = new SysDictFieldGroup(tableId, this.fieldGroup(i));
        #        set.add(sysDictFieldGroup);
        #    }
        #    return set;
        #}
      ENDSOURCE
      SOURCE #fieldObject
        #SysDictField fieldObject(fieldId _fieldId)
        #{
        #    return new SysDictField(this.id(), _fieldId);
        #}
      ENDSOURCE
      SOURCE #fields
        #public Set fields()
        #{
        #    int cnt;
        #    int i;
        #    int j;
        #    tableId tableId = this.id();
        #    SysDictField sysDictField;
        #    SysDictField sysDictFieldArray;
        #    Set set = new Set(Types::Class);
        #
        #    //
        #    // Include fields
        #    //
        #    cnt = this.fieldCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));
        #
        #        //
        #        // Skip fields not stored in the database
        #        // This is typical system fields, like ModifiedBy, CreatedBy, etc.
        #        //
        #        if (sysDictField.saveContents())
        #        {
        #
        #            //
        #            // Include each array field separately
        #            //
        #            for (j=1; j<=sysDictField.arraySize(); j++)
        #            {
        #                sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
        #                set.add(sysDictFieldArray);
        #            }
        #        }
        #    }
        #    return set;
        #}
      ENDSOURCE
      SOURCE #fieldsWithEDT
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Set fieldsWithEDT(ExtendedTypeId edt)
        #{
        #    int cnt;
        #    int i;
        #    int j;
        #    tableId tableId = this.id();
        #    SysDictField sysDictField;
        #    SysDictField sysDictFieldArray;
        #    Set set = new Set(Types::Class);
        #
        #    if (!edt)
        #    {
        #        return set;
        #    }
        #
        #    //
        #    // Include fields
        #    //
        #    cnt = this.fieldCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));
        #
        #        //
        #        // Skip fields not stored in the database
        #        // This is typical system fields, like ModifiedBy, CreatedBy, etc.
        #        //
        #        if (sysDictField && sysDictField.saveContents() && SysDictType::isEqualOrExtending(sysDictField.extendedTypeId(), edt))
        #        {
        #            for (j=1; j<=sysDictField.arraySize(); j++)
        #            {
        #                sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
        #                set.add(sysDictFieldArray);
        #            }
        #        }
        #    }
        #    return set;
        #}
      ENDSOURCE
      SOURCE #fieldsWithEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public Set fieldsWithEnum(EnumId enumId)
        #{
        #    int cnt;
        #    int i;
        #    int j;
        #    tableId tableId = this.id();
        #    SysDictField sysDictField;
        #    SysDictField sysDictFieldArray;
        #    Set set = new Set(Types::Class);
        #
        #    if (!enumId)
        #    {
        #        return set;
        #    }
        #
        #    //
        #    // Include fields
        #    //
        #    cnt = this.fieldCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictField = new SysDictField(tableId, this.fieldCnt2Id(i));
        #
        #        //
        #        // Skip fields not stored in the database
        #        // This is typical system fields, like ModifiedBy, CreatedBy, etc.
        #        //
        #        if (sysDictField && sysDictField.saveContents() && sysDictField.enumId() == enumId)
        #        {
        #            for (j=1; j<=sysDictField.arraySize(); j++)
        #            {
        #                sysDictFieldArray = new SysDictField(tableId, this.fieldCnt2Id(i), j);
        #                set.add(sysDictFieldArray);
        #            }
        #        }
        #    }
        #    return set;
        #}
      ENDSOURCE
      SOURCE #FindAUniqueRelation
        #// Searches this tables relations (both explicit relationships and external data type relationships) to find at least one
        #// relationship that provides a unique link to an external table.
        #public indexId findAUniqueRelation(tableId externId)
        #{
        #    DictRelation    dictRelation;
        #    DictType        dictType;
        #    indexId         indexId;
        #    fieldId         fieldId;
        #    int             i;
        #    ;
        #    // Search the explicit relations
        #    for (i = 1; i <= this.relationCnt(); ++i)
        #    {
        #        dictRelation = new SysDictRelation(this.id());
        #        dictRelation.loadNameRelation(this.relation(i));
        #
        #        // If it is a 'relation' then you use externTable(), but for extended data types you use table() (see next block).
        #        if (SysDictRelation::externId(dictRelation) == externId)
        #        {
        #            indexId = SysDictRelation::findAUniqueIndex(dictRelation);
        #            if (indexId != 0)
        #                return indexId;
        #        }
        #    }
        #
        #    // Search any for any extended data type relations next
        #    for (fieldId = this.fieldNext(0);  fieldId;  fieldId = this.fieldNext(fieldId))
        #    {
        #        dictType = new DictType(this.fieldObject(fieldId).typeId());
        #        if (dictType)
        #        {
        #            dictRelation = dictType.relationObject();
        #            if (dictRelation)
        #            {
        #                // Unlike a normal relation, with an extended data type relation you must use the table() field.
        #                if (SysDictRelation::externId(dictRelation) == externId)
        #                {
        #                    indexId = SysDictRelation::findAUniqueIndex(dictRelation);
        #                    if (indexId)
        #                        return indexId;
        #                }
        #            }
        #        }
        #    }
        #
        #    return 0;
        #}
        #
      ENDSOURCE
      SOURCE #findUniqueIndex
        #DictIndex findUniqueIndex()
        #{
        #    DictIndex       uniqueIndex;
        #    indexId         indexId;
        #    ;
        #
        #    indexId = this.primaryIndex();
        #    if (indexId)
        #    {
        #        uniqueIndex = this.indexObject(indexId);
        #    }
        #    else
        #    {
        #        uniqueIndex = this.firstUniqueIndex();
        #    }
        #
        #    return uniqueIndex;
        #}
      ENDSOURCE
      SOURCE #firstUniqueIndex
        #DictIndex firstUniqueIndex(indexId _fromIndexId = 0)
        #{
        #    DictIndex       firstUniqueIndex;
        #    indexId         indexId = this.indexNext(_fromIndexId);
        #
        #    while (indexId)
        #    {
        #        firstUniqueIndex = this.indexObject(indexId);
        #        if (firstUniqueIndex.allowDuplicates() == false)        // found one
        #            break;
        #        else
        #            firstUniqueIndex = null;
        #        indexId = this.indexNext(indexId);
        #    }
        #
        #    return firstUniqueIndex;
        #}
      ENDSOURCE
      SOURCE #getIndexIdsOfUniqueOneFieldIndexes
        #List getIndexIdsOfUniqueOneFieldIndexes()
        #{
        #    List            indexList = new List(Types::Integer);
        #    DictIndex       dictIndex;
        #    indexId         indexId;
        #;
        #    // handle grouping candidate
        #    if (!this.isView())
        #    {
        #        indexId = 99;
        #        // loop over all indexes to find the ones with only one field
        #        while (indexId)
        #        {
        #            indexId = this.indexNext(indexId);
        #            dictIndex = this.indexObject(indexId);
        #            if (dictIndex)
        #            {
        #                if (!dictIndex.allowDuplicates())
        #                {
        #                    if (dictIndex.numberOfFields() == 1)
        #                    {
        #                        indexList.addEnd(indexId);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #    return indexList;
        #}
      ENDSOURCE
      SOURCE #getLabelOrName
        #public LabelType getLabelOrName()
        #{
        #    LabelType labelType;
        #
        #    if (this.label())
        #    {
        #        labelType = this.label();
        #    }
        #    else
        #    {
        #        labelType = this.name();
        #    }
        #    return labelType;
        #}
      ENDSOURCE
      SOURCE #getListOfDisplayMethods
        #List getListOfDisplayMethods(Set _typesSet = null)
        #{
        #    List        methodList = new List(Types::String);
        #    boolean     include;
        #    DictMethod  dictMethod;
        #    Types       returnType;
        #    DictType    dictType;
        #    int         i;
        #
        #    for (i=1;i<=this.objectMethodCnt();i++)
        #    {
        #        dictMethod = this.objectMethodObject(i);
        #
        #        if (dictMethod.displayType())
        #        {
        #            include = true;
        #            returnType = dictMethod.returnType();
        #            if (returnType == Types::UserType)
        #            {
        #                dictType = new DictType(dictMethod.returnId());
        #                returnType = dictType.baseType();
        #            }
        #            if (_typesSet)
        #                if (!_typesSet.in(returnType))
        #                    include = false;
        #            if (include)
        #                methodList.addEnd(dictMethod.name());
        #        }
        #    }
        #
        #    return methodList;
        #}
      ENDSOURCE
      SOURCE #getSerie
        #public str getSerie()
        #{
        #    DictSecurityKey    dictSecurityKey = new DictSecurityKey(this.securityKeyId());
        #;
        #    while (dictSecurityKey && dictSecurityKey.parentSecurityKeyId())
        #        dictSecurityKey = new DictSecurityKey(dictSecurityKey.parentSecurityKeyId());
        #
        #    if (dictSecurityKey)
        #    {
        #        return dictSecurityKey.label();
        #    }
        #    if (this.isSystemTable() || isSysId(this.id()))
        #        return "@SYS4278";
        #
        #    return "@SYS71620";
        #}
      ENDSOURCE
      SOURCE #getSourceExist
        #public Source getSourceExist()
        #{
        #    #macrolib.dictfield
        #    DictIndex       firstUniqueIndex;
        #    SysDictField    dictField;
        #    int             fieldNumber,
        #                    mandatoryFields;
        #    Source          source;
        #    int             indentLevel;
        #
        #    SourceLine indent()
        #    {
        #        SourceLine sourceLine;
        #        ;
        #        sourceLine = strrep(' ',indentLevel*4);
        #        return sourceLine;
        #    }
        #
        #    void setSelectSource()
        #    {
        #        SourceLine sourceLine;
        #        int p1;
        #        ;
        #        source += strfmt('select %1',this.name());
        #        source += '\n';
        #        indentLevel++;
        #        source += indent() + strfmt('index hint %1',firstUniqueIndex.name());
        #        source += '\n';
        #        sourceLine = indent() + strfmt('where '); p1 = strlen(sourceLine);
        #        source += sourceLine;
        #
        #        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #        {
        #            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #            if (fieldNumber > 1)
        #                source += ' &&\n'+ strrep(' ',p1);
        #            source += strfmt('%1.%2 == _%2',this.name(),dictField.name());
        #        }
        #        indentLevel--;
        #
        #        return;
        #    }
        #
        #    if (this.isMap())
        #        return '';
        #
        #    firstUniqueIndex = this.firstUniqueIndex();
        #
        #    if (!firstUniqueIndex)
        #        return '';
        #
        #    source =  'static ';
        #    source += 'boolean';
        #    source += ' Exist(';
        #
        #    // Build formal parameter list
        #    for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #    {
        #        dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #
        #        if (fieldNumber > 1)
        #            source += ', ';
        #
        #        source += strfmt('%1 _%2', dictField.getSourceType(), dictField.name());
        #    }
        #
        #    source += ')';
        #    source += '\n';
        #    source += '{';
        #    indentLevel++;
        #
        #    source += '\n';
        #    source += indent() + 'return ';
        #
        #    mandatoryFields = 0;
        #
        #    for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #    {
        #        dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #        if (bitTest(dictField.flags(),#DBF_MANDATORY))
        #        {
        #            mandatoryFields++;
        #
        #            if (mandatoryFields > 1)
        #                source += ' && ';
        #            source += strfmt('_%1',dictField.name());
        #        }
        #    }
        #
        #    indentLevel++;
        #    if (mandatoryFields)
        #        source += ' && \n' + indent();
        #
        #    source += '(';
        #    setSelectSource();
        #    source += '\n';
        #    source += indent() + ').RecId != 0;';
        #    indentLevel--;
        #
        #    source += '\n';
        #    indentLevel--;
        #    source += indent() + '}';
        #
        #    return source;
        #}
      ENDSOURCE
      SOURCE #getSourceFind
        #Source getSourceFind()
        #{
        #    #macrolib.dictfield
        #    DictIndex       firstUniqueIndex;
        #    SysDictField    dictField;
        #    int             fieldNumber;
        #    boolean         allFieldsMandatory;
        #    Source          source;
        #    int             indentLevel;
        #
        #    SourceLine indent()
        #    {
        #        return strrep(' ',indentLevel*4);
        #    }
        #
        #    void setSelectSource()
        #    {
        #        SourceLine sourceLine;
        #        int p1;
        #        ;
        #        source += '\n';
        #        source += indent() + strfmt('%1.SelectForUpdate(_ForUpdate);',this.name());
        #        source += '\n';
        #        source += '\n';
        #        source += indent() + strfmt('select firstonly %1',this.name());
        #        source += '\n';
        #        indentLevel++;
        #        source += indent() + strfmt('index hint %1',firstUniqueIndex.name());
        #        source += '\n';
        #        sourceLine = indent() + strfmt('where '); p1 = strlen(sourceLine);
        #        source += sourceLine;
        #
        #        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #        {
        #            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #            if (fieldNumber > 1)
        #                source += ' &&\n'+ strrep(' ',p1);
        #            source += strfmt('%1.%2 == _%2',this.name(),dictField.name());
        #        }
        #        source += ';';
        #        indentLevel--;
        #
        #        return;
        #    }
        #
        #    if (this.isMap())
        #        return '';
        #
        #    firstUniqueIndex = this.firstUniqueIndex();
        #
        #    if (!firstUniqueIndex)
        #        return '';
        #
        #    source =  'static ';
        #    source += this.name();
        #    source += ' Find(';
        #
        #    allFieldsMandatory = true;
        #    for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #    {
        #        dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #        allFieldsMandatory = allFieldsMandatory && bitTest(dictField.flags(),#DBF_MANDATORY);
        #
        #        if (fieldNumber > 1)
        #            source += ', ';
        #
        #        source += strfmt('%1 _%2', dictField.getSourceType(), dictField.name());
        #    }
        #
        #    source += ', boolean _ForUpdate = false)';
        #    source += '\n';
        #    source += '{';
        #    indentLevel++;
        #
        #    source += '\n';
        #    source += indent() + this.name()+' '+this.name()+';';
        #    source += '\n';
        #
        #    if (allFieldsMandatory)
        #    {
        #        source += '\n';
        #        source += indent() + 'if (';
        #
        #        for (fieldNumber = 1;fieldNumber <= firstUniqueIndex.numberOfFields(); fieldNumber++)
        #        {
        #            dictField = this.fieldObject(firstUniqueIndex.field(fieldNumber));
        #            if (fieldNumber > 1)
        #                source += ' && ';
        #            source += strfmt('_%1',dictField.name());
        #        }
        #        source += ')';
        #
        #        source += '\n';
        #        source += indent() + '{';
        #        indentLevel++;
        #        setSelectSource();
        #        source += '\n';
        #        indentLevel--;
        #        source += indent() + '}';
        #
        #    }
        #    else
        #    {
        #        source += indent() + ';';
        #        source += '\n';
        #        setSelectSource();
        #    }
        #
        #    source += '\n';
        #    source += '\n';
        #    source += indent() + strfmt('return %1;',this.name());
        #
        #    source += '\n';
        #    indentLevel--;
        #    source += indent() + '}';
        #
        #    return source;
        #}
      ENDSOURCE
      SOURCE #indexes
        #public Set indexes()
        #{
        #    int cnt;
        #    int i;
        #    tableId tableId = this.id();
        #    SysDictIndex sysDictIndex;
        #    Set set = new Set(Types::Class);
        #
        #    //
        #    // Include indexes
        #    //
        #    cnt = this.indexCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictIndex = new SysDictIndex(tableId, this.indexCnt2Id(i));
        #        set.add(sysDictIndex);
        #    }
        #    return set;
        #}
      ENDSOURCE
      SOURCE #indexExists
        #private boolean indexExists( Indexname indexname )
        #{
        #    ;
        #
        #    return SysDictTable::indexExistsServer(
        #                    this.name(DbBackend::Sql) ,
        #                    DatabaseId::MS_Sql_Server == SqlSystem::databaseBackendId() ? this.recIdIndexname() : indexname );
        #
        #}
      ENDSOURCE
      SOURCE #isMethodActual
        #boolean isMethodActual(identifiername _methodName)
        #{
        #    int i;
        #    for (i=1; i<=this.objectMethodCnt(); i++)
        #    {
        #        if (this.objectMethod(i) == _methodName)
        #            return true;
        #    }
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isRecordTemplateEnabled
        #boolean isRecordTemplateEnabled()
        #{
        #    return this.tableGroup() == TableGroup::Main ||
        #           this.tableGroup() == TableGroup::Group;
        #}
      ENDSOURCE
      SOURCE #isSQLTable
        #public boolean isSQLTable()
        #{
        #    int     tableId;
        #    ;
        #
        #    tableId = this.id();
        #    return  tableId == 802 || tableId == 1061 || tableId ==65506 || tableId == 65513 || tableId == 65515 || tableId == 65517  || tableId == 65518 || tableId == 65527;
        #}
      ENDSOURCE
      SOURCE #isTableInRelationships
        #boolean isTableInRelationships(str tableName)
        #{
        #    DictTable    dictTable,dictTableRel;
        #    DictRelation dictRel;
        #    DictType     dictType;
        #    SysDictField sysDictField;
        #    int i;
        #    str relationshipName;
        #    str tableNameReference;
        #    str userType;
        #    boolean retval = false;
        #;
        #
        #    // A table has always a relationship with itself
        #    if(tableName == this.name())
        #        return true;
        #
        #    // Getting table and its relationships
        #    dictTable = new DictTable(this.id());
        #    dictRel = new DictRelation(this.id());
        #
        #    // Getting each relationship
        #    for(i=1 ; !retval && i<=dictTable.relationCnt() ; i++)
        #    {
        #        relationshipName   = dictTable.relation(i);
        #
        #        dictRel.loadNameRelation(relationshipName);
        #
        #        dictTableRel       = new DictTable(dictRel.externTable());
        #        tableNameReference = dictTableRel.name();
        #
        #        if(tableNameReference == tableName)
        #            retval = true;
        #    }
        #
        #    // Getting relationships from Extended Data Types
        #    for( i=1 ; !retval && i < dictTable.fieldCnt() ; i++)
        #    {
        #        sysDictField = new SysDictField(dictTable.id(),dictTable.fieldCnt2Id(i));
        #        dictType = new DictType(sysDictField.typeId());
        #
        #        if(dictType!=null)
        #        {
        #            userType = dictType.name();
        #            dictRel = dictType.relationObject();
        #
        #            if(dictRel!=null)
        #            {
        #                dictTableRel = new DictTable(dictRel.table());
        #                tableNameReference = dictTableRel.name();
        #
        #                if(tableNameReference == tableName)
        #                    retval = true;
        #            }
        #        }
        #    }
        #
        #    return retval;
        #}
      ENDSOURCE
      SOURCE #isTitleField
        #/*
        #    returns true if the title field is equal to TitleField1 or TitleField2 properties
        #*/
        #boolean isTitleField(str titleField)
        #{
        #    fieldId fid = this.fieldName2Id(titleField);
        #    ;
        #    return this.titleField1() == fid || this.titleField2() == fid;
        #}
        #
      ENDSOURCE
      SOURCE #isVisible
        #public boolean isVisible()
        #{
        #    boolean         ret = true;
        #    SysDictMenu     sysDictMenu;
        #
        #    if (this.configurationKeyId() &&
        #        !isConfigurationkeyEnabled(this.configurationKeyId()))
        #    {
        #        ret = false;
        #    }
        #    else
        #    {
        #        if (this.formRef())
        #        {
        #            sysDictMenu = SysDictMenu::newMenuItem(this.formRef(), MenuItemType::Display);
        #            if (sysDictMenu &&
        #                !sysDictMenu.isVisible())
        #            {
        #                ret = false;
        #            }
        #        }
        #    }
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #labelLabelId
        #/*
        #    returns the defined labelId of the table's label
        #*/
        #LabelId labelLabelId()
        #{
        #    #Properties
        #    return findProperty(this.treeNode().AOTgetProperties(),#PropertyLabel);
        #}
        #
      ENDSOURCE
      SOURCE #members
        #public Set members()
        #{
        #    Set members = new Set(Types::Class);
        #;
        #    members = Set::union(members, this.fields());
        #    members = Set::union(members, this.methods());
        #    members = Set::union(members, this.indexes());
        #    members = Set::union(members, this.relations());
        #    members = Set::union(members, this.fieldGroups());
        #    return members;
        #}
      ENDSOURCE
      SOURCE #methods
        #public Set methods(
        #    boolean _includeInstanceMethods = true,
        #    boolean _includeStaticMethods = true,
        #    boolean _includeInheritedMethods = true)
        #{
        #    #SysBpCheck
        #    int cnt;
        #    int i;
        #    tableId tableId = this.id();
        #    SysDictMethod dictMethod;
        #    Set set = new Set(Types::Class);
        #    SysDictClass xRecordClass;
        #    SysDictClass objectClass;
        #    Set methodNameSet = new Set(Types::String);
        #
        #    //
        #    // Include instance methods
        #    //
        #    if (_includeInstanceMethods)
        #    {
        #        cnt = this.objectMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            dictMethod = new SysDictMethod(UtilElementType::TableInstanceMethod, tableId, this.objectMethod(i));
        #            set.add(dictMethod);
        #            methodNameSet.add(dictMethod.name());
        #        }
        #    }
        #
        #    //
        #    // Include static methods
        #    //
        #    if (_includeStaticMethods)
        #    {
        #        cnt = this.staticMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            dictMethod = new SysDictMethod(UtilElementType::TableStaticMethod, tableId, this.staticMethod(i));
        #            set.add(dictMethod);
        #        }
        #    }
        #
        #    if (_includeInheritedMethods)
        #    {
        #        //
        #        // Include xRecord methods
        #        //
        #        xRecordClass = new SysDictClass(classnum(xRecord));
        #
        #        cnt = xRecordClass.objectMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            if (xRecordClass.objectMethod(i) != #MethodNameClassDeclaration)
        #            {
        #                dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classnum(xRecord), xRecordClass.objectMethod(i));
        #                //
        #                // Skip if method is overridden
        #                //
        #                if (!methodNameSet.in(dictMethod.name()))
        #                {
        #                    set.add(dictMethod);
        #                    methodNameSet.add(dictMethod.name());
        #                }
        #            }
        #        }
        #
        #        //
        #        // Include object methods
        #        //
        #        objectClass = new SysDictClass(classnum(Object));
        #
        #        cnt = objectClass.objectMethodCnt();
        #        for (i=1; i<=cnt; i++)
        #        {
        #            if (objectClass.objectMethod(i) != #MethodNameClassDeclaration)
        #            {
        #                dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, classnum(Object), objectClass.objectMethod(i));
        #                //
        #                // Skip if method is overridden
        #                //
        #                if (!methodNameSet.in(dictMethod.name()))
        #                {
        #                    set.add(dictMethod);
        #                    methodNameSet.add(dictMethod.name());
        #                }
        #            }
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #path
        #TreeNodePath path()
        #{
        #    #AOT
        #    TreeNodePath treeNodePath;
        #
        #    switch (true)
        #    {
        #        case isSysId(this.id()):
        #            treeNodePath = #SystemTablesPath;
        #            break;
        #        case this.isMap():
        #            treeNodePath = #TableMapsPath;
        #            break;
        #        case this.isView():
        #            treeNodePath = #ViewsPath;
        #            break;
        #        default:
        #            treeNodePath = #TablesPath;
        #            break;
        #    }
        #
        #    return treeNodePath + #AOTDelimiter + this.name();
        #}
      ENDSOURCE
      SOURCE #pathForDeveloperDocumentation
        #public TreeNodePath pathForDeveloperDocumentation()
        #{
        #    #AOT
        #    TreeNodePath treeNodePath;
        #
        #    if (isSysId(this.id()))
        #    {
        #        treeNodePath = #SystemTablesPath+#AOTDelimiter+this.name();
        #    }
        #    else
        #    {
        #        treeNodePath = #ApplicationDeveloperDocTablesPath+#AOTDelimiter+this.name();
        #    }
        #
        #    return treeNodePath;
        #}
      ENDSOURCE
      SOURCE #recIdCreateUniqueIndex
        #boolean recIdCreateUniqueIndex()
        #{
        #    TableName       tableName = this.name(DbBackend::Sql);
        #
        #    if (this.indexExists(this.recIdIndexname()))
        #        return true;
        #
        #    return SysDictTable::recIdCreateUniqueIndexServer(
        #                tableName,
        #                this.recIdIndexname(),
        #                this.fieldName(fieldnum(Common,DataAreaId),DbBackend::Sql,0,FieldNameGenerationMode::WhereClause),
        #                this.fieldName(fieldnum(Common,RecId),DbBackend::Sql,0,FieldNameGenerationMode::WhereClause),
        #                this.dataPrCompany() );
        #}
      ENDSOURCE
      SOURCE #recIdDropIndex
        #boolean recIdDropIndex()
        #{
        #    str             sql;
        #    int             error;
        #    TableName       tableName = this.name(DbBackend::Sql);
        #
        #    if (! this.indexExists(this.recIdIndexname()))
        #        return true;
        #
        #    sql += 'DROP INDEX ';
        #
        #    switch (SqlSystem::databaseBackendId())
        #    {
        #        case DatabaseId::MS_Sql_Server:
        #            sql += tableName+'.';
        #        case DatabaseId::Oracle:
        #            // Do none
        #            break;
        #    }
        #
        #    sql     += this.recIdIndexname();
        #    error   = SysDictTable::statementExeUpdate(sql);
        #    if (error)
        #        warning(int2str(error));
        #
        #    return error == 0;
        #}
      ENDSOURCE
      SOURCE #recIdIndexname
        #Indexname recIdIndexname()
        #{
        #    return strfmt('I_%1RECID',this.id());
        #}
      ENDSOURCE
      SOURCE #recordCount
        #Integer recordCount(boolean includeTablesInVirtualCompanies = true)
        #{
        #    Common common = this.makeRecord();
        #
        #    if (this.isMap())
        #        return 0;
        #    if (this.isTmp())
        #        return 0;
        #    if (this.isView())
        #        return 0;
        #
        #    if (!includeTablesInVirtualCompanies && common.DataAreaId != curext())
        #        return 0;
        #
        #    common.disableCache(true);
        #
        #    select firstonly count(RecId) from common;
        #
        #    return any2int(common.RecId);
        #}
      ENDSOURCE
      SOURCE #recordSize
        #real recordSize()
        #{
        #    real size;
        #    int i;
        #    SysDictField sysDictField;
        #
        #    for (i=this.fieldCnt(); i; i--)
        #    {
        #        sysDictField = new SysDictField(this.id(), this.fieldCnt2Id(i));
        #        size += sysDictField.fieldSize();
        #    }
        #    return size;
        #}
      ENDSOURCE
      SOURCE #relations
        #public Set relations()
        #{
        #    int cnt;
        #    int i;
        #    tableId tableId = this.id();
        #    SysDictRelation sysDictRelation;
        #    Map map = new Map(Types::String, Types::Class);
        #
        #    str hash(SysDictRelation relation)
        #    {
        #        int line;
        #        str hash = relation.externTableName();
        #
        #        for (line = 1; line<=relation.lines(); line++)
        #            hash += relation.lineDescription(line);
        #
        #        return hash;
        #    }
        #
        #;
        #    //
        #    // Include relations from fields
        #    //
        #    cnt = this.fieldCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictRelation = new SysDictRelation(tableId);
        #        if (sysDictRelation.loadFieldRelation(this.fieldCnt2Id(i)))
        #        {
        #            map.insert(hash(sysDictRelation), sysDictRelation);
        #        }
        #    }
        #
        #    //
        #    // Include relations defined on table
        #    //
        #    cnt = this.relationCnt();
        #    for (i=1; i<=cnt; i++)
        #    {
        #        sysDictRelation = new SysDictRelation(tableId);
        #        if (sysDictRelation.loadNameRelation(this.relation(i)))
        #        {
        #            map.insert(hash(sysDictRelation), sysDictRelation);
        #        }
        #    }
        #
        #    return map.rangeSet();
        #}
      ENDSOURCE
      SOURCE #singularLabel
        #/*
        #    returns the defined value of the table's SingularLabel property
        #*/
        #LabelId singularLabel()
        #{
        #    #Properties
        #    return findProperty(this.treeNode().AOTgetProperties(),#PropertySingularLabel);
        #}
        #
      ENDSOURCE
      SOURCE #sysDictFieldGroup
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysDictFieldGroup sysDictFieldGroup(str _fieldGroupName)
        #{
        #    int i;
        #    ;
        #
        #    for(i = 1; i <= this.fieldGroupCnt(); i++)
        #        if( this.fieldGroup(i) == _fieldGroupName )
        #            return new SysDictFieldGroup(this.id(), _fieldGroupName);
        #
        #    return null;
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString()
        #{
        #    return strFmt('%1 [%2]', this.name(), this.id());
        #}
      ENDSOURCE
      SOURCE #treeNode
        #    TreeNode treeNode()
        #{
        #    TreeNode treeNode = TreeNode::findNode(this.path());
        #    if (!treeNode)
        #    {
        #        throw error(strfmt("@SYS28152",this.path()));
        #    }
        #    return treeNode;
        #}
      ENDSOURCE
      SOURCE #typicalRowCount
        #/*
        #    returns the defined value of the table's TypicalRowCount property
        #*/
        #str typicalRowCount()
        #{
        #    #Properties
        #    return findProperty(this.treeNode().AOTgetProperties(),#PropertyTypicalRowCount);
        #}
        #
        #
      ENDSOURCE
      SOURCE #utilElementType
        #public SysUtilElementType utilElementType()
        #{
        #    SysUtilElementType sysUtilElementType;
        #
        #    switch (true)
        #    {
        #        case this.isMap() :
        #            sysUtilElementType = UtilElementType::TableMap;
        #            break;
        #
        #        case this.isView() :
        #            sysUtilElementType = UtilElementType::ViewQuery;
        #            break;
        #
        #        default :
        #            sysUtilElementType = UtilElementType::Table;
        #            break;
        #    }
        #
        #    return sysUtilElementType;
        #
        #}
        #
      ENDSOURCE
      SOURCE #xmlDocumentation
        #public XML xmlDocumentation()
        #{
        #    //
        #    // Read from file if available
        #    //
        #    XML xml = this.xmlDocumentationFromFile();
        #
        #
        #    if (!xml)
        #    {
        #        //
        #        // If file is not available, extract from the source code
        #        //
        #        xml = this.xmlDocumentationFromMethods();
        #    }
        #    return xml;
        #}
      ENDSOURCE
      SOURCE #xmlDocumentationFromFile
        #//
        #// This method can only be used on the client tier.
        #//
        #protected XML xmlDocumentationFromFile()
        #{
        #    int infologLine;
        #    InfologData errorData;
        #    SysInfologEnumerator enum;
        #    str errorMessage;
        #    SysTreeNode sysTreeNode = SysTreeNode::newTreeNodePath(this.path());
        #    XML xml;
        #    SysVersionControlSystem versionControlSystem;
        #    Filename filename;
        #    str filePath;
        #    str fileExtension;
        #    XmlReader xmlReader;
        #    #file
        #
        #    if (this.objectOnServer())
        #        throw error(strfmt("@SYS19306", funcname()));
        #
        #    if (versioncontrol && versioncontrol.parmSysVersionControlSystem())
        #    {
        #        versionControlSystem = versioncontrol.parmSysVersionControlSystem();
        #        [filePath, filename, fileExtension] = fileNameSplit(versionControlSystem.fileName(sysTreeNode));
        #
        #        filename = filePath + filename + #xml;
        #        if (WinAPI::fileExists(filename))
        #        {
        #            //
        #            // Read the contents of the <members> tag
        #            //
        #            infologLine = infolog.line();
        #            try
        #            {
        #                //BP Deviation documented
        #                xmlReader = XmlReader::newFile(filename);
        #                while (xmlReader.read())
        #                {
        #                    if (xmlReader.nodeType() == XmlNodeType::Element &&
        #                        xmlReader.name() == #XmlMembers)
        #                    {
        #                        xml = xmlReader.readInnerXml();
        #                    }
        #                }
        #            }
        #            catch (Exception::Error)
        #            {
        #                errorData = infolog.cut(infologLine+1);
        #                enum = SysInfologEnumerator::newData(errorData);
        #                while (enum.moveNext())
        #                {
        #                    errorMessage += (errorMessage?',':'')+strrem(enum.currentMessage(), '\n\t');
        #                }
        #                xml = strfmt('<member name="!:%1 (%2)"/>', this.name(), errorMessage);
        #            }
        #        }
        #    }
        #    return xml;
        #
        #}
      ENDSOURCE
      SOURCE #xmlDocumentationFromMethods
        #protected XML xmlDocumentationFromMethods()
        #{
        #    TextBuffer textBuffer = new TextBuffer();
        #    SetEnumerator enum = this.methods(true, true, false).getEnumerator();
        #    SysDictMethod dictMethod;
        #
        #    while (enum.moveNext())
        #    {
        #        dictMethod = enum.current();
        #        textBuffer.appendText(dictMethod.xmlDocumentation(true));
        #    }
        #    return textBuffer.getText();
        #}
      ENDSOURCE
      SOURCE #xmlQualifiedName
        #public XML xmlQualifiedName()
        #{
        #    return strfmt('T:%1', this.name());
        #}
      ENDSOURCE
      SOURCE #xmlReflection
        #public void xmlReflection(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlApi);
        #    _xmlWriter.writeAttributeString(#XmlId, this.xmlQualifiedName());
        #
        #    this.xmlReflectionApiData(_xmlWriter);
        #    this.xmlReflectionTypeData(_xmlWriter);
        #    this.xmlReflectionFamily(_xmlWriter);
        #    this.xmlReflectionElements(_xmlWriter);
        #    this.xmlReflectionContainers(_xmlWriter);
        #    this.xmlReflectionFile(_xmlWriter);
        #    this.xmlReflectionLabel(_xmlWriter);
        #    this.xmlReflectionDeveloperDocumentation(_xmlWriter);
        #    this.xmlReflectionEntityRelationshipType(_xmlWriter);
        #
        #    _xmlWriter.writeEndElement();
        #
        #    this.xmlReflectionMembers(_xmlWriter);
        #}
      ENDSOURCE
      SOURCE #xmlReflectionApiData
        #protected void xmlReflectionApiData(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#Xmlapidata);
        #    _xmlWriter.writeAttributeString(#XmlName, this.name());
        #    _xmlWriter.writeAttributeString(#XmlGroup, #XmlGroupType);
        #    _xmlWriter.writeAttributeString(#XmlSubGroup, #XmlSubGroupTable);
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionContainers
        #protected void xmlReflectionContainers(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlContainers);
        #    _xmlWriter.writeStartElement(#XmlType);
        #    _xmlWriter.writeAttributeString(#XmlApi, #XmlRootProject);
        #    _xmlWriter.writeEndElement();
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionDeveloperDocumentation
        #protected void xmlReflectionDeveloperDocumentation(XmlWriter _xmlWriter)
        #{
        #    LabelString label = this.developerDocumentation();
        #;
        #    if (label)
        #    {
        #        _xmlWriter.writeElementString(#XmlDeveloperDocumentation, label);
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionElements
        #protected void xmlReflectionElements(XmlWriter _xmlWriter)
        #{
        #    #SysBPCheck
        #    SysDictXmlReflectionProvider xmlReflectionProvider;
        #    SetEnumerator enum = this.members().getEnumerator();
        #
        #    _xmlWriter.writeStartElement(#XmlElements);
        #
        #    while (enum.moveNext())
        #    {
        #        xmlReflectionProvider = SysDictClass::as(enum.current(), classnum(SysDictXmlReflectionProvider));
        #        if (xmlReflectionProvider)
        #        {
        #            _xmlWriter.writeStartElement(#XmlElement);
        #            _xmlWriter.writeAttributeString(#XmlApi, xmlReflectionProvider.xmlQualifiedName());
        #            _xmlWriter.writeEndElement();
        #        }
        #    }
        #
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionEntityRelationshipType
        #protected void xmlReflectionEntityRelationshipType(XmlWriter _xmlWriter)
        #{
        #    EntityRelationshipType entityRelationshipType = this.entityRelationshipType();
        #
        #    _xmlWriter.writeElementString(#XmlEntityRelationshipType, strfmt('%1', entityRelationshipType));
        #}
      ENDSOURCE
      SOURCE #xmlReflectionFamily
        #protected void xmlReflectionFamily(XmlWriter _xmlWriter)
        #{
        #    _xmlWriter.writeStartElement(#XmlFamily);
        #    _xmlWriter.writeStartElement(#XmlAncestors);
        #
        #    _xmlWriter.writeStartElement(#XmlType);
        #    _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', tablestr(Common)));
        #    _xmlWriter.writeEndElement();
        #
        #    _xmlWriter.writeStartElement(#XmlType);
        #    _xmlWriter.writeAttributeString(#XmlApi, strfmt('T:%1', classstr(xRecord)));
        #    _xmlWriter.writeEndElement();
        #
        #    _xmlWriter.writeEndElement();
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #xmlReflectionFile
        #protected void xmlReflectionFile(XmlWriter _xmlWriter)
        #{
        #    TreeNodePath treeNodePath = this.pathForDeveloperDocumentation();
        #    DocNode docNode;
        #
        #    if (treeNodePath)
        #    {
        #        docNode = TreeNode::findNode(treeNodePath);
        #
        #        if (docNode &&
        #            docNode.hTMLHelpEnabled() &&
        #            docNode.hTMLHelpTopic())
        #        {
        #            _xmlWriter.writeElementString(#XmlFile, docNode.hTMLHelpTopic());
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionLabel
        #protected void xmlReflectionLabel(XmlWriter _xmlWriter)
        #{
        #    LabelString label = this.label();
        #;
        #    if (label)
        #    {
        #        _xmlWriter.writeElementString(#XmlLabel, label);
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionMembers
        #protected void xmlReflectionMembers(XmlWriter _xmlWriter)
        #{
        #    SysDictXmlReflectionProvider xmlReflectionProvider;
        #    Set members = new Set(Types::Class);
        #    SetEnumerator enum;
        #;
        #    members = Set::union(members, this.fields());
        #    members = Set::union(members, this.methods(true, true, false));
        #    members = Set::union(members, this.indexes());
        #    members = Set::union(members, this.relations());
        #    members = Set::union(members, this.fieldGroups());
        #
        #    enum = members.getEnumerator();
        #
        #    while (enum.moveNext())
        #    {
        #        xmlReflectionProvider = SysDictClass::as(enum.current(), classnum(SysDictXmlReflectionProvider));
        #        if (xmlReflectionProvider)
        #        {
        #            xmlReflectionProvider.xmlReflection(_xmlWriter);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #xmlReflectionTypeData
        #protected void xmlReflectionTypeData(XmlWriter _xmlWriter)
        #{
        #;
        #    _xmlWriter.writeStartElement(#XmlTypeData);
        #    _xmlWriter.writeAttributeString(#XmlId, int2str(this.id()));
        #    _xmlWriter.writeAttributeString(#XmlConfigurationKey, configurationkeyId2Name(this.configurationKeyId()));
        #    _xmlWriter.writeAttributeString(#XmlSecurityKey, securitykeyId2Name(this.securityKeyId()));
        #    _xmlWriter.writeAttributeString(#XmlTemporary, this.isTmp() ? 'true' : 'false');
        #    _xmlWriter.writeAttributeString(#XmlMap, this.isMap() ? 'true' : 'false');
        #    _xmlWriter.writeAttributeString(#XmlView, this.isView() ? 'true' : 'false');
        #    _xmlWriter.writeEndElement();
        #}
      ENDSOURCE
      SOURCE #as
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Common as(Common rec, TableId tableOrMapId)
        #{
        #    if( SysDictTable::is(rec, tableOrMapId) )
        #        return rec;
        #
        #    return RecordUtil::commonRecord();
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysDictTable construct(tableId _tableId)
        #{
        #    SysDictTable sysDictTable = new SysDictTable(_tableId);
        #
        #    return sysDictTable;
        #}
        #
      ENDSOURCE
      SOURCE #dataareaIdNameSQL
        #static FieldName dataareaIdNameSQL(FieldNameGenerationMode fieldNameGeneration)
        #{
        #    DictField   dictField = new DictField(tablenum(CompanyInfo),fieldnum(CompanyInfo,DataAreaId));
        #    return dictField.name(DbBackend::Sql,0,fieldNameGeneration);
        #}
      ENDSOURCE
      SOURCE #fieldEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SetEnumerator fieldEnumerator(tableId tableId)
        #{
        #    SysDictTable    dt      = new SysDictTable(tableId);
        #    SetEnumerator   fe      = dt ? dt.fields().getEnumerator() : null;
        #
        #    return fe;
        #}
      ENDSOURCE
      SOURCE #fieldIdWithEDT
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// находит id n-ого поля с указанным типом
        #// порядок полей может не совпадать с объявленным в AOT
        #public static FieldId fieldIdWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
        #{
        #    SysDictField df = SysDictTable::fieldWithEDT(tableId, edt, occurrence);
        #
        #    if( df )
        #    {
        #        return df.id();
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #fieldIdWithEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// находит id n-ого поля с указанным enum
        #// порядок полей может не совпадать с объявленным в AOT
        #public static FieldId fieldIdWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
        #{
        #    SysDictField df = SysDictTable::fieldWithEnum(tableId, enumId, occurrence);
        #
        #    if( df )
        #    {
        #        return df.id();
        #    }
        #
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #fieldNames
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// Внимание! наименования полей могут совпадать, поэтому set названий полей может быть меньше, чем полей в таблице
        #// используйте с осторожностью
        #public static Set fieldNames(tableId tableId, boolean includeSystem = false)
        #{
        #    Set             set     = new Set(Types::String);
        #    SetEnumerator   fe      = SysDictTable::fieldEnumerator(tableId);
        #    SysDictField    df;
        #    ;
        #
        #    while( fe && fe.moveNext() )
        #    {
        #        df = fe.current();
        #
        #        if( df && (includeSystem || !df.isSystem()) )
        #        {
        #            set.add(df.name());
        #        }
        #    }
        #
        #    return set;
        #}
      ENDSOURCE
      SOURCE #fieldnameSQL
        #static FieldName fieldnameSQL(tableId tableId, fieldId fieldId, FieldNameGenerationMode fieldNameGeneration)
        #{
        #    return SysDictTable::newTableId(tableId).fieldName(fieldId,DbBackend::Sql,0,fieldNameGeneration);
        #}
      ENDSOURCE
      SOURCE #fieldnameSQLComplete
        #static FieldName fieldnameSQLComplete(tableId tableId, fieldId fieldId, FieldNameGenerationMode fieldNameGeneration)
        #{
        #    SysDictTable sysDictTable = SysDictTable::newTableId(tableId);
        #
        #    return sysDictTable.name(DbBackend::Sql)+'.'+sysDictTable.fieldName(fieldId,DbBackend::Sql,0,fieldNameGeneration);
        #}
      ENDSOURCE
      SOURCE #fieldWithEDT
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// находит n-ое поле с указанным типом
        #// порядок полей может не совпадать с объявленным в AOT
        #// используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
        #public static SysDictField fieldWithEDT(TableId tableId, ExtendedTypeId edt, int occurrence = 1)
        #{
        #    SysDictTable    dt       = new SysDictTable(tableId);
        #    Set             fields   = dt ? dt.fieldsWithEDT(edt) : null;
        #    SetEnumerator   se       = fields ? fields.getEnumerator() : null;
        #    SysDictField    df;
        #
        #    while( se && se.moveNext() && occurrence > 0 )
        #    {
        #        df = se.current();
        #        occurrence--;
        #    }
        #
        #    return df;
        #}
      ENDSOURCE
      SOURCE #fieldWithEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// находит n-ое поле с указанным enum
        #// порядок полей может не совпадать с объявленным в AOT
        #// используйте SysDictTable.fieldsWithEDT, чтобы найти все поля
        #public static SysDictField fieldWithEnum(TableId tableId, EnumId enumId, int occurrence = 1)
        #{
        #    SysDictTable    dt       = tableId  ? new SysDictTable(tableId) : null;
        #    Set             fields   = dt       ? dt.fieldsWithEnum(enumId) : null;
        #    SetEnumerator   se       = fields   ? fields.getEnumerator() : null;
        #    SysDictField    df;
        #
        #    while( se && se.moveNext() && occurrence > 0 )
        #    {
        #        df = se.current();
        #        occurrence--;
        #    }
        #
        #    return df;
        #}
      ENDSOURCE
      SOURCE #findFromKeyData
        #static Common findFromKeyData(
        #    tableId         tableId,
        #    KeyData         keyData     // Should be a unique list!
        #    )
        #{
        #    Query       q = SysQuery::queryFromKeyData(tableId,keyData);
        #    QueryRun    qr;
        #
        #    if (! q)
        #        return null;
        #
        #    qr = new QueryRun(q);
        #    if (! qr.next())
        #        return null;
        #
        #    return qr.get(tableId);
        #}
      ENDSOURCE
      SOURCE #formRefName
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static MenuItemName formRefName(TableId tableId)
        #{
        #    DictTable dt = new DictTable(tableId);
        #
        #    if( dt )
        #    {
        #        return dt.formRef();
        #    }
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #getKeyData
        #public static Map getKeyData(Common _common)
        #{
        #    return SysDictTable::mapFieldIds2Values(SysDictTable::getUniqueIndexFields(_common.TableId), _common);
        #}
      ENDSOURCE
      SOURCE #getMandatoryFields
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static client server List getMandatoryFields(tableId _tableId)
        #{
        #    List            fieldIdList     = new List(Types::Integer);
        #    SysDictTable    sysDictTable    = new SysDictTable(_tableId);
        #    SysDictField    sysDictField;
        #    int             i;
        #
        #    for (i=1;i<=sysDictTable.fieldCnt();i++)
        #    {
        #        sysDictField = new SysDictField(_tableId, sysDictTable.fieldCnt2Id(i));
        #        if( sysDictField && sysDictField.saveContents() && sysDictField.mandatory() )
        #        {
        #            fieldIdList.addEnd(sysDictField.id());
        #        }
        #    }
        #
        #    return fieldIdList;
        #}
      ENDSOURCE
      SOURCE #getUniqueIndexFields
        #static client server List getUniqueIndexFields(tableId _tableId)
        #{
        #    List                    fieldIdList  = new List(Types::Integer);
        #    SysDictTable            sysDictTable = new SysDictTable(_tableId);
        #    DictIndex               dictIndex;
        #    int                     i;
        #    boolean                 uniqueFound;
        #    ;
        #    if (!_tableId || !sysDictTable)
        #        return null;
        #
        #    dictIndex = sysDictTable.findUniqueIndex();
        #
        #    if (!dictIndex)
        #        dictIndex = sysDictTable.indexObject(sysDictTable.indexNext(0));
        #    else
        #        uniqueFound = true;
        #
        #    if (dictIndex)
        #        for (i=1;i<=dictIndex.numberOfFields();i++)
        #            fieldIdList.addEnd(dictIndex.field(i));
        #
        #    if (!uniqueFound)
        #        fieldIdList.addEnd(fieldnum(Common,RecId));
        #
        #    return fieldIdList;
        #}
      ENDSOURCE
      SOURCE #hasMethod
        #client server static boolean hasMethod(
        #    DictTable       dt,
        #    identifiername  methodName
        #    )
        #{
        #    //validate arguments before using them
        #    if (dt == null)
        #        return false;
        #    return TreeNode::findNode('\\data dictionary\\tables\\'+dt.name()+'\\methods\\'+methodName) ? true : false;
        #}
      ENDSOURCE
      SOURCE #indexExistsServer
        #private static server boolean indexExistsServer( str tableName, Indexname indexname )
        #{
        #    str             sql;
        #    Statement       stmt;
        #    Connection      con = new Connection();
        #    ResultSet       set;
        #
        #    InteropPermission                       interopPermission;
        #    SqlStatementExecutePermission           sqlPermission;
        #    System.Text.RegularExpressions.Regex    re;
        #    str                                     namePattern = '[\\w\\.]';
        #    boolean                                 tableNameValid = false;
        #    boolean                                 indexNameValid = false;
        #    boolean                                 retVal         = false;
        #    ;
        #
        #    interopPermission = new InteropPermission(InteropKind::ClrInterop);
        #    interopPermission.assert();
        #
        #    // BP deviation documented
        #    re = new System.Text.RegularExpressions.Regex( namePattern );
        #
        #    // validate tableName and indexName to prevent SQL injection
        #
        #    // BP deviation documented
        #    tableNameValid = re.IsMatch( tableName );
        #
        #    // BP deviation documented
        #    indexNameValid = re.IsMatch( indexname );
        #
        #    if( tableNameValid && indexNameValid )
        #    {
        #
        #        switch (SqlSystem::databaseBackendId())
        #        {
        #            case DatabaseId::MS_Sql_Server:
        #                sql += 'SELECT NAME FROM SYSINDEXES WHERE indid>0 AND indid<255 AND id=object_id(\''+tableName+'\') AND NAME = \''+indexname+'\' and INDEXPROPERTY(id, name, \'IsStatistics\') = 0';
        #                break;
        #            case DatabaseId::Oracle:
        #                sql += 'select index_name from user_indexes where table_name = \''+tableName+'\' and index_name = \''+indexname+'\'';
        #                break;
        #        }
        #
        #        CodeAccessPermission::revertAssert();
        #        sqlPermission = new SqlStatementExecutePermission( sql );
        #        sqlPermission.assert();
        #
        #        try
        #        {
        #            stmt    = con.createStatement();
        #
        #            // BP deviation documented
        #            set     = stmt.executeQuery(sql);
        #
        #            if (set.next())
        #            {
        #                retVal = true;
        #            }
        #        }
        #        catch (Exception::Error)
        #        {
        #            exceptionTextFallThrough();
        #        }
        #    }
        #
        #    return retVal;
        #}
      ENDSOURCE
      SOURCE #is
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static boolean is(Common rec, TableId tableOrMapId)
        #{
        #    if( rec.TableId == tableOrMapId )
        #        return true;
        #
        #    if( tableOrMapId && SysDictTable::isTableMapped(tableOrMapId, rec.TableId) )
        #        return true;
        #
        #    return false;
        #}
      ENDSOURCE
      SOURCE #isTableMapped
        #static boolean isTableMapped(tableId _mapTableId, tableId _tableIdToTest)
        #{
        #    #AOT
        #    TreeNode treeNode = TreeNode::findNode(#TableMapsPath+'\\'+tableid2name(_mapTableId)+'\\mappings');
        #    return treeNode.AOTfindChild(tableid2name(_tableIdToTest)) != null;
        #}
      ENDSOURCE
      SOURCE #mapFieldIds2Values
        #/// <summary>
        #///    Maps field IDs to values in a buffer.
        #/// </summary>
        #/// <param name="_keyFields">
        #///    A list of field IDs in the buffer.
        #/// </param>
        #/// <param name="_buffer">
        #///    The buffer to which the field IDs are mapped.
        #/// </param>
        #/// <returns>
        #///    A map of field IDs to buffer values.
        #/// </returns>
        #/// <remarks>
        #///    The <paramref name="_keyFields" /> must be a list of field IDs that are stored in a list constructed with <c>new list(type::integer)</c>.
        #/// </remarks>
        #static client server Map mapFieldIds2Values(
        #    List   _keyFields,
        #    Common _buffer
        #    )
        #{
        #    Map             keyMap = new Map(Types::Integer,Types::Container);
        #    ListEnumerator  le;
        #
        #    anytype a()
        #    {
        #        anytype a = _buffer.(le.current());
        #        return a;
        #    }
        #
        #    ;
        #    if (!_keyFields)
        #        return null;
        #
        #    le  = _keyFields.getEnumerator();
        #
        #    while (le.moveNext())
        #    {
        #        keyMap.insert(le.current(),[a()]);
        #    }
        #    return keyMap;
        #}
      ENDSOURCE
      SOURCE #newTableId
        #static client server SysDictTable newTableId(tableId id)
        #{
        #    SysDictTable sysDictTable = new SysDictTable(id);
        #
        #    if (sysDictTable == null ||
        #        sysDictTable.name() == 'UNKNOWN' ||
        #        sysDictTable.name() == '')
        #    {
        #        return null;
        #    }
        #
        #    return sysDictTable;
        #}
      ENDSOURCE
      SOURCE #newTreeNode
        #static SysDictTable newTreeNode(TreeNode _treeNode)
        #{
        #    return new SysDictTable(_treeNode.applObjectId());
        #}
      ENDSOURCE
      SOURCE #recIdCreateUniqueIndexServer
        #private static server boolean recIdCreateUniqueIndexServer(
        #                        str tableName,
        #                        str recIdIndexName,
        #                        str dataAreaIdField,
        #                        str recIdIdField,
        #                        boolean dataPrCompany )
        #{
        #    str             sql;
        #    int             error;
        #
        #    InteropPermission                       interopPermission;
        #    SqlStatementExecutePermission           sqlPermission;
        #    System.Text.RegularExpressions.Regex    re;
        #    str                                     namePattern = '[\\w\\.]';
        #    boolean                                 inputIsValid = false;
        #    ;
        #
        #    sql += 'CREATE UNIQUE INDEX '+recIdIndexName+' ON '+tableName+'(';
        #
        #    if ( dataPrCompany )
        #    {
        #        sql += dataAreaIdField +',';
        #    }
        #
        #    sql     += recIdIdField + ')';
        #
        #
        #    interopPermission = new InteropPermission(InteropKind::ClrInterop);
        #    interopPermission.assert();
        #
        #    // BP deviation documented
        #    re = new System.Text.RegularExpressions.Regex( namePattern );
        #
        #    // validate input to prevent SQL injection
        #    // BP deviation documented
        #    if( re.IsMatch(tableName) && re.IsMatch(recIdIndexName) && re.IsMatch(dataAreaIdField) && re.IsMatch(recIdIdField) )
        #    {
        #        CodeAccessPermission::revertAssert();
        #        sqlPermission = new SqlStatementExecutePermission(sql);
        #        sqlPermission.assert();
        #    }
        #
        #
        #    error   =  SysDictTable::statementExeUpdate(sql);
        #
        #    if (error)
        #    {
        #        warning(int2str(error));
        #    }
        #
        #    return error == 0;
        #}
      ENDSOURCE
      SOURCE #recIdNameSQL
        #static FieldName recIdNameSQL()
        #{
        #    return SysDictTable::fieldnameSQL(tablenum(LedgerTable),fieldnum(LedgerTable,RecId),FieldNameGenerationMode::FieldList);
        #}
      ENDSOURCE
      SOURCE #statementExeUpdate
        #private static int statementExeUpdate(
        #    str         sql,
        #    Connection  con = new Connection()
        #    )
        #{
        #    Statement       stmt;
        #    int             error;
        #    ;
        #
        #    try
        #    {
        #        stmt    = con.createStatement();
        #
        #        // BP deviation documented
        #        error   = stmt.executeUpdate(sql);
        #    }
        #    catch (Exception::Error)
        #    {
        #        return -1;
        #    }
        #
        #    return error;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysQuery unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysQuery
    PROPERTIES
      Name                #SysQuery
      Extends             #Query
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #///   <summary />
        #///
        #/// <remarks>
        #///    This class enables you to create, read, update, and delete X++ code and metadata. Make sure that the user has access to the <see cref="Development security key (SysDevelopment)" /> before calling
        #///    this API.
        #/// </remarks>
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class SysQuery extends Query
        #{
        #    #Query
        #
        #    #define.companyId(1)
        #    #define.isSelected(2)
        #}
      ENDSOURCE
      SOURCE #addIndexToOrderBy
        #/// <summary>
        #/// Adds the fields of an index to the order by list of a <c>QueryBuildDataSource</c> object.
        #/// </summary>
        #/// <param name="indexName">
        #/// The index name.
        #/// </param>
        #/// <param name="qbds">
        #/// The <c>QueryBuildDataSource</c> object.
        #/// </param>
        #public static void addIndexToOrderBy(str indexName, QueryBuildDataSource qbds)
        #{
        #    DictIndex dictIdx;
        #    int idxID;
        #    tableID tableID;
        #    int pos, fldCount;
        #    ;
        #
        #    if (qbds)
        #    {
        #        tableID = qbds.table();
        #        idxID = indexname2id(tableID, indexName);
        #
        #        dictIdx = new DictIndex(tableID, idxID);
        #        if (dictIdx)
        #        {
        #            fldCount = dictIdx.numberOfFields();
        #            for (pos = 1; pos <= fldCount; pos++)
        #            {
        #                qbds.addOrderByField(dictIdx.field(pos));
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #addLockRange_RU
        #static QueryBuildRange addLockRange_RU(QueryBuildDataSource _queryBuildDataSource,
        #                                       fieldId              _fieldId,
        #                                       str                  _value,
        #                                       boolean              _clear = false)
        #{
        #    QueryBuildRange queryBuildRange;
        #
        #    if (_queryBuildDataSource && _fieldId)
        #    {
        #        if (_clear && _queryBuildDataSource.findRange(_fieldId))
        #        {
        #            _queryBuildDataSource.clearRange(_fieldId);
        #        }
        #
        #        queryBuildRange = _queryBuildDataSource.addRange(_fieldId);
        #        queryBuildRange.value(_value);
        #        queryBuildRange.status(RangeStatus::Locked);
        #    }
        #
        #    return queryBuildRange;
        #}
      ENDSOURCE
      SOURCE #addRangesFromCon
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static void addRangesFromCon(QueryBuildDataSource qbds, FieldId fieldId, container con)
        #{
        #    ConEnumerator ce;
        #
        #    if( qbds && fieldId && con )
        #    {
        #        ce = ConEnumerator::construct(con);
        #        while (ce && ce.moveNext())
        #        {
        #            qbds.addRange(fieldId).value(queryValue(ce.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addRangesFromEnumerator
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static void addRangesFromEnumerator(QueryBuildDataSource qbds, FieldId fieldId, Enumerator e)
        #{
        #    if( qbds && fieldId )
        #    {
        #        while (e && e.moveNext())
        #        {
        #            qbds.addRange(fieldId).value(queryValue(e.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addRangesFromKeyData
        #// Can't be an instance method because new queryRun() until takes a query!
        #static void addRangesFromKeyData(
        #    QueryBuildDataSource    qbds,
        #    KeyData                 keyData     // Must be a unique list of values!
        #    )
        #{
        #    Map                     keyDataMap;
        #    MapEnumerator           me;
        #
        #    // A local a method is used because the a variable can change type for each while loop
        #    anytype a()
        #    {
        #        anytype a;
        #        [a] = me.currentValue();
        #        return a;
        #    }
        #    //Only do Map::create() when container has at least 4 parameters. version,domain type,
        #    //range type and size
        #    if (conlen(keyData) >= 4)
        #    {
        #        keyDataMap = Map::create(keyData);
        #
        #        me = keyDataMap.getEnumerator();
        #        while (me.moveNext())
        #        {
        #            qbds.addRange(me.currentKey()).value(queryValue(a()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addRangesFromList
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static void addRangesFromList(QueryBuildDataSource qbds, FieldId fieldId, List list)
        #{
        #    ListEnumerator le;
        #
        #    if( qbds && fieldId && list )
        #    {
        #        le = list.getEnumerator();
        #        while (le && le.moveNext())
        #        {
        #            qbds.addRange(fieldId).value(queryValue(le.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addRangesFromSet
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #static void addRangesFromSet(QueryBuildDataSource qbds, FieldId fieldId, Set set)
        #{
        #    SetEnumerator se;
        #
        #    if( qbds && fieldId && set )
        #    {
        #        se = set.getEnumerator();
        #        while (se && se.moveNext())
        #        {
        #            qbds.addRange(fieldId).value(queryValue(se.current()));
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #addTableRelation
        #public static Query addTableRelation(Query query, tableId tableId)
        #{
        #    Query                   retQuery = new Query(query.pack());
        #    QueryBuildDataSource    qbds1;
        #    QueryBuildDataSource    qbds2;
        #
        #    qbds1 = retQuery.dataSourceNo(1);
        #    qbds2 = qbds1.addDataSource(tableId);
        #
        #    qbds2.relations(true);
        #
        #    return retQuery;
        #}
      ENDSOURCE
      SOURCE #copyDynalinks
        #// AOSRunMode::called
        #public client server static Query copyDynalinks(Query _newQuery, Query _originalQuery)
        #{
        #    QueryBuildDynalink      dynaLink;
        #    QueryBuildDataSource    newDataSource;
        #    QueryBuildDataSource    originalDataSource;
        #    int                     dataSourceCnt;
        #    int                     dynalinkCnt;
        #    int                     i, j;
        #
        #    if (_originalQuery &&
        #        _newQuery)
        #    {
        #        dataSourceCnt = _originalQuery.dataSourceCount();
        #
        #        for (i=1; i <= dataSourceCnt; i++)
        #        {
        #            originalDataSource  = _originalQuery.dataSourceNo(i);
        #            if (originalDataSource.enabled())
        #            {
        #                newDataSource       = _newQuery.dataSourceNo(i);
        #                dynalinkCnt         = originalDataSource.dynalinkCount();
        #
        #                for ( j=1; j <= dynalinkCnt; j++)
        #                {
        #                    dynaLink = originalDataSource.dynalink(j);
        #                    newDataSource.addDynalink(dynaLink.field(), dynaLink.cursor(), dynaLink.dynamicField());
        #                }
        #            }
        #        }
        #    }
        #    return _newQuery;
        #}
      ENDSOURCE
      SOURCE #countLoops
        #public client server static Integer countLoops(QueryRun _queryRun)
        #{
        #    container c = SysQuery::countPrim(_queryRun.pack(false));
        #
        #    return conpeek(c,2);
        #}
      ENDSOURCE
      SOURCE #countPrim
        #private server static container countPrim(container _queryPack)
        #{
        #    Query                   countQuery;
        #    QueryRun                countQueryRun;
        #    QueryBuildDataSource    qbds;
        #    QueryBuildFieldList     qbfl;
        #    Common                  common;
        #    Integer                 counter;
        #    Integer                 loops;
        #    ;
        #    countQueryRun   = new QueryRun(_queryPack);
        #    countQuery      = countQueryRun.query();
        #    qbds            = countQuery.dataSourceNo(1);
        #    qbds.update(false);
        #    qbds.sortClear();
        #    countQuery.clearGroupBy();
        #    countQuery.clearOrderBy();
        #    qbfl = qbds.fields();
        #    qbfl.dynamic(false);
        #    qbfl.clearFieldList();
        #    if (countQuery.dataSourceCount() == 1)
        #        qbds.addSelectionField(fieldnum(Common,RecId),SelectionField::Count);
        #
        #    countQueryRun   = new QueryRun(countQuery);
        #
        #    while (countQueryRun.next())
        #    {
        #        common  = countQueryRun.get(countQuery.dataSourceNo(1).table());
        #        counter += common.RecId;
        #        loops++;
        #    }
        #
        #    return [counter,loops];
        #}
      ENDSOURCE
      SOURCE #countTotal
        #public client server static Integer countTotal(QueryRun _queryRun)
        #{
        #    container c = SysQuery::countPrim(_queryRun.pack(false));
        #
        #    return conpeek(c,1);
        #}
      ENDSOURCE
      SOURCE #deleteDynalinks
        #/*
        #Deletes ranges in Q which is in InitQ.
        #*/
        #public static void deleteDynalinks(Query q, Query initQ, int initQdsNo = 1)
        #{
        #    QueryBuildRange     toQbr;
        #    QueryBuildDynalink  dyna;
        #    Counter             fromI = 1;
        #    fieldId             id;
        #    int                 qdsNo = initQdsNo;
        #    Counter             toI;
        #
        #    if (! initQ.dataSourceNo(initQdsNo))
        #        throw error(strfmt("@SYS23667",funcname()));
        #
        #    if (! q)
        #        throw error(strfmt("@SYS23669",funcname()));
        #
        #    if (! q.dataSourceNo(1))
        #        throw error(strfmt("@SYS23667",funcname()));
        #
        #    if (q.dataSourceCount() >= initQdsNo)
        #    {
        #        if (q.dataSourceNo(initQdsNo).file() != initQ.dataSourceNo(initQdsNo).file())
        #        {
        #               throw error(strfmt("@SYS23668",funcname()));
        #        }
        #    }
        #
        #    if (! initQ)
        #        return;
        #
        #    fromI = 1;
        #    while (fromI <= initQ.dataSourceNo(initQdsNo).dynalinkCount())
        #    {
        #        dyna    = initQ.dataSourceNo(initQdsNo).dynalink(fromI);
        #        id      = dyna.field();
        #        toQbr   = null;
        #        if (q.dataSourceNo(qdsNo).findRange(id))
        #        {
        #            toI = 1;
        #            while (toI)
        #            {
        #                toQbr  = q.dataSourceNo(qdsNo).findRange(id,toI);
        #
        #                if (! toQbr)
        #                    break;
        #
        #                // If To and From values are equal then emthy range
        #                if (toQbr.value() && toQbr.value() == dyna.cursor().(dyna.dynamicField()))
        #                    toQbr.value('');
        #
        #                toI++;
        #            }
        #        }
        #
        #        fromI++;
        #    }
        #}
      ENDSOURCE
      SOURCE #disabledDataSourceSet
        #public static Set disabledDataSourceSet(Query _query)
        #{
        #    Set                  disabledDataSourceSet   = new Set(Types::Integer);
        #    QueryBuildDataSource queryBuildDataSource;
        #    Counter              dataSourceCnt           = _query.dataSourceCount();
        #    Counter              childCnt;
        #    int                  i;
        #
        #
        #    for (i=1; i<=dataSourceCnt; i++)
        #    {
        #        queryBuildDataSource = _query.dataSourceNo(i);
        #        if (!disabledDataSourceSet.in(queryBuildDataSource.uniqueId()) &&
        #            !queryBuildDataSource.enabled())
        #        {
        #            disabledDataSourceSet.add(queryBuildDataSource.uniqueId());
        #
        #            childCnt = queryBuildDataSource.childDataSourceCount();
        #            if (childCnt)
        #            {
        #                SysQuery::disabledDataSourceSetChildren(disabledDataSourceSet, queryBuildDataSource, childCnt);
        #            }
        #        }
        #    }
        #
        #    return disabledDataSourceSet;
        #}
      ENDSOURCE
      SOURCE #disabledDataSourceSetChildren
        #private static void disabledDataSourceSetChildren(Set _disabledDataSourceSet, QueryBuildDataSource _queryBuildDataSource, Counter _childCnt)
        #{
        #    QueryBuildDataSource childDataSource;
        #    int                  i;
        #    Counter              counter;
        #
        #    for (i=1; i<=_childCnt; i++)
        #    {
        #        childDataSource = _queryBuildDataSource.childDataSourceNo(i);
        #        _disabledDataSourceSet.add(childDataSource.uniqueId());
        #
        #        counter = childDataSource.childDataSourceCount();
        #        if (counter)
        #        {
        #            SysQuery::disabledDataSourceSetChildren(_disabledDataSourceSet, childDataSource, counter);
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #findGroupByField
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static QueryGroupByField findGroupByField(
        #    Query                   _query,
        #    QueryBuildDataSource    _qbds,
        #    fieldId                 _fieldId)
        #{
        #    int                 groupFields;
        #    int                 i;
        #    QueryGroupByField   queryGroupByField;
        #
        #    if (_query && _qbds)
        #    {
        #        groupFields = _query.groupByFieldCount();
        #        for (i=1; i <= groupFields; ++i)
        #        {
        #            queryGroupByField = _query.groupByField(i);
        #
        #            if (queryGroupByField
        #                && queryGroupByField.fieldID() == _fieldId
        #                && queryGroupByField.dataSource().table() == _qbds.table())
        #            {
        #                break;
        #            }
        #        }
        #    }
        #
        #    return queryGroupByField;
        #}
      ENDSOURCE
      SOURCE #findOrCreateDataSource
        #public static QueryBuildDataSource findOrCreateDataSource(Query _query, tableId _tableId, tableId _parentTableId = 0)
        #{
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildDataSource    parentDataSource;
        #    ;
        #    if (_query)
        #    {
        #        queryBuildDataSource = _query.dataSourceTable(_tableId);
        #
        #        if (!queryBuildDataSource)
        #        {
        #            if (_parentTableId)
        #            {
        #                parentDataSource = _query.dataSourceTable(_parentTableId);
        #
        #                if (parentDataSource)
        #                {
        #                    queryBuildDataSource = parentDataSource.addDataSource(_tableId);
        #                }
        #            }
        #            else
        #            {
        #                queryBuildDataSource = _query.addDataSource(_tableId);
        #            }
        #        }
        #    }
        #    return queryBuildDataSource;
        #}
      ENDSOURCE
      SOURCE #findOrCreateGroupByField
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static QueryGroupByField findOrCreateGroupByField(Query _query, QueryBuildDataSource _queryBuildDataSource, fieldId _fieldId)
        #{
        #    QueryGroupByField    queryGroupByField;
        #
        #    if (_query && _queryBuildDataSource)
        #    {
        #        queryGroupByField = SysQuery::findGroupByField(_query, _queryBuildDataSource, _fieldId);
        #
        #        if (!queryGroupByField)
        #        {
        #            queryGroupByField = _queryBuildDataSource.addGroupByField(_fieldId);
        #        }
        #    }
        #
        #    return queryGroupByField;
        #}
      ENDSOURCE
      SOURCE #findOrCreateRange
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static QueryBuildRange findOrCreateRange(QueryBuildDataSource _queryBuildDataSource, fieldId _fieldId)
        #{
        #    QueryBuildRange queryBuildRange;
        #
        #    if (_queryBuildDataSource)
        #    {
        #        queryBuildRange = _queryBuildDataSource.findRange(_fieldId);
        #
        #        if (!queryBuildRange && _fieldId)
        #        {
        #            queryBuildRange = _queryBuildDataSource.addRange(_fieldId);
        #        }
        #    }
        #    return queryBuildRange;
        #}
      ENDSOURCE
      SOURCE #findOrCreateRangeValue
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// использует уже существующий range или добавляет новый
        #// сразу устанавливает value (включая контейнер), выполняет экранирование
        #public static QueryBuildRange findOrCreateRangeValue(
        #    QueryBuildDataSource    _queryBuildDataSource,
        #    fieldId                 _fieldId,
        #    Anytype                 _value)
        #{
        #    QueryBuildRange     queryBuildRange     = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);
        #    str                 strValue;
        #
        #    if (queryBuildRange)
        #    {
        #        strValue = SysQuery::value(_value);
        #        queryBuildRange.value(strValue);
        #    }
        #
        #    return queryBuildRange;
        #}
      ENDSOURCE
      SOURCE #findOrCreateRangeValueNot
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// использует уже существующий range или добавляет новый
        #// сразу устанавливает value (включая контейнер), выполняет экранирование
        #public static QueryBuildRange findOrCreateRangeValueNot(
        #    QueryBuildDataSource    _queryBuildDataSource,
        #    fieldId                 _fieldId,
        #    Anytype                 _value)
        #{
        #    QueryBuildRange     queryBuildRange     = SysQuery::findOrCreateRange(_queryBuildDataSource, _fieldId);
        #    str                 strValue;
        #
        #    if (queryBuildRange)
        #    {
        #        strValue = SysQuery::valueNot(_value);
        #        queryBuildRange.value(strValue);
        #    }
        #
        #    return queryBuildRange;
        #}
      ENDSOURCE
      SOURCE #findSortingNo_W
        #public static int findSortingNo_W(QueryBuildDataSource _queryBuildDataSource, fieldId _fieldId)
        #{
        #    Counter sortfieldCount = _queryBuildDataSource.sortFieldCount();
        #    int     i;
        #    int     sortingNo;
        #
        #    for (i = 1; i <= sortfieldCount && !sortingNo; i++)
        #    {
        #        if (_fieldId == _queryBuildDataSource.sortField(i))
        #        {
        #            sortingNo = i;
        #        }
        #    }
        #    return sortingNo;
        #}
      ENDSOURCE
      SOURCE #isPackedOk
        #/*MAN
        #Method to test a packed queryrun container is legal.
        #*/
        #public static boolean isPackedOk(PackedQueryRun packed)
        #{
        #    boolean     ret;
        #
        #    ret = packed && conlen(packed) > 0;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #mergeRanges
        #public static void mergeRanges(Query       q,
        #                               Query       initQ,
        #                               int         initQdsNo = 1,
        #                               boolean     alwaysAddDatasource     = false,
        #                               boolean     addSameFieldRange       = true)
        #{
        #    QueryBuildRange     fromQbr;
        #    QueryBuildRange     toQbr;
        #    QueryBuildDynalink  dyna;
        #    Counter             fromI = 1;
        #    int                 qdsNo = initQdsNo;
        #    Counter             toI;
        #    tableId             tableId;
        #    DictField           dictField;
        #    int                 dictIndex;
        #    int                 originalId;
        #
        #    void add()
        #    {
        #        q.addDataSource(initQ.dataSourceNo(initQdsNo).file());
        #        qdsNo = q.dataSourceCount();
        #    }
        #
        #    void findToQbr(fieldId id)
        #    {
        #        originalId  = id;
        #        id          = fieldExt2Id(id);
        #        toQbr       = null;
        #
        #        // get table id & dictField
        #        tableId = q.dataSourceNo(qdsNo).table();
        #        dictField = new DictField(tableId,id);
        #        dictIndex = originalId >> 16;
        #
        #        // If this is a dimension field, get range using the array index, otherwise get range with id
        #        if ( ((dictField.arraySize() > 1) && q.dataSourceNo(qdsNo).findRange(fieldId2Ext(id, dictIndex))) ||
        #            ((dictField.arraySize() <= 1) && q.dataSourceNo(qdsNo).findRange(id)) )
        #        {
        #            // If same range is found, then next range
        #            if (! addSameFieldRange)
        #                continue;
        #
        #            toI = 1;
        #            while (toI)
        #            {
        #                // is this a Dimension field?
        #                if (dictField.arraySize() > 1)
        #                    toQbr  = q.dataSourceNo(qdsNo).findRange(fieldId2Ext(id, dictIndex),toI);
        #                else
        #                    toQbr  = q.dataSourceNo(qdsNo).findRange(id,toI);
        #
        #                if (! toQbr)
        #                    break;
        #
        #                // If To value is empty, use it later
        #                if (! toQbr.value())
        #                    break;
        #
        #                // If To and From values are equal then add new range later
        #                if (toQbr.value() == fromQbr.value())
        #                    break;
        #
        #                toI++;
        #            }
        #        }
        #        if (! toQbr             ||
        #            (addSameFieldRange  &&
        #             toQbr              &&
        #             toQbr.value()      &&
        #             fromQbr.value()    &&
        #             toQbr.value()      != fromQbr.value()
        #            )
        #           )
        #        {
        #
        #            if (dictField.arraySize() > 1)
        #            {
        #                // yes, working with Dimension
        #                toQbr  = q.dataSourceNo(qdsNo).addRange(fieldId2Ext(id, dictIndex));
        #            }
        #            else
        #            {
        #                toQbr  = q.dataSourceNo(qdsNo).addRange(id);
        #            }
        #        }
        #    }
        #
        #
        #    // Start
        #
        #    if (! initQ)
        #        throw error(strfmt("@SYS23669",funcname()));
        #
        #    if (! initQ.dataSourceNo(initQdsNo))
        #        throw error(strfmt("@SYS23667",funcname()));
        #
        #    if (! q)
        #        throw error(strfmt("@SYS23669",funcname()));
        #
        #    if (q.dataSourceCount() >= initQdsNo)
        #    {
        #        if (q.dataSourceNo(initQdsNo).file() != initQ.dataSourceNo(initQdsNo).file())
        #        {
        #            if (alwaysAddDatasource)
        #                add();
        #            else
        #               throw error(strfmt("@SYS23668",funcname()));
        #        }
        #    }
        #    else
        #        add();
        #
        #    if (! initQ)
        #        return;
        #
        #    for (fromI=1;fromI<=initQ.dataSourceNo(initQdsNo).rangeCount();fromI++)
        #    {
        #        fromQbr = initQ.dataSourceNo(initQdsNo).range(fromI);
        #
        #        findToQbr(fromQbr.field());
        #
        #        if (toQbr)
        #        {
        #            // Only set if From has a value
        #            if (fromQbr.value())
        #                toQbr.value(fromQbr.value());
        #
        #            switch (fromQbr.status())
        #            {
        #                case RangeStatus::Locked:
        #                    if (toQbr.status() == RangeStatus::Open)
        #                        toQbr.status(RangeStatus::Locked);
        #                    break;
        #                case RangeStatus::Hidden:
        #                    switch (toQbr.status())
        #                    {
        #                        case RangeStatus::Open,RangeStatus::Locked:
        #                            toQbr.status(RangeStatus::Hidden);
        #                            break;
        #                    }
        #                    break;
        #            }
        #        }
        #
        #    }
        #
        #    fromI = 1;
        #    while (fromI <= initQ.dataSourceNo(initQdsNo).dynalinkCount())
        #    {
        #        dyna =  initQ.dataSourceNo(initQdsNo).dynalink(fromI);
        #
        #        findToQbr(dyna.field());
        #
        #        if (toQbr)
        #            toQbr.value(queryValue(dyna.cursor().(dyna.dynamicField())));
        #
        #        fromI++;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #packDataSource
        #private static client server container packDataSource(Query _query, int _dataSourceUniqueId, int _queryNextUniqueId, int dataSourceNo)
        #{
        #    QueryBuildDataSource    queryBuildDataSource = _query.dataSourceUniqueId(_dataSourceUniqueId);
        #    QueryBuildRange         queryBuildRange;
        #    QueryBuildDataSource    childDataSource;
        #    QueryBuildLink          queryBuildLink;
        #    DictIndex               dictIndex;
        #    QueryBuildDataSource    groupByDataSource;
        #    QueryBuildDataSource    orderByDataSource;
        #    QueryGroupByField       groupByField;
        #    QueryOrderByField       orderByField;
        #    container               dataSourcePack;
        #    container               rangePack;
        #    container               sortingPack;
        #    container               indexPack;
        #    container               relatedTablesPack;
        #    container               linkPack;
        #    container               groupByPack;
        #    container               orderByPack;
        #    boolean                 linkAuto;
        #    int                     position;
        #    int                     i;
        #    int                     elements;
        #
        #    if (queryBuildDataSource.enabled())
        #    {
        #        // Pack table-Id
        #        dataSourcePack = conins(dataSourcePack, #packTableIdPos, [queryBuildDataSource.table()]);
        #
        #        // Pack links
        #        if (_dataSourceUniqueId >= _queryNextUniqueId)
        #        {
        #            if (queryBuildDataSource.relations())
        #            {
        #                linkAuto = true;
        #            }
        #            else
        #            {
        #                position = 0;
        #                elements = queryBuildDataSource.linkCount();
        #                for (i=1; i<=elements; i++)
        #                {
        #                    queryBuildLink =  queryBuildDataSource.link(i);
        #                    position++;
        #                    linkPack       = conins(linkPack, position, [queryBuildLink.field(), queryBuildLink.relatedField()]);
        #                }
        #            }
        #        }
        #        dataSourcePack = conins(dataSourcePack, #packLinkPos, [linkAuto, linkPack]);
        #
        #        // Pack ranges
        #        position = 0;
        #        elements = queryBuildDataSource.rangeCount();
        #        for (i=1; i <= elements; i++)
        #        {
        #            queryBuildRange = queryBuildDataSource.range(i);
        #//            if (queryBuildRange.status() == RangeStatus::Open ||
        #//                queryBuildDataSource.uniqueId() >= _queryNextUniqueId)
        #//            {
        #                position++;
        #                rangePack       = conins(rangePack, position, [queryBuildRange.field(), queryBuildRange.label(), queryBuildRange.value(), queryBuildRange.status(), queryBuildRange.doesRangeNodeBelongToCompositeQuery()]);
        #//            }
        #        }
        #        dataSourcePack = conins(dataSourcePack, #packRangePos, rangePack);
        #
        #        // Sorting
        #        // Pack only the first index.
        #        position = 0;
        #        elements = queryBuildDataSource.sortIndexCount();
        #        for (i=1; i <= elements; i++)
        #        {
        #            dictIndex   = new DictIndex(queryBuildDataSource.table(), queryBuildDataSource.sortIndex(i));
        #            if(dictIndex)
        #            {
        #                position++;
        #                indexPack = conins(indexPack, position, dictIndex.id());
        #                break;
        #            }
        #        }
        #
        #        dataSourcePack = conins(dataSourcePack, #packSortingPos, [indexPack, sortingPack]);
        #
        #        // Tables added in the query dialog
        #        position = 0;
        #        elements = queryBuildDataSource.childDataSourceCount();
        #        for (i=1; i <= elements; i++)
        #        {
        #            childDataSource = queryBuildDataSource.childDataSourceNo(i);
        #            if (childDataSource.uniqueId() >= _queryNextUniqueId &&
        #                childDataSource.enabled())
        #            {
        #                position++;
        #                relatedTablesPack = conins(relatedTablesPack, position, SysQuery::packDataSource(_query, childDataSource.uniqueId(), _queryNextUniqueId, dataSourceNo + i));
        #            }
        #        }
        #        dataSourcePack = conins(dataSourcePack, #packRelatedTablesPos, relatedTablesPack);
        #
        #        if (dataSourceNo == 1)
        #        {
        #            // Clear any order by fields
        #            // that mirror sort indexes.
        #            SysQuery::packHandleSortIndex(_query);
        #
        #            // Pack group by fields
        #            elements = _query.groupByFieldCount();
        #            position = 0;
        #            for (i=1; i <= elements; i++)
        #            {
        #                groupByField = _query.groupByField(i);
        #                groupByDataSource = groupByField.dataSource();
        #                if (groupByDataSource.enabled())
        #                {
        #                    position++;
        #                    groupByPack = conins(groupByPack, position,
        #                                        [groupByDataSource.uniqueID(),
        #                                        groupByField.fieldID(),
        #                                        groupByField.autoHeader(),
        #                                        groupByField.autoHeaderDetailLevel(),
        #                                        groupByField.autoSum(),
        #                                        groupByField.autoSumDetailLevel()]);
        #                }
        #            }
        #            dataSourcePack = conins(dataSourcePack, #packGroupByPos, groupByPack);
        #
        #            // Pack order by fields
        #            elements = _query.orderByFieldCount();
        #            position = 0;
        #            for (i=1; i <= elements; i++)
        #            {
        #                orderByField = _query.orderByField(i);
        #                orderByDataSource = orderByField.dataSource();
        #                if (orderByDataSource.enabled())
        #                {
        #                    position++;
        #                    orderByPack = conins(orderByPack, position,
        #                                        [orderByDataSource.uniqueID(),
        #                                        orderByField.fieldID(),
        #                                        orderByField.direction(),
        #                                        orderByField.autoHeader(),
        #                                        orderByField.autoHeaderDetailLevel(),
        #                                        orderByField.autoSum(),
        #                                        orderByField.autoSumDetailLevel()]);
        #                }
        #            }
        #            dataSourcePack = conins(dataSourcePack, #packOrderByPos, orderByPack);
        #        }
        #    }
        #    return dataSourcePack;
        #}
      ENDSOURCE
      SOURCE #packHandleSortIndex
        #private static void packHandleSortIndex(Query q)
        #{
        #    QueryBuildDataSource currentDataSource;
        #    QueryBuildDataSource targetDataSource;
        #    QueryBuildDataSource currentRoot;
        #    List rootList = new List(Types::Integer);
        #    List groupList;
        #    ListEnumerator rootListEnumerator;
        #    ListEnumerator groupListEnumerator;
        #
        #    Map groupMap = new Map(Types::Integer, Types::Class);
        #
        #    DictTable dictTable;
        #    DictIndex dictIndex;
        #    QueryOrderByField orderByField;
        #
        #    int i;
        #    int rootKey;
        #    int elements;
        #    int orderByFieldIndex;
        #    int orderByFieldCount = q.orderByFieldCount();
        #
        #    boolean isEligible;
        #    boolean foundSortIndex;
        #    ;
        #
        #    // Determine the group of data sources
        #    // that will be executed as a unit.
        #    elements = q.dataSourceCount();
        #    for (i=1; i <= elements; I++)
        #    {
        #        currentDataSource = q.dataSourceNo(i);
        #
        #        // Get top most parent data source.
        #        currentRoot = currentDataSource;
        #        while (currentRoot.joined())
        #        {
        #            dictTable = new DictTable(currentRoot.table());
        #            if (dictTable && dictTable.isTmp())
        #            {
        #                break;
        #            }
        #
        #            dictTable = new DictTable(currentRoot.parentDataSource().table());
        #            if (dictTable && dictTable.isTmp())
        #            {
        #                break;
        #            }
        #            currentRoot = currentRoot.parentDataSource();
        #        }
        #
        #        if (groupMap.exists(currentRoot.uniqueId()))
        #        {
        #            groupList = groupMap.lookup(currentRoot.uniqueId());
        #        }
        #        else
        #        {
        #            rootList.addEnd(currentRoot.uniqueId());
        #            groupList = new List(Types::Class);
        #            groupMap.insert(currentRoot.uniqueId(), groupList);
        #
        #        }
        #        groupList.addEnd(currentDataSource);
        #    }
        #
        #
        #    // Enumerate through each data source group.
        #    // The root list contains the key into the groupMap.
        #    rootListEnumerator = rootList.getEnumerator();
        #    while (rootListEnumerator.moveNext())
        #    {
        #        rootKey = rootListEnumerator.current();
        #        if (groupMap.exists(rootKey))
        #        {
        #            groupList = groupMap.lookup(rootKey);
        #            groupListEnumerator = groupList.getEnumerator();
        #            foundSortIndex = false;
        #            isEligible = true;
        #
        #            // Loop through each data source in the group.
        #            while (groupListEnumerator.moveNext() && isEligible)
        #            {
        #                currentDataSource = groupListEnumerator.current();
        #
        #                // If the data source is part of the group by list
        #                // then the sort index (if any) is invalid and should be ignored.
        #                elements = q.groupByFieldCount();
        #                for (i = 1; i <= elements; i++)
        #                {
        #                    if (q.groupByField(i).dataSource().uniqueId() == currentDataSource.uniqueId())
        #                    {
        #                        isEligible = false;
        #                        break;
        #                    }
        #                }
        #
        #                dictIndex = null;
        #                if (currentDataSource.sortIndexCount())
        #                {
        #                    // Find the first valid index.
        #                    elements = currentDataSource.sortIndexCount();
        #                    for (i=1; i <= elements; i++)
        #                    {
        #                        dictIndex = new DictIndex(currentDataSource.table(), currentDataSource.sortIndex(i));
        #                        if (dictIndex)
        #                        {
        #                            break;
        #                        }
        #                    }
        #                }
        #
        #                if (dictIndex)
        #                {
        #                    if (!foundSortIndex)
        #                    {
        #                        // Set the orderByFieldIndex to the first order by field
        #                        // that matches the current data source.
        #                        foundSortIndex = true;
        #                        for (orderByFieldIndex = 1; orderByFieldIndex <= orderByFieldCount; orderByFieldIndex++)
        #                        {
        #                            orderByField = q.orderByField(i);
        #                            targetDataSource = orderByField.dataSource();
        #                            if (targetDataSource.uniqueId() == currentDataSource.uniqueId())
        #                            {
        #                                break;
        #                            }
        #                        }
        #                    }
        #
        #                    elements = dictIndex.numberOfFields();
        #                    if (elements  != currentDataSource.sortFieldCount())
        #                    {
        #                        isEligible = false;
        #                        break;
        #                    }
        #
        #                    for (i = 1; i <= elements; i++)
        #                    {
        #                        if (orderByFieldIndex <= orderByFieldCount)
        #                        {
        #                            targetDataSource = q.orderByField(orderByFieldIndex).dataSource();
        #
        #                            orderByFieldIndex++; // set index to next field in order by list.
        #
        #                            if (targetDataSource.sortField(i)       != dictIndex.field(i)||
        #                                targetDataSource.sortDirection(i)   != SortOrder::Ascending ||
        #                                targetDataSource.autoHeader(i) ||
        #                                targetDataSource.autoSum(i) ||
        #                                targetDataSource.autoHeaderDetailLevel(i) ||
        #                                targetDataSource.autoSumDetailLevel(i))
        #                            {
        #                                isEligible = false;
        #                                break;
        #                            }
        #                        }
        #                        else
        #                        {
        #                            // Could not match all sort index fields,
        #                            // so we should fail at this point.
        #                            isEligible = false;
        #                            break;
        #                        }
        #                    }
        #                }
        #                else
        #                {
        #                    for (i = 1; i <= orderByFieldCount; i++)
        #                    {
        #                        orderByField = q.orderByField(i);
        #                        targetDataSource = orderByField.dataSource();
        #                        if (targetDataSource.uniqueId() == currentDataSource.uniqueId())
        #                        {
        #                            isEligible = false;
        #                        }
        #                        break;
        #                    }
        #                }
        #            }
        #
        #            // We have processed all data source for
        #            // the group.  If we found sort indexes
        #            // and they align with the order by fields,
        #            // then we will clear them for the data source group.
        #            if (foundSortIndex && isEligible)
        #            {
        #                groupListEnumerator.reset();
        #                while (groupListEnumerator.moveNext())
        #                {
        #                    currentDataSource = groupListEnumerator.current();
        #                    currentDataSource.orderMode(OrderMode::OrderBy);
        #                    currentDataSource.sortClear();
        #                }
        #
        #            }
        #        }
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #packRangeAndSortorder
        #public static client server container packRangeAndSortorder(Query _query, int _queryNextUniqueId = 0)
        #{
        #    QueryBuildDataSource queryBuildDataSource;
        #    container            queryPack;
        #    container            companyRangesPack;
        #    container            internalsPack;
        #    int                  queryNextUniqueId = _queryNextUniqueId;
        #    int                  dataSourceCnt;
        #    int                  i, j;
        #
        #    if (_query)
        #    {
        #        dataSourceCnt = _query.dataSourceCount();
        #
        #        if (!queryNextUniqueId)
        #        {
        #            queryNextUniqueId = _query.getNextUniqueId();
        #        }
        #
        #        for (i=1; i <= dataSourceCnt; i++)
        #        {
        #            queryBuildDataSource = _query.dataSourceNo(i);
        #            if (queryBuildDataSource.uniqueId() < queryNextUniqueId &&
        #                queryBuildDataSource.enabled())
        #            {
        #                j++;
        #                queryPack = conins(queryPack, j, SysQuery::packDataSource(_query, queryBuildDataSource.uniqueId(), queryNextUniqueId, i));
        #            }
        #        }
        #
        #        if (_query.allowCrossCompany())
        #        {
        #            companyRangesPack = _query.getCompanyRange();
        #        }
        #        else
        #        {
        #            companyRangesPack = connull();
        #        }
        #
        #        internalsPack = _query.packInternals();
        #    }
        #
        #    return [#packCompanyRangeAndInternalsVersion, queryPack, companyRangesPack, internalsPack];
        #}
      ENDSOURCE
      SOURCE #query
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Query query(
        #    TableId     _tableId,
        #    FieldId     _fieldId    = 0,
        #    Anytype     _value      = null)
        #{
        #    Query                   q       = new Query();
        #    QueryBuildDataSource    qbds    = q.addDataSource(_tableId);
        #
        #    if (_fieldId && qbds && !prmisdefault(_value))
        #    {
        #        SysQuery::findOrCreateRangeValue(qbds, _fieldId, _value);
        #    }
        #
        #    return q;
        #}
      ENDSOURCE
      SOURCE #queryAddDynaCursorAsRangeAndValue
        #// This method will traverse dynalinks on QueryBuildDataSource represented by _queryDynaBdsNo
        #// and convert current dyna-record into ranges and values on that QueryBuildDataSource
        #static client server void queryAddDynaCursorAsRangeAndValue(
        #    Query   _query,             // new query
        #    Query   _queryDyna,         // query having external links (=dyna links)
        #    Integer _queryDynaBdsNO     // queryBuildDataSource on _queryDyna having external links
        #    )
        #{
        #    QueryBuildRange     toQbr;
        #    QueryBuildDynalink  qbDyna;
        #    Counter             dynaLinkNo = 1;
        #    Counter             toI;
        #    DictField           dictField;
        #    Integer             dictIndex;
        #    Integer             originalId;
        #    Integer             queryDsNO = _queryDynaBdsNO;
        #    fieldId             id;
        #    ;
        #    if (!_queryDynaBdsNO)
        #        return;
        #
        #    if (!_query || !_queryDyna)
        #        throw error(strfmt("@SYS23669",funcname()));
        #
        #    if (!_queryDyna.dataSourceNo(_queryDynaBdsNO))
        #        throw error(strfmt("@SYS23667",funcname()));
        #
        #    if (_query.dataSourceCount() < _queryDynaBdsNO || _query.dataSourceNo(_queryDynaBdsNO).file() != _queryDyna.dataSourceNo(_queryDynaBdsNO).file())
        #    {
        #        _query.addDataSource(_queryDyna.dataSourceNo(_queryDynaBdsNO).file());
        #        queryDsNO = _query.dataSourceCount();
        #    }
        #    while (dynaLinkNo <= _queryDyna.dataSourceNo(_queryDynaBdsNO).dynalinkCount())
        #    {
        #        qbDyna      = _queryDyna.dataSourceNo(_queryDynaBdsNO).dynalink(dynaLinkNo);
        #        id          = fieldExt2Id(qbDyna.field());
        #        originalId  = id;
        #        toQbr       = null;
        #
        #        if (_query.dataSourceNo(queryDsNO).findRange(id))
        #        {
        #            toI = 1;
        #            while (true)
        #            {
        #                toQbr  = _query.dataSourceNo(queryDsNO).findRange(id,toI);
        #                if (!toQbr || !toQbr.value() || toQbr.value() == queryValue(qbDyna.cursor().(qbDyna.dynamicField())))
        #                    break;
        #                toI++;
        #            }
        #        }
        #        if (!toQbr || (toQbr && toQbr.value() && queryValue(qbDyna.cursor().(qbDyna.dynamicField())) && toQbr.value() != queryValue(qbDyna.cursor().(qbDyna.dynamicField()))))
        #        {
        #            // is this a Dimension field?
        #            dictField = new DictField(_query.dataSourceNo(queryDsNO).table(),id);
        #
        #            if (dictField.arraySize() > 1)
        #            {
        #                // yes, working with Array field
        #                dictIndex = originalId >> 16;
        #                toQbr  = _query.dataSourceNo(queryDsNO).addRange(fieldId2Ext(id, dictIndex));
        #            }
        #            else
        #            {
        #                toQbr  = _query.dataSourceNo(queryDsNO).addRange(id);
        #            }
        #        }
        #        if (toQbr)
        #            toQbr.value(queryValue(qbDyna.cursor().(qbDyna.dynamicField())));
        #
        #        dynaLinkNo++;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #queryAddUniqueRangeAndValue
        #static client server void queryAddUniqueRangeAndValue(
        #    Query   _query,
        #    Common  _source
        #    )
        #{
        #    Common                  callerBuffer = _source;
        #    SysDictTable            sysDictTable = new SysDictTable(callerBuffer.TableId);
        #    QueryBuildDataSource    qbd;
        #    QueryBuildRange         qbr;
        #    DictIndex               dictIndex;
        #    Integer                 indexId;
        #    Integer                 i;
        #    fieldId                 fieldId;
        #
        #    void indexAddUniqueRangesAndValues()
        #    {
        #        for (i=1;i<=dictIndex.numberOfFields();i++)
        #        {
        #            fieldId = dictIndex.field(i);
        #            qbr = qbd.findRange(fieldId);
        #            if (!qbr)
        #                qbr = qbd.addRange(fieldId);
        #            qbr.status(RangeStatus::Locked);
        #            qbr.value(queryValue(callerBuffer.(fieldId)));
        #        }
        #    }
        #    ;
        #    if (!callerBuffer.RecId)
        #        return;
        #
        #    dictIndex   = sysDictTable.firstUniqueIndex();
        #    qbd         = _query.dataSourceTable(callerBuffer.TableId);
        #
        #    if (dictIndex)
        #    {
        #        indexAddUniqueRangesAndValues();
        #    }
        #    else
        #    {
        #        indexId = sysDictTable.indexNext(0);
        #        if (indexId)
        #        {
        #            dictIndex = sysDictTable.indexObject(indexId);
        #            indexAddUniqueRangesAndValues();
        #        }
        #        fieldId = fieldnum(Common,RecId);
        #        qbr = qbd.findRange(fieldId);
        #        if (!qbr)
        #            qbr = qbd.addRange(fieldId);
        #        qbr.status(RangeStatus::Locked);
        #        qbr.value(queryValue(callerBuffer.RecId));
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #queryFromKeyData
        #static Query queryFromKeyData(
        #    tableId         tableId,
        #    KeyData         keyData     // Should be a unique list!
        #    )
        #{
        #    Query                   q;
        #    QueryBuildDataSource    qbds;
        #
        #    q    = new Query();
        #    qbds = q.addDataSource(tableId);
        #    SysQuery::addRangesFromKeyData(qbds,keyData);
        #
        #    return q;
        #}
      ENDSOURCE
      SOURCE #queryFromTableRelation
        #public static Query queryFromTableRelation(Common _parentTable, tableId _relationTableId, boolean _update = false, boolean _noRelationNoRecords = true)
        #{
        #    Query           query;
        #    DictRelation    dictRelation;
        #    Counter         c;
        #    ;
        #
        #    dictRelation = new DictRelation(_relationTableId);
        #    dictRelation.loadTableRelation(_parentTable.TableId);
        #
        #    query = new Query();
        #    query.addDataSource(_relationTableId);
        #
        #    if (_noRelationNoRecords && dictRelation.lines() == 0)
        #    {
        #        query.dataSourceTable(_relationTableId).addRange(fieldnum(Common, TableId)).value(queryValue(0));
        #    }
        #
        #    for (c=1; c <= dictRelation.lines(); c++)
        #    {
        #        switch (dictRelation.lineType(c))
        #        {
        #            case TableRelation::Field:
        #                query.dataSourceTable(_relationTableId).addRange(dictRelation.lineTableValue(c)).value(queryValue(_parentTable.(dictRelation.lineExternTableValue(c))));
        #                break;
        #
        #            case TableRelation::ExternFixed:
        #                if (_noRelationNoRecords && _parentTable.(dictRelation.lineExternTableValue(c)) != dictRelation.lineTableValue(c))
        #                {
        #                    query.dataSourceTable(_relationTableId).addRange(fieldnum(Common, TableId)).value(queryValue(0));
        #                }
        #                break;
        #
        #            case TableRelation::ThisFixed:
        #                query.dataSourceTable(_relationTableId).addRange(dictRelation.lineTableValue(c)).value(queryValue(dictRelation.lineExternTableValue(c)));
        #                break;
        #        }
        #    }
        #
        #    query.dataSourceTable(_relationTableId).update(_update);
        #
        #    return query;
        #}
      ENDSOURCE
      SOURCE #queryRun
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static QueryRun queryRun(
        #    TableId     _tableId,
        #    FieldId     _fieldId    = 0,
        #    Anytype     _value      = null)
        #{
        #    Query       q   = SysQuery::query(_tableId, _fieldId, _value);
        #    QueryRun    qr  = new QueryRun(q);
        #
        #    return qr;
        #}
      ENDSOURCE
      SOURCE #range
        #public static str range(anytype _from, anytype _to)
        #{
        #    str     range;
        #    // <GEEU>
        #    boolean hasFrom = _from || (typeof(_from) != Types::String && typeof(_from) != Types::Date);
        #    boolean hasTo   = _to || (typeof(_to) != Types::String && typeof(_to) != Types::Date);
        #    // </GEEU>
        #
        #    /* <SYS>
        #    if (_from)
        #    </SYS> */
        #    // <GEEU>
        #    if (hasFrom)
        #    // </GEEU>
        #    {
        #        /* <SYS>
        #        range += queryValue(_from);
        #        </SYS> */
        #        // <GEEU>
        #        range = queryValue(_from);
        #        // </GEEU>
        #    }
        #    /* <SYS>
        #    if (_from || _to)
        #    </SYS> */
        #    // <GEEU>
        #    if (hasFrom || hasTo)
        #    // </GEEU>
        #    {
        #        range += '..';
        #    }
        #    /* <SYS>
        #    if (_to)
        #    </SYS> */
        #    // <GEEU>
        #    else
        #    {
        #        range = SysQuery::valueEmptyString();
        #    }
        #    if (hasTo)
        #    // </GEEU>
        #    {
        #        range += queryValue(_to);
        #    }
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #tableOccurrence
        #// AOSRunMode::client
        #static client server int tableOccurrence(Query query, tableId tableId, int dataSourceNo)
        #{
        #    DictTable               dictTable;
        #    QueryBuildDataSource    dataSource;
        #    int                     i;
        #    int                     tableOccurrence;
        #    ;
        #
        #    for (i = 1; i <= dataSourceNo; i++)
        #    {
        #        dataSource      = query.dataSourceNo(i);
        #        dictTable       = new DictTable(dataSource.table());
        #
        #        if (tableId == dictTable.id())
        #        {
        #            tableOccurrence++;
        #        }
        #    }
        #
        #    return tableOccurrence;
        #}
      ENDSOURCE
      SOURCE #tableOccurrenceText
        #// AOSRunMode::client
        #static client server str tableOccurrenceText(int tableOccurrence)
        #{
        #    if (tableOccurrence > 1)
        #        return strfmt('(%1)', tableOccurrence);
        #
        #    return '';
        #}
      ENDSOURCE
      SOURCE #take
        #// получить из запроса n записей, начиная со startFrom
        #public static QueryRun take(Query q, int n, int startFrom = 1)
        #{
        #    QueryRun qr = new QueryRun(q);
        #
        #    qr = QueryRunUtil::take(qr, n, startFrom);
        #
        #    return qr;
        #}
      ENDSOURCE
      SOURCE #UnpackCompanyRanges
        #/// <summary>
        #/// Unpacks the ranges contained by the companyRanges container and adds them
        #/// to the query passed in.
        #/// </summary>
        #/// <param name="query">
        #/// The Query to add the company ranges to.
        #/// </param>
        #/// <param name="companyRanges">
        #/// The container containing the company ranges.
        #/// </param>
        #/// <remarks>
        #/// The container passed in must be in the same format as the container that is retrieved
        #/// from the query on the query.GetCompanyRanges() call.
        #/// </remarks>
        #private static client server void unpackCompanyRanges(Query query, container companyRanges)
        #{
        #    container companyRange;
        #    int numRanges;
        #    int i;
        #    boolean allSelected = true;
        #    ;
        #
        #    if(query.allowCrossCompany())
        #    {
        #        query.clearCompanyRange();
        #
        #        numRanges = conlen(companyRanges);
        #        for(i = 1; i <= numRanges; i++)
        #        {
        #            companyRange = conpeek(companyRanges, i);
        #            if(conpeek(companyRange, #isSelected))
        #            {
        #                query.addCompanyRange(conpeek(companyRange, #companyId));
        #            }
        #            else
        #            {
        #                allSelected = false;
        #            }
        #        }
        #
        #        if(allSelected)
        #        {
        #            //If all of the companies are selected that is the equivalent of having a cleared list
        #            query.clearCompanyRange();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #unpackDataSource
        #private static client server void unpackDataSource(Query                _query,
        #                                                   container            _dataSourcePack,
        #                                                   QueryBuildDataSource _queryBuildDataSource,
        #                                                   Map                  _origRangeMap,
        #                                                   Map                  _childDataSourceMap,
        #                                                   boolean              _origDataSource,
        #                                                   boolean              _unpackOnlyOpenRanges,
        #                                                   int                  dataSourceNo)
        #{
        #    QueryBuildDataSource    childDataSource;
        #    QueryBuildDataSource    tempDataSource;
        #    QueryBuildRange         queryBuildRange;
        #    QueryGroupByField       groupByField;
        #    QueryOrderByField       orderbyField;
        #    SysDictField            sysDictField;
        #    SysDictField            arrayField;
        #    DictTable               dictTable;
        #    DictIndex               dictIndex;
        #    tableId                 tableId;
        #    tableId                 relatedTableId;
        #    fieldId                 fieldId;
        #    fieldId                 relatedFieldId;
        #    Range                   range;
        #    RangeStatus             rangeStatus;
        #    LabelType               rangeLabel;
        #    SortOrder               sortOrder;
        #    boolean                 autoHeader;
        #    boolean                 autoSum;
        #    boolean                 linkAuto;
        #    container               linkPack;
        #    container               rangePack;
        #    container               origRangePack;
        #    container               indexPack;
        #    container               sortingPack;
        #    container               relatedTablesPack;
        #    container               pack;
        #    container               childDataSourcePack;
        #    container               groupByPack;
        #    container               orderByPack;
        #    MapIterator             mapIterator;
        #    Set                     rangeNoAddSet;
        #    int                     elements;
        #    int                     position;
        #    int                     autoHeaderDetailLevel;
        #    int                     autoSumDetailLevel;
        #    int                     i, j;
        #    int                     uniqueID;
        #    boolean                 rangeBelongsToComposite;
        #    ;
        #    [tableId] = conpeek(_dataSourcePack, #packTableIdPos);
        #
        #    if (dataSourceNo == 1)
        #    {
        #        if(!_query.isCompositeQuery())
        #        {
        #            _query.clearGroupBy();
        #        }
        #        _query.clearOrderBy();
        #    }
        #
        #    if (tableId == _queryBuildDataSource.table())
        #    {
        #        // unpack link
        #        [linkAuto, linkPack] = conpeek(_dataSourcePack, #packLinkPos);
        #
        #        if (!_origDataSource)
        #        {
        #            if (linkAuto)
        #            {
        #                _queryBuildDataSource.relations(true);
        #            }
        #            else
        #            {
        #                elements = conlen(linkPack);
        #                for (i=1; i<=elements; i++)
        #                {
        #                    [fieldId, relatedFieldId] = conpeek(linkPack, i);
        #
        #                    if (new SysDictField(_queryBuildDataSource.parentDataSource().table(), fieldId) &&
        #                        new SysDictField(tableId, relatedFieldId))
        #                    {
        #                        _queryBuildDataSource.addLink(fieldId, relatedFieldId);
        #                    }
        #                }
        #            }
        #        }
        #        // unpack ranges
        #        _queryBuildDataSource.clearRanges();
        #
        #        rangeNoAddSet = new Set(Types::Integer);
        #        if (_origRangeMap &&
        #            _origRangeMap.exists(_queryBuildDataSource.uniqueId()))
        #        {
        #            origRangePack = _origRangeMap.lookup(_queryBuildDataSource.uniqueId());
        #            elements      = conlen(origRangePack);
        #            for (i=1; i<=elements; i++)
        #            {
        #                [fieldId, rangeLabel, range, rangeStatus, rangeBelongsToComposite] = conpeek(origRangePack, i);
        #
        #                if (!fieldId)
        #                {
        #                    fieldId = fieldnum(Common, TableId);
        #                }
        #
        #                queryBuildRange = _queryBuildDataSource.addRange(fieldId);
        #                queryBuildRange.value(range);
        #                queryBuildRange.status(rangeStatus);
        #                queryBuildRange.label(rangeLabel);
        #                if (rangeBelongsToComposite)
        #                {
        #                    queryBuildRange.associateRangeNodeToCompositeQuery();
        #                }
        #
        #                sysDictField = new SysDictField(tableId, queryBuildRange.field());
        #
        #                if (sysDictField.arrayIndex())
        #                {
        #                    if (sysDictField.arrayIndex() == 1)
        #                    {
        #                        rangeNoAddSet.add(fieldExt2Id(sysDictField.id()));
        #                    }
        #                    rangeNoAddSet.add(sysDictField.id());
        #                }
        #                else
        #                {
        #                    rangeNoAddSet.add(sysDictField.id());
        #                    for (j=1; j <= sysDictField.arraySize(); j++)
        #                    {
        #                        arrayField = new SysDictField(tableId, sysDictField.id(), j);
        #                        rangeNoAddSet.add(arrayField.id());
        #                    }
        #
        #                }
        #            }
        #        }
        #
        #        rangePack   = conpeek(_dataSourcePack, #packRangePos);
        #        elements    = conlen(rangePack);
        #        for (i=1; i<=elements; i++)
        #        {
        #            [fieldId, rangeLabel, range, rangeStatus, rangeBelongsToComposite] = conpeek(rangePack, i);
        #
        #            sysDictField     = new SysDictField(tableId, fieldId);
        #
        #            if (sysDictField &&
        #                !rangeNoAddSet.in(sysDictField.id()) &&
        #                sysDictField.saveContents() &&
        #                (rangeStatus == RangeStatus::Open || !_origDataSource || !_unpackOnlyOpenRanges))
        #            {
        #                queryBuildRange = _queryBuildDataSource.addRange(fieldId);
        #                queryBuildRange.label(rangeLabel);
        #                queryBuildRange.value(range);
        #                queryBuildRange.status(rangeStatus);
        #                if (rangeBelongsToComposite)
        #                {
        #                    queryBuildRange.associateRangeNodeToCompositeQuery();
        #                }
        #            }
        #        }
        #
        #        // unpack sorting
        #        _queryBuildDataSource.clearSortIndex();
        #
        #        [indexPack, sortingPack] = conpeek(_dataSourcePack, #packSortingPos);
        #        elements                 = conlen(indexPack);
        #        for (i=1; i<=elements; i++)
        #        {
        #            dictIndex   = new DictIndex(tableId, conpeek(indexPack, i));
        #
        #            if(dictIndex)
        #            {
        #                _queryBuildDataSource.addSortIndex(dictIndex.id());
        #            }
        #        }
        #
        #        position = 0;
        #        elements = conlen(sortingPack);
        #        for (i=1; i<=elements; i++)
        #        {
        #            [fieldId, sortOrder, autoHeader, autoSum, autoHeaderDetailLevel, autoSumDetailLevel] = conpeek(sortingPack, i);
        #
        #            sysDictField = new SysDictField(tableId, fieldId);
        #
        #            if (sysDictField &&
        #                sysDictField.saveContents())
        #            {
        #                position++;
        #                _queryBuildDataSource.addSortField(fieldId);
        #                _queryBuildDataSource.sortDirection(position, sortOrder);
        #                _queryBuildDataSource.autoHeader(position, autoHeader);
        #                _queryBuildDataSource.autoHeaderDetailLevel(position, autoHeaderDetailLevel);
        #                _queryBuildDataSource.autoSum(position, autoSum);
        #                _queryBuildDataSource.autoSumDetailLevel(position, autoSumDetailLevel);
        #            }
        #        }
        #
        #        // Unpack tables
        #        if (_queryBuildDataSource.allowAdd() == QueryAllowAdd::AllFields)
        #        {
        #            relatedTablesPack   = conpeek(_dataSourcePack, #packRelatedTablesPos);
        #            elements            = conlen(relatedTablesPack);
        #
        #            if (_childDataSourceMap)
        #            {
        #                if (_childDataSourceMap.exists(_queryBuildDataSource.uniqueId()))
        #                {
        #                    mapIterator = new MapIterator(_childDataSourceMap.lookup(_queryBuildDataSource.uniqueId()));
        #                }
        #            }
        #
        #            for (i=1; i<=elements; i++)
        #            {
        #                pack             = conpeek(relatedTablesPack, i);
        #                childDataSource  = null;
        #
        #                if (mapIterator)
        #                {
        #                    mapIterator.begin();
        #                    while (mapIterator.more())
        #                    {
        #                        childDataSourcePack = mapIterator.value();
        #
        #                        if (conpeek(childDataSourcePack, #packTableIdPos) == conpeek(pack, #packTableIdPos) &&
        #                            conpeek(childDataSourcePack, #packLinkPos)    == conpeek(pack, #packLinkPos))
        #                        {
        #                            childDataSource = _query.dataSourceUniqueId(mapIterator.key());
        #                            childDataSource.enabled(true);
        #                            break;
        #                        }
        #                        mapIterator.next();
        #                    }
        #                }
        #
        #                if (childDataSource)
        #                {
        #                    SysQuery::unpackDataSource(_query, pack, childDataSource, _origRangeMap, _childDataSourceMap, true, _unpackOnlyOpenRanges, dataSourceNo + i);
        #                }
        #                else
        #                {
        #                    [relatedTableId] = conpeek(pack, #packTableIdPos);
        #                    dictTable        = new DictTable(relatedTableId);
        #
        #                    if (dictTable)
        #                    {
        #                        childDataSource = _queryBuildDataSource.addDataSource(relatedTableId);
        #                        childDataSource.joinMode(JoinMode::ExistsJoin);
        #                        childDataSource.fetchMode(QueryFetchMode::One2One);
        #                        SysQuery::unpackDataSource(_query, pack, childDataSource, _origRangeMap, _childDataSourceMap, false, _unpackOnlyOpenRanges, dataSourceNo + i);
        #                    }
        #                }
        #            }
        #        }
        #
        #        // Unpack Group By Fields
        #        if (dataSourceNo == 1)
        #        {
        #            groupByPack = conpeek(_dataSourcePack, #packGroupByPos);
        #            elements = conlen(groupByPack);
        #            for (i=1; i<=elements; i++)
        #            {
        #                [uniqueID, fieldID, autoHeader, autoHeaderDetailLevel, autoSum, autoSumDetailLevel] = conpeek(groupByPack, i);
        #                tempDataSource = _query.dataSourceUniqueId(uniqueID);
        #                if (tempDataSource)
        #                {
        #                     sysDictField = new SysDictField(tempDataSource.table(), fieldId);
        #
        #                    if (sysDictField && ! _query.isCompositeQuery())
        #                    {
        #                        groupByField = tempDataSource.addGroupByField(fieldID);
        #                        groupByField.autoHeader(autoHeader);
        #                        groupByField.autoHeaderDetailLevel(autoHeaderDetailLevel);
        #                        groupByField.autoSum(autoSum);
        #                        groupByField.autoSumDetailLevel(autoSumDetailLevel);
        #                    }
        #                }
        #            }
        #
        #            // Unpack Order By Fields
        #            orderByPack = conpeek(_dataSourcePack, #packOrderByPos);
        #            elements = conlen(orderByPack);
        #            for (i=1; i<=elements; i++)
        #            {
        #                [uniqueID, fieldID, sortOrder, autoHeader, autoHeaderDetailLevel, autoSum, autoSumDetailLevel] = conpeek(orderByPack, i);
        #                tempDataSource = _query.dataSourceUniqueId(uniqueID);
        #                if (tempDataSource)
        #                {
        #                     sysDictField = new SysDictField(tempDataSource.table(), fieldId);
        #
        #                    if (sysDictField &&
        #                        sysDictField.saveContents())
        #                    {
        #                        orderByField = tempDataSource.addOrderByField(fieldID, sortOrder);
        #                        orderByField.autoHeader(autoHeader);
        #                        orderByField.autoHeaderDetailLevel(autoHeaderDetailLevel);
        #                        orderByField.autoSum(autoSum);
        #                        orderByField.autoSumDetailLevel(autoSumDetailLevel);
        #                    }
        #                }
        #            }
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #unpackRangeAndSortorder
        #public static client server boolean unpackRangeAndSortorder(Query _query, container _pack, int _queryNextUniqueId = 0, boolean _unpackOnlyOpenRanges = true)
        #{
        #    boolean                 ok;
        #    QueryBuildDataSource    queryBuildDataSource;
        #    QueryBuildDataSource    parentDataSource;
        #    QueryBuildRange         queryBuildRange;
        #    container               queryPack;
        #    container               pack;
        #    container               rangeFieldPack;
        #    container               tmp;
        #    int                     elements;
        #    int                     dataSourcePackElements;
        #    int                     rangeCnt;
        #    int                     i, j, k;
        #    int                     packVersion;
        #    int                     queryNextUniqueId   = _queryNextUniqueId;
        #    Map                     rangePackMap        = new Map(Types::Integer, Types::Container);
        #    Map                     childDataSourceMap  = new Map(Types::Integer, Types::Class);
        #    Map                     map;
        #    ;
        #
        #    if (_query)
        #    {
        #        elements    = _query.dataSourceCount();
        #        pack        = SysQuery::updatePackedRangesAndSorting(_pack, queryNextUniqueId);
        #
        #        if (pack)
        #        {
        #            ok          = true;
        #            packVersion = conpeek(pack, 1);
        #            queryPack   = conpeek(pack, 2);
        #
        #            if (queryPack)
        #            {
        #                if (!queryNextUniqueId)
        #                {
        #                    queryNextUniqueId = _query.getNextUniqueId();
        #                }
        #
        #                if (_unpackOnlyOpenRanges)
        #                {
        #                    for (i = 1; i <= elements; i++)
        #                    {
        #                        queryBuildDataSource    = _query.dataSourceNo(i);
        #                        rangeCnt                = queryBuildDataSource.rangeCount();
        #                        rangeFieldPack          = connull();
        #                        k                       = 0;
        #
        #                        for (j=1; j<=rangeCnt; j++)
        #                        {
        #                            queryBuildRange = queryBuildDataSource.range(j);
        #                            if (queryBuildRange &&
        #                                queryBuildRange.status() != RangeStatus::Open)
        #                            {
        #                                tmp            = [queryBuildRange.field(), queryBuildRange.label(), queryBuildRange.value(), queryBuildRange.status()];
        #                                k++;
        #                                rangeFieldPack = conins(rangeFieldPack, k, tmp);
        #                            }
        #                        }
        #                        rangePackMap.insert(queryBuildDataSource.uniqueId(), rangeFieldPack);
        #                    }
        #                }
        #
        #                for (i = 1; i <= elements; i++)
        #                {
        #                    queryBuildDataSource    = _query.dataSourceNo(i);
        #                    childDataSourceMap.insert(queryBuildDataSource.uniqueId(), new Map(Types::Integer, Types::Container));
        #
        #                    if (queryBuildDataSource.uniqueId() >= queryNextUniqueId)
        #                    {
        #                        if (queryBuildDataSource.level() == 1)
        #                        {
        #                            queryBuildDataSource.enabled(true);
        #                        }
        #                        else
        #                        {
        #                            parentDataSource = queryBuildDataSource.parentDataSource();
        #                            if (parentDataSource)
        #                            {
        #                                queryBuildDataSource.enabled(true);
        #                                map = childDataSourceMap.lookup(parentDataSource.uniqueId());
        #                                map.insert(queryBuildDataSource.uniqueId(), SysQuery::packDataSource(_query, queryBuildDataSource.uniqueId(), queryNextUniqueId, i));
        #                            }
        #                            queryBuildDataSource.enabled(false);
        #                        }
        #                    }
        #                }
        #
        #                dataSourcePackElements = conlen(queryPack);
        #                j                      = 0;
        #
        #                for (i=1; i <= _query.dataSourceCount(); i++)
        #                {
        #                    queryBuildDataSource    = _query.dataSourceNo(i);
        #
        #                    if (dataSourcePackElements > j &&
        #                        queryBuildDataSource.enabled() &&
        #                        (queryBuildDataSource.uniqueId() < queryNextUniqueId ||
        #                         queryBuildDataSource.level() == 1))
        #                    {
        #                        j++;
        #                        SysQuery::unpackDataSource(_query,
        #                                                   conpeek(queryPack, j),
        #                                                   queryBuildDataSource,
        #                                                   rangePackMap,
        #                                                   childDataSourceMap,
        #                                                   true,
        #                                                   _unpackOnlyOpenRanges,
        #                                                   i);
        #                    }
        #                }
        #            }
        #
        #            if (packVersion >= #packCompanyRangeAndInternalsVersion)
        #            {
        #                SysQuery::unpackCompanyRanges(_query, conpeek(pack, 3));
        #                _query.unpackInternals(conpeek(pack, 4));
        #            }
        #        }
        #    }
        #
        #    return ok;
        #}
      ENDSOURCE
      SOURCE #updatePackedRangesAndSorting
        #public static client server container updatePackedRangesAndSorting(container _pack, int _queryNextUniqueId = 0)
        #{
        #    container               pack;
        #    int                     version;
        #    ;
        #
        #    if (typeof(conpeek(_pack, 1)) == Types::Integer)
        #    {
        #        version     = conpeek(_pack, 1);
        #    }
        #
        #    if (version >= #packRangeAndSortVersion)
        #    {
        #        pack = _pack;
        #    }
        #    else
        #    {
        #        if (queryIsPackedOk(_pack))
        #        {
        #            pack = SysQuery::packRangeAndSortorder(new Query(_pack), _queryNextUniqueId);
        #        }
        #    }
        #
        #    return pack;
        #}
      ENDSOURCE
      SOURCE #value
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str value(anytype a)
        #{
        #    str quotableStr = ' *",.()\\';
        #    str s;
        #    int t;
        #
        #    str doEscape(str s1)
        #    {
        #        int i = 1;
        #        int pos;
        #        int len = strlen(s1);
        #        str result;
        #        pos = strfind(s1, quotableStr, i, len - i + 1);
        #        while (pos)
        #        {
        #            result += substr(s1, i, pos - i) + '\\' + substr(s1, pos, 1);
        #            i = pos + 1;
        #            if (i<=len)
        #                pos = strfind(s1, quotableStr, i, len - i + 1);
        #            else
        #                pos = 0;
        #        }
        #
        #        if (i == 1)
        #            return s1;
        #
        #        if (i<=len)
        #            result += substr(s1, i, len - i + 1);
        #
        #        return result;
        #    }
        #
        #    t = typeof(a);
        #    switch (t)
        #    {
        #        case Types::Enum:
        #            return enum2Value(a);
        #        case Types::Real:
        #            return num2str(a,0,16,1,0);
        #        case Types::Date:
        #        case Types::UtcDateTime:
        #            return strfmt('\"%1\"',a);  // must be double quotes
        #        case
        #            Types::String,
        #            Types::RString,
        #            Types::VarString:
        #        {
        #            s = a;
        #            if (!s)
        #                return SysQuery::valueEmptyString();
        #            return strfmt('%1',doEscape(s));  // must be double quotes
        #        }
        #        //mazzy 03.12.2019 -->
        #        case Types::Container:
        #            return Any::construct(a).toQueryValue();
        #        case Types::Class:
        #            if (SysDictClass::isEqualOrSuperclass(classidget(a), classnum(Set)) ||
        #                SysDictClass::isEqualOrSuperclass(classidget(a), classnum(List)) ||
        #                SysDictClass::isEqualOrSuperclass(classidget(a), classnum(Array)))
        #            {
        #                return Any::construct(a).toQueryValue();
        #            }
        #       //mazzy 03.12.2019 <--
        #    }
        #    // <GEEU>
        #
        #    // to avoid stack trace on unsupported value 'null'
        #    if (! new DictEnum(enumnum(Types)).value2Symbol(t))
        #        return SysQuery::valueUnlimited();
        #
        #        // </GEEU>
        #    return strfmt('%1',a);
        #}
      ENDSOURCE
      SOURCE #valueEmptyString
        #// Used when you want to have a range which must have a blank value
        #// use this method for future compability
        #public static str valueEmptyString()
        #{
        #    return '\"\"';
        #}
      ENDSOURCE
      SOURCE #valueNot
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static str valueNot(anytype a)
        #{
        #    str ret;
        #    int i;
        #    int len;
        #    container con;
        #    ;
        #
        #    switch(typeof(a))
        #    {
        #        case Types::Container:
        #            len = conlen(a);
        #            for( i=1; i<=len; ++i)
        #            {
        #                con += SysQuery::valueNot(conpeek(a, i));
        #            }
        #            ret = con2str(con);
        #            break;
        #
        #        case Types::Class:
        #            if (SysDictClass::isEqualOrSuperclass(a, classnum(Set)))
        #            {
        #                ret = SysQuery::valueNot(ConUtil::fromArray(a));
        #                break;
        #            }
        #            else if (SysDictClass::isEqualOrSuperclass(a, classnum(List)))
        #            {
        #                ret = SysQuery::valueNot(ConUtil::fromList(a));
        #                break;
        #            }
        #            else if (SysDictClass::isEqualOrSuperclass(a, classnum(Array)))
        #            {
        #                ret = SysQuery::valueNot(ConUtil::fromArray(a));
        #                break;
        #            }
        #            // no break! проваливаемся ниже
        #        default:
        #            ret = strfmt('!%1',SysQuery::value(a));
        #            break;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #valueNotEmptyString
        #// Used when you want to have a range which must NOT have a blank value
        #// use this method for future compability
        #public static str valueNotEmptyString()
        #{
        #    return '!\"\"';
        #}
        #
      ENDSOURCE
      SOURCE #valueUnlimited
        #// Used when you want to have a completely open range, no limitations; "a blank range"
        #// use this method for future compability
        #public static str valueUnlimited()
        #{
        #    return '';
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysQueryTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysQueryTest
    PROPERTIES
      Name                #SysQueryTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class SysQueryTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testValue_Container
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testValue_Container()
        #{
        #    InventLocation  inventLocation;
        #    container       con         = [InventLocationType::Quarantine, InventLocationType::Standard];
        #    str             range       = SysQuery::value(con);
        #    Query           q           = new Query();
        #    QueryRun        qr;
        #    boolean         found;
        #    ;
        #
        #    q.addDataSource(inventLocation.TableId)
        #        .addRange(fieldnum(InventLocation, InventLocationType))
        #        .value(range);
        #
        #    qr = new QueryRun(q);
        #    while(qr.next())
        #    {
        #        inventLocation = qr.get(inventLocation.TableId);
        #        this.assertNotEqual(0, confind(con, inventLocation.InventLocationType));
        #        found = true;
        #    }
        #
        #    this.assertTrue(found);
        #}
      ENDSOURCE
      SOURCE #testValueNot_Container
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testValueNot_Container()
        #{
        #    InventLocation  inventLocation;
        #    container       con         = [InventLocationType::Quarantine, InventLocationType::Standard];
        #    str             range       = SysQuery::valueNot(con);
        #    Query           q           = new Query();
        #    QueryRun        qr;
        #    boolean         found;
        #    ;
        #
        #    q.addDataSource(inventLocation.TableId)
        #        .addRange(fieldnum(InventLocation, InventLocationType))
        #        .value(range);
        #
        #    qr = new QueryRun(q);
        #    while(qr.next())
        #    {
        #        inventLocation = qr.get(inventLocation.TableId);
        #        this.assertEquals(0, confind(con, inventLocation.InventLocationType));
        #        found = true;
        #    }
        #
        #    this.assertTrue(found);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Timer unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Timer
    PROPERTIES
      Name                #Timer
      Extends             #SysStopwatch
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class Timer extends SysStopwatch
        #{
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString()
        #{
        #    return this.elapsed();
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Timer construct()
        #{
        #    Timer timer = new Timer();
        #
        #    return timer;
        #}
        #
      ENDSOURCE
      SOURCE #startNew
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static Timer startNew()
        #{
        #    Timer timer = Timer::construct();
        #    ;
        #
        #    timer.start();
        #
        #    return timer;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStopwatch unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStopwatch
    PROPERTIES
      Name                #SysStopwatch
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// класс обертка класса System.Diagnostics.Stopwatch
        #// см. https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch
        #//
        #// быстрый и эффективный класс:
        #// + не задействует метод new(), поэтому можно спокойно использовать classFactory.createClass() и другие фабрики
        #// + объекты создаются в памяти только по необходимости
        #// + минимум вычислений на X++, форматирование и преобразование в строку выполняется в .net
        #// + скрывает взаимодействие с CLR - программист может просто использовать X++ класс в своем коде
        #// + метод stopwatch() возвращает CLR-объект  - программист может получить доступ ко всей функциональности .net-объекта
        #// + метод toString() позволяет видеть время выполнения в отладчике
        #//
        #class SysStopwatch
        #{
        #    System.Diagnostics.Stopwatch stopwatch;
        #}
      ENDSOURCE
      SOURCE #elapsed
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает строку со временем выполнения в формате [-][d.]hh:mm:ss (без миллисекунд)
        #public str elapsed()
        #{
        #    str   ret;
        #    int64 ticks;
        #    int64 ticksPerSecond = 10000000; // https://docs.microsoft.com/en-us/dotnet/api/system.timespan.tickspersecond
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    ticks = stopwatch.get_ElapsedTicks();
        #    ticks -= ticks mod ticksPerSecond;  // отбросим миллисекунды
        #
        #    ret = System.TimeSpan::FromTicks(ticks).ToString();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #ElapsedMilliseconds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public int64 elapsedMilliseconds()
        #{
        #    int64 ret;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    ret = stopwatch.get_ElapsedMilliseconds();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #elapsedTicks
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public int64 elapsedTicks()
        #{
        #    int64 ret;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    ret = stopwatch.get_ElapsedTicks();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #elapsedWide
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// возвращает строку со временем выполнения в формате [-][d.]hh:mm:ss[.ffffff] (с миллисекундами)
        #public str elapsedWide()
        #{
        #    str ret;
        #    System.TimeSpan timespan;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    timespan = stopwatch.get_Elapsed();
        #
        #    ret = timespan.ToString();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #ensureInitialized
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #protected void ensureInitialized()
        #{
        #    if( !stopwatch )
        #    {
        #        stopwatch = new System.Diagnostics.Stopwatch();
        #    }
        #}
      ENDSOURCE
      SOURCE #isRunning
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public boolean isRunning()
        #{
        #    boolean ret;
        #
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    ret = stopwatch.get_IsRunning();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysStopwatch reset()
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    stopwatch.Reset();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #start
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysStopwatch start()
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    stopwatch.Start();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #stop
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public SysStopwatch stop()
        #{
        #    new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #    this.ensureInitialized();
        #
        #    stopwatch.Stop();
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #stopwatch
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public System.Diagnostics.Stopwatch stopwatch()
        #{
        #    this.ensureInitialized();
        #
        #    return stopwatch;
        #}
      ENDSOURCE
      SOURCE #toString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public str toString()
        #{
        #    return this.elapsed();
        #}
      ENDSOURCE
      SOURCE #construct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysStopwatch construct()
        #{
        #    return new SysStopwatch();
        #}
        #
      ENDSOURCE
      SOURCE #startNew
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static SysStopwatch startNew()
        #{
        #    return SysStopwatch::construct().start();
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysStopwatchTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysStopwatchTest
    PROPERTIES
      Name                #SysStopwatchTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #class SysStopwatchTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testConstruct
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testConstruct()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertNotNull(stopwatch);
        #    this.assertTrue(SysDictClass::is(stopwatch, classnum(SysStopwatch)));
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testElapsed
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsed()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #    str elapsed;
        #
        #    sleep(50);
        #    elapsed = stopwatch.elapsed();
        #
        #    this.assertTrue(match(@'^:d:d\::d:d\::d:d$', elapsed), elapsed);
        #}
      ENDSOURCE
      SOURCE #testElapsed_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsed_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertNotNull(stopwatch);
        #    this.assertEquals('00:00:00', stopwatch.elapsed());
        #}
      ENDSOURCE
      SOURCE #testElapsedMilliseconds
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsedMilliseconds()
        #{
        #    SysStopwatch sysStopWatch = SysStopWatch::startNew();
        #    int64 zero = 0;
        #;
        #    sleep(50);
        #
        #    this.assertNotNull(sysStopWatch);
        #    this.assertNotEqual(zero, sysStopWatch.elapsedMilliseconds());
        #}
      ENDSOURCE
      SOURCE #testElapsedMilliseconds_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsedMilliseconds_NotStarted()
        #{
        #    SysStopwatch sysStopWatch = SysStopWatch::construct();
        #    int64 zero = 0;
        #;
        #    this.assertNotNull(sysStopWatch);
        #    this.assertEquals(zero, sysStopWatch.elapsedMilliseconds());
        #}
      ENDSOURCE
      SOURCE #testElapsedWideFormat
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsedWideFormat()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #    str elapsed;
        #
        #    sleep(50);
        #    elapsed = stopwatch.elapsedWide();
        #
        #    this.assertTrue(match(@'^:d:d\::d:d\::d:d\.:d+$', elapsed), elapsed);
        #}
      ENDSOURCE
      SOURCE #testElapsedWideFormat_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testElapsedWideFormat_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertNotNull(stopwatch);
        #    this.assertEquals('00:00:00', stopwatch.elapsedWide());
        #}
      ENDSOURCE
      SOURCE #testIsRunning
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #
        #    sleep(50);
        #
        #    this.assertTrue(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testIsRunning_Immediately
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning_Immediately()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #
        #    this.assertTrue(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testIsRunning_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testIsRunning_Reset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning_Reset()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #
        #    stopwatch.reset();
        #
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testIsRunning_Start
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning_Start()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #
        #    this.assertTrue(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testIsRunning_Stop
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testIsRunning_Stop()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testReset
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testReset()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #    int64 zero = 0;
        #
        #    sleep(50);
        #    stopwatch.reset();
        #
        #    this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testReset_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testReset_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #    int64 zero = 0;
        #
        #    this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testStartNew
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testStartNew()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #
        #    this.assertNotNull(stopwatch);
        #    this.assertTrue(SysDictClass::is(stopwatch, classnum(SysStopwatch)));
        #    this.assertTrue(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testStop
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testStop()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #    int64 zero = 0;
        #
        #    sleep(50);
        #    stopwatch.stop();
        #
        #    this.assertNotEqual(zero, stopwatch.elapsedMilliseconds());
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testStop_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testStop_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #    int64 zero = 0;
        #
        #    sleep(50);
        #    stopwatch.stop();
        #
        #    this.assertEquals(zero, stopwatch.elapsedMilliseconds());
        #    this.assertFalse(stopwatch.isRunning());
        #}
      ENDSOURCE
      SOURCE #testToString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testToString()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::startNew();
        #    str elapsed;
        #
        #    sleep(50);
        #    elapsed = stopwatch.elapsed();
        #
        #    this.assertTrue(match(@':d:d\::d:d\::d:d$', elapsed), elapsed);
        #}
      ENDSOURCE
      SOURCE #testToString_NotStarted
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #void testToString_NotStarted()
        #{
        #    SysStopwatch stopwatch = SysStopwatch::construct();
        #
        #    this.assertEquals('00:00:00', stopwatch.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: Error unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #Error
    PROPERTIES
      Name                #Error
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
        #class Error
        #{
        #}
      ENDSOURCE
      SOURCE #mainFormDatasource
        #private static FormBuildDataSource mainFormDatasource(Form form)
        #{
        #    FormBuildDataSource    formDataSource;
        #    int                    i;
        #    SysDictTable           dictTable;
        #;
        #    for (i=1; i<= form.dataSourceCount(); i++)
        #    {
        #        formDataSource = form.dataSource(i);
        #        dictTable = new SysDictTable(formDataSource.table());
        #
        #        //Find main table
        #        if (!formDataSource.joinSource() &&
        #            form.name() == SysRecordTemplate::getFormName(dictTable.id()))
        #        {
        #            return formDataSource;
        #        }
        #    }
        #    return form.dataSource(1);
        #}
      ENDSOURCE
      SOURCE #missingFormActiveBuffer
        #static LabelType missingFormActiveBuffer(FormName name,
        #                                         str bufferType = '')
        #{
        #    if (bufferType)
        #    {
        #        return strfmt("@SYS19096", name, bufferType);
        #    }
        #    return strfmt("@SYS22678", name);
        #}
      ENDSOURCE
      SOURCE #missingOverload
        #//Do not use!
        #//Declare method as abstract instead or call Error::missingOverride();
        ##obsolete static LabelType missingOverload(str name)
        #{
        #    return Error::missingOverride(name);
        #}
      ENDSOURCE
      SOURCE #missingOverride
        #//Declare method as abstract if possible
        #public static LabelType missingOverride(identifiername name)
        #{
        #    return strfmt("@SYS18885",name);
        #}
      ENDSOURCE
      SOURCE #missingParameter
        #public static LabelType missingParameter(Object caller)
        #{
        #    FormBuildDataSource formMainDataSource;
        #    FormRun             formRun;
        #    FormDesign          formDesign;
        #
        #    if (caller)
        #    {
        #        if(SysDictClass::is(caller,classnum(FormRun)))
        #        {
        #                formRun            = caller;
        #                formDesign         = formRun.design();
        #                formMainDataSource = Error::mainFormDatasource(formRun.form());
        #
        #                if (formMainDataSource)
        #                {
        #                    if (formDesign && formDesign.caption())
        #                        return strfmt("@SYS19096", formDesign.caption(), tableid2pname(formMainDataSource.table()));
        #
        #                    return strfmt("@SYS19096", formRun.name(), tableid2pname(formMainDataSource.table()));
        #                }
        #
        #                if (formDesign && formDesign.caption())
        #                    return strfmt("@SYS22862", formDesign.caption());
        #
        #                return strfmt("@SYS22862", formRun.name());
        #        }
        #    }
        #    return "@SYS83964";
        #}
      ENDSOURCE
      SOURCE #missingRecord
        #static LabelType missingRecord(str name)
        #{
        #    return strfmt("@SYS19324",name);
        #}
      ENDSOURCE
      SOURCE #unsupportedEmptyString
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// в качестве описания можно использовать название переменной
        #public static LabelType unsupportedEmptyString(str _funcName, anytype _description = '')
        #{
        #    LabelType ret = strfmt("unsupported empty string in %1 %2", _funcName, _description);
        #
        #    return ret;
        #    }
      ENDSOURCE
      SOURCE #unsupportedEnum
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static LabelType unsupportedEnum(str _funcName, anytype _enumValue = '')
        #{
        #    LabelType ret = strfmt("Unsupported enum <%1> in %2", _enumValue, _funcName);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #unsupportedNull
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #// в качестве описания можно использовать название переменной
        #public static LabelType unsupportedNull(str _funcName, anytype _description = '')
        #{
        #    LabelType ret = strfmt("unsupported Null in %1 %2", _funcName, _description);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #unsupportedType
        #//
        #// https://github.com/mazzy-ax/SysUtil
        #//
        #public static LabelType unsupportedType(str _funcName, anytype type = '')
        #{
        #    LabelType ret = strfmt("unsupported Type %1 - %2", type, _funcName);
        #
        #    ret += TextUtil::callStack();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #wrongUseOfFunction
        #static LabelType wrongUseOfFunction(str name)
        #{
        #    return strfmt("@SYS22828",name);
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : SysUtil unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysUtil
   SHARED
  PROPERTIES
    Name                #SysUtil
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Enumerator
      PROPERTIES
        Name                #Enumerator
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50021
        NODETYPE 329
        NAME #EnumeratorUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50022
        NODETYPE 329
        NAME #ConEnumerator
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50026
        NODETYPE 329
        NAME #OneValueEnumerator
      ENDNODE
      ENDGROUP
      
    GROUP #Collection
      PROPERTIES
        Name                #Collection
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50023
        NODETYPE 329
        NAME #ConUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50025
        NODETYPE 329
        NAME #ListUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50029
        NODETYPE 329
        NAME #SetUtil
      ENDNODE
      ENDGROUP
      
    GROUP #StringUtil
      PROPERTIES
        Name                #StringUtil
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50030
        NODETYPE 329
        NAME #StrUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50036
        NODETYPE 329
        NAME #TextBufferUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50037
        NODETYPE 329
        NAME #TextUtil
      ENDNODE
      ENDGROUP
      
    GROUP #Record
      PROPERTIES
        Name                #Record
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50028
        NODETYPE 329
        NAME #RecordUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50034
        NODETYPE 329
        NAME #SysRecordList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50035
        NODETYPE 329
        NAME #SysRecordMap
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50033
        NODETYPE 329
        NAME #SysRecordInsertList
      ENDNODE
      ENDGROUP
      
    GROUP #Util
      PROPERTIES
        Name                #Util
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50019
        NODETYPE 329
        NAME #ArgsUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50017
        NODETYPE 329
        NAME #AnytypeUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50020
        NODETYPE 329
        NAME #ClrTypeUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50027
        NODETYPE 329
        NAME #QueryRunUtil
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50013
        NODETYPE 329
        NAME #SessionUtil
      ENDNODE
      ENDGROUP
      
    GROUP #Any
      PROPERTIES
        Name                #Any
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50014
        NODETYPE 329
        NAME #Any
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50016
        NODETYPE 329
        NAME #AnyTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50015
        NODETYPE 329
        NAME #AnyPrevCurrent
      ENDNODE
      ENDGROUP
      
    GROUP #Sys
      PROPERTIES
        Name                #Sys
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1568
        NODETYPE 329
        NAME #SysDictClass
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 982
        NODETYPE 329
        NAME #SysDictEnum
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 935
        NODETYPE 329
        NAME #SysDictTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 2881
        NODETYPE 329
        NAME #SysQuery
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50032
        NODETYPE 329
        NAME #SysQueryTest
      ENDNODE
      ENDGROUP
      
    GROUP #Timer
      PROPERTIES
        Name                #Timer
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50038
        NODETYPE 329
        NAME #Timer
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50001
        NODETYPE 329
        NAME #SysStopwatch
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 50002
        NODETYPE 329
        NAME #SysStopwatchTest
      ENDNODE
      ENDGROUP
      
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 123
      NODETYPE 329
      NAME #Error
    ENDNODE
  ENDPROJECT
  

***Element: END
